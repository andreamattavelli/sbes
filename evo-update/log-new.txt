[MASTER] 22:26:04.491 [pool-1-thread-1] DEBUG TestClusterGenerator - Analyzed classes:
org.graphstream.graph.implementations.MultiNode_Stub
java.lang.Object
java.util.HashMap
java.util.LinkedList
org.graphstream.graph.implementations.AdjacencyListNode
org.graphstream.graph.implementations.SingleNode
org.graphstream.graph.implementations.MultiNode
org.graphstream.graph.implementations.AbstractEdge
org.graphstream.graph.implementations.AdjacencyListGraph
org.graphstream.graph.implementations.SingleGraph
org.graphstream.graph.implementations.MultiGraph
org.graphstream.graph.implementations.DefaultGraph
org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent
org.graphstream.stream.SinkAdapter
org.graphstream.stream.Timeline
org.graphstream.stream.PipeBase
org.graphstream.stream.PipeAdapter
org.graphstream.stream.AttributePipe
org.graphstream.stream.file.FileSourceGraphML
org.graphstream.stream.file.FileSourceGPX
org.graphstream.stream.file.FileSourceGEXF
org.graphstream.stream.file.FileSourceTLP
org.graphstream.stream.file.FileSourceDOT
org.graphstream.stream.file.FileSourcePajek
org.graphstream.stream.file.FileSourceDGS
org.graphstream.stream.file.FileSourceGML
org.graphstream.stream.file.FileSourceLGL
org.graphstream.stream.file.FileSourceNCol
org.graphstream.stream.file.FileSourceEdge
org.graphstream.stream.file.FileSourceDGS1And2
org.graphstream.stream.file.FileSinkImages
org.graphstream.stream.file.FileSinkSVG2
org.graphstream.stream.file.FileSinkSVG
org.graphstream.stream.file.FileSinkGEXF
org.graphstream.stream.file.FileSinkDGS
org.graphstream.stream.file.FileSinkGML
org.graphstream.stream.file.FileSinkDOT
org.graphstream.stream.file.FileSinkGraphML
org.graphstream.stream.file.FileSinkTikZ
org.graphstream.stream.file.FileSinkDynamicGML
org.graphstream.stream.SourceBase$ElementType
java.io.PipedInputStream
java.io.SequenceInputStream
java.io.ObjectInputStream
java.io.ByteArrayInputStream
java.io.FilterInputStream
java.io.FileInputStream
java.io.PushbackInputStream
java.io.DataInputStream
java.io.BufferedInputStream
java.io.CharArrayReader
java.io.PipedReader
java.io.StringReader
java.io.InputStreamReader
java.io.BufferedReader
java.io.PushbackReader
java.io.FileReader
java.io.LineNumberReader
java.net.URL
org.graphstream.stream.file.FileSinkImages$OutputType
org.graphstream.stream.file.FileSinkImages$Resolutions
org.graphstream.stream.file.FileSinkImages$CustomResolution
org.graphstream.stream.file.FileSinkImages$OutputPolicy
java.io.PipedOutputStream
java.io.ObjectOutputStream
java.io.ByteArrayOutputStream
java.io.FilterOutputStream
java.io.FileOutputStream
java.io.DataOutputStream
java.io.BufferedOutputStream
java.io.PrintStream
java.io.PipedWriter
java.io.StringWriter
java.io.CharArrayWriter
java.io.PrintWriter
java.io.BufferedWriter
java.io.OutputStreamWriter
java.io.FileWriter
org.graphstream.stream.file.FileSinkImages$LayoutPolicy
org.graphstream.stream.file.FileSinkImages$Quality
org.graphstream.stream.file.FileSinkImages$RendererType
java.util.StringTokenizer
java.io.File
java.io.FileDescriptor
java.io.RandomAccessFile
java.net.Proxy
javax.swing.text.Segment
java.util.Locale
java.net.URI
org.apache.oro.io.AwkFilenameFilter
org.apache.oro.io.GlobFilenameFilter
org.apache.oro.io.Perl5FilenameFilter
java.net.Proxy$Type
java.net.InetSocketAddress
java.util.Locale$Category
java.net.InetAddress
java.net.NetworkInterface
Generators:
 Generators for org.graphstream.graph.implementations.MultiNode_Stub: 1
  org.graphstream.graph.implementations.MultiNode_Stub <- public org.graphstream.graph.implementations.MultiNode_Stub() 
 Generators for java.lang.Object[]: 3
  java.lang.Object[] <- public java.lang.Object[] org.graphstream.graph.implementations.MultiNode_Stub.getArray(java.lang.String) 
  java.lang.Object[] <- public java.lang.Object[] java.util.LinkedList.toArray() 
  java.lang.Object[] <- public abstract java.lang.Object[] org.graphstream.graph.Element.getArray(java.lang.String) 
 Generators for java.util.Collection<?>: 9
  java.util.Collection<?> <- public java.util.Collection org.graphstream.graph.implementations.MultiNode_Stub.getAttributeKeySet() 
  java.util.Collection<?> <- public java.util.Collection org.graphstream.graph.implementations.MultiNode_Stub.getEdgeSet() 
  java.util.Collection<?> <- public java.util.Collection org.graphstream.graph.implementations.MultiNode_Stub.getEdgeSetBetween(int) 
  java.util.Collection<?> <- public java.util.Collection org.graphstream.graph.implementations.MultiNode_Stub.getEdgeSetBetween(java.lang.String) 
  java.util.Collection<?> <- public java.util.Collection org.graphstream.graph.implementations.MultiNode_Stub.getEdgeSetBetween(org.graphstream.graph.Node) 
  java.util.Collection<?> <- public java.util.Collection org.graphstream.graph.implementations.MultiNode_Stub.getEnteringEdgeSet() 
  java.util.Collection<?> <- public java.util.Collection org.graphstream.graph.implementations.MultiNode_Stub.getLeavingEdgeSet() 
  java.util.Collection<?> <- public java.util.Collection<V> java.util.HashMap.values() 
  java.util.Collection<?> <- public java.util.Collection<java.lang.String> org.graphstream.graph.implementations.AbstractElement.getAttributeKeySet() 
 Generators for java.lang.Iterable<?>: 10
  java.lang.Iterable<?> <- public java.lang.Iterable org.graphstream.graph.implementations.MultiNode_Stub.getEachAttributeKey() 
  java.lang.Iterable<?> <- public java.lang.Iterable org.graphstream.graph.implementations.MultiNode_Stub.getEachEdge() 
  java.lang.Iterable<?> <- public java.lang.Iterable org.graphstream.graph.implementations.MultiNode_Stub.getEachEnteringEdge() 
  java.lang.Iterable<?> <- public java.lang.Iterable org.graphstream.graph.implementations.MultiNode_Stub.getEachLeavingEdge() 
  java.lang.Iterable<?> <- public abstract java.lang.Iterable<java.lang.String> org.graphstream.graph.Element.getAttributeKeySet() 
  java.lang.Iterable<?> <- public java.lang.Iterable<java.lang.String> org.graphstream.graph.implementations.AbstractElement.getEachAttributeKey() 
  java.lang.Iterable<?> <- public java.lang.Iterable<org.graphstream.stream.AttributeSink> org.graphstream.graph.implementations.AbstractGraph.attributeSinks() 
  java.lang.Iterable<?> <- public java.lang.Iterable<org.graphstream.stream.ElementSink> org.graphstream.graph.implementations.AbstractGraph.elementSinks() 
  java.lang.Iterable<?> <- public java.lang.Iterable<org.graphstream.stream.AttributeSink> org.graphstream.stream.SourceBase.attributeSinks() 
  java.lang.Iterable<?> <- public java.lang.Iterable<org.graphstream.stream.ElementSink> org.graphstream.stream.SourceBase.elementSinks() 
 Generators for org.graphstream.graph.Edge: 12
  org.graphstream.graph.Edge <- public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdge(int) 
  org.graphstream.graph.Edge <- public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeBetween(int) 
  org.graphstream.graph.Edge <- public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeBetween(java.lang.String) 
  org.graphstream.graph.Edge <- public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeBetween(org.graphstream.graph.Node) 
  org.graphstream.graph.Edge <- public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeFrom(int) 
  org.graphstream.graph.Edge <- public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeFrom(java.lang.String) 
  org.graphstream.graph.Edge <- public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeFrom(org.graphstream.graph.Node) 
  org.graphstream.graph.Edge <- public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeToward(int) 
  org.graphstream.graph.Edge <- public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeToward(java.lang.String) 
  org.graphstream.graph.Edge <- public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeToward(org.graphstream.graph.Node) 
  org.graphstream.graph.Edge <- public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEnteringEdge(int) 
  org.graphstream.graph.Edge <- public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getLeavingEdge(int) 
 Generators for org.graphstream.graph.Graph: 2
  org.graphstream.graph.Graph <- public org.graphstream.graph.Graph org.graphstream.graph.implementations.MultiNode_Stub.getGraph() 
  org.graphstream.graph.Graph <- public org.graphstream.graph.Graph org.graphstream.graph.implementations.AbstractNode.getGraph() 
 Generators for java.util.HashMap<?, ?>: 6
  java.util.HashMap<?, ?> <- public java.util.HashMap org.graphstream.graph.implementations.MultiNode_Stub.getHash(java.lang.String) 
  java.util.HashMap<?, ?> <- public java.util.HashMap() 
  java.util.HashMap<?, ?> <- public java.util.HashMap(int) 
  java.util.HashMap<?, ?> <- public java.util.HashMap(int,float) 
  java.util.HashMap<?, ?> <- public java.util.HashMap(java.util.Map<? extends K, ? extends V>) 
  java.util.HashMap<?, ?> <- public abstract java.util.HashMap<?, ?> org.graphstream.graph.Element.getHash(java.lang.String) 
 Generators for java.lang.String: 92
  java.lang.String <- public java.lang.String org.graphstream.graph.implementations.MultiNode_Stub.getId() 
  java.lang.String <- public static final java.lang.String org.graphstream.graph.implementations.MultiNode_Stub.ELEMENT_0_0 
  java.lang.String <- public java.lang.String java.util.AbstractMap.toString() 
  java.lang.String <- public java.lang.String java.util.AbstractCollection.toString() 
  java.lang.String <- public abstract java.lang.String org.graphstream.graph.Element.getId() 
  java.lang.String <- protected java.lang.String org.graphstream.graph.implementations.AbstractNode.myGraphId() 
  java.lang.String <- public abstract java.lang.String org.graphstream.graph.Node.toString() 
  java.lang.String <- protected java.lang.String org.graphstream.graph.implementations.AbstractEdge.myGraphId() 
  java.lang.String <- public java.lang.String org.graphstream.graph.implementations.AbstractEdge.toString() 
  java.lang.String <- protected java.lang.String org.graphstream.graph.implementations.AbstractGraph.myGraphId() 
  java.lang.String <- public java.lang.String org.graphstream.graph.implementations.AbstractElement.toString() 
  java.lang.String <- public java.lang.String java.io.ObjectInputStream.readUTF() throws java.io.IOException 
  java.lang.String <- public final java.lang.String java.io.DataInputStream.readUTF() throws java.io.IOException 
  java.lang.String <- public static final java.lang.String java.io.DataInputStream.readUTF(java.io.DataInput) throws java.io.IOException 
  java.lang.String <- public java.lang.String java.io.InputStreamReader.getEncoding() 
  java.lang.String <- public java.lang.String java.io.BufferedReader.readLine() throws java.io.IOException 
  java.lang.String <- public java.lang.String java.io.LineNumberReader.readLine() throws java.io.IOException 
  java.lang.String <- public java.lang.String java.net.URL.getAuthority() 
  java.lang.String <- public java.lang.String java.net.URL.getFile() 
  java.lang.String <- public java.lang.String java.net.URL.getHost() 
  java.lang.String <- public java.lang.String java.net.URL.getPath() 
  java.lang.String <- public java.lang.String java.net.URL.getProtocol() 
  java.lang.String <- public java.lang.String java.net.URL.getQuery() 
  java.lang.String <- public java.lang.String java.net.URL.getRef() 
  java.lang.String <- public java.lang.String java.net.URL.getUserInfo() 
  java.lang.String <- public java.lang.String java.net.URL.toExternalForm() 
  java.lang.String <- public java.lang.String java.net.URL.toString() 
  java.lang.String <- public java.lang.String org.graphstream.stream.file.FileSinkImages$Resolutions.toString() 
  java.lang.String <- public java.lang.String org.graphstream.stream.file.FileSinkImages$CustomResolution.toString() 
  java.lang.String <- public synchronized java.lang.String java.io.ByteArrayOutputStream.toString() 
  java.lang.String <- public synchronized java.lang.String java.io.ByteArrayOutputStream.toString(java.lang.String) throws java.io.UnsupportedEncodingException 
  java.lang.String <- public java.lang.String java.io.StringWriter.toString() 
  java.lang.String <- public java.lang.String java.io.CharArrayWriter.toString() 
  java.lang.String <- public java.lang.String java.io.OutputStreamWriter.getEncoding() 
  java.lang.String <- public java.lang.String java.util.StringTokenizer.nextToken() 
  java.lang.String <- public java.lang.String java.util.StringTokenizer.nextToken(java.lang.String) 
  java.lang.String <- public java.lang.String java.io.File.getAbsolutePath() 
  java.lang.String <- public java.lang.String java.io.File.getCanonicalPath() throws java.io.IOException 
  java.lang.String <- public java.lang.String java.io.File.getName() 
  java.lang.String <- public java.lang.String java.io.File.getParent() 
  java.lang.String <- public java.lang.String java.io.File.getPath() 
  java.lang.String <- public java.lang.String java.io.File.toString() 
  java.lang.String <- public final java.lang.String java.io.RandomAccessFile.readLine() throws java.io.IOException 
  java.lang.String <- public final java.lang.String java.io.RandomAccessFile.readUTF() throws java.io.IOException 
  java.lang.String <- public java.lang.String java.net.Proxy.toString() 
  java.lang.String <- public java.lang.String javax.swing.text.Segment.toString() 
  java.lang.String <- public java.lang.String java.util.Locale.getCountry() 
  java.lang.String <- public final java.lang.String java.util.Locale.getDisplayCountry() 
  java.lang.String <- public java.lang.String java.util.Locale.getDisplayCountry(java.util.Locale) 
  java.lang.String <- public final java.lang.String java.util.Locale.getDisplayLanguage() 
  java.lang.String <- public java.lang.String java.util.Locale.getDisplayLanguage(java.util.Locale) 
  java.lang.String <- public final java.lang.String java.util.Locale.getDisplayName() 
  java.lang.String <- public java.lang.String java.util.Locale.getDisplayName(java.util.Locale) 
  java.lang.String <- public java.lang.String java.util.Locale.getDisplayScript() 
  java.lang.String <- public java.lang.String java.util.Locale.getDisplayScript(java.util.Locale) 
  java.lang.String <- public final java.lang.String java.util.Locale.getDisplayVariant() 
  java.lang.String <- public java.lang.String java.util.Locale.getDisplayVariant(java.util.Locale) 
  java.lang.String <- public java.lang.String java.util.Locale.getExtension(char) 
  java.lang.String <- public java.lang.String java.util.Locale.getISO3Country() throws java.util.MissingResourceException 
  java.lang.String <- public java.lang.String java.util.Locale.getISO3Language() throws java.util.MissingResourceException 
  java.lang.String <- public java.lang.String java.util.Locale.getLanguage() 
  java.lang.String <- public java.lang.String java.util.Locale.getScript() 
  java.lang.String <- public java.lang.String java.util.Locale.getUnicodeLocaleType(java.lang.String) 
  java.lang.String <- public java.lang.String java.util.Locale.getVariant() 
  java.lang.String <- public java.lang.String java.util.Locale.toLanguageTag() 
  java.lang.String <- public final java.lang.String java.util.Locale.toString() 
  java.lang.String <- public java.lang.String java.net.URI.getAuthority() 
  java.lang.String <- public java.lang.String java.net.URI.getFragment() 
  java.lang.String <- public java.lang.String java.net.URI.getHost() 
  java.lang.String <- public java.lang.String java.net.URI.getPath() 
  java.lang.String <- public java.lang.String java.net.URI.getQuery() 
  java.lang.String <- public java.lang.String java.net.URI.getRawAuthority() 
  java.lang.String <- public java.lang.String java.net.URI.getRawFragment() 
  java.lang.String <- public java.lang.String java.net.URI.getRawPath() 
  java.lang.String <- public java.lang.String java.net.URI.getRawQuery() 
  java.lang.String <- public java.lang.String java.net.URI.getRawSchemeSpecificPart() 
  java.lang.String <- public java.lang.String java.net.URI.getRawUserInfo() 
  java.lang.String <- public java.lang.String java.net.URI.getScheme() 
  java.lang.String <- public java.lang.String java.net.URI.getSchemeSpecificPart() 
  java.lang.String <- public java.lang.String java.net.URI.getUserInfo() 
  java.lang.String <- public java.lang.String java.net.URI.toASCIIString() 
  java.lang.String <- public java.lang.String java.net.URI.toString() 
  java.lang.String <- public final java.lang.String java.net.InetSocketAddress.getHostName() 
  java.lang.String <- public final java.lang.String java.net.InetSocketAddress.getHostString() 
  java.lang.String <- public java.lang.String java.net.InetSocketAddress.toString() 
  java.lang.String <- public java.lang.String java.net.InetAddress.getCanonicalHostName() 
  java.lang.String <- public java.lang.String java.net.InetAddress.getHostAddress() 
  java.lang.String <- public java.lang.String java.net.InetAddress.getHostName() 
  java.lang.String <- public java.lang.String java.net.InetAddress.toString() 
  java.lang.String <- public java.lang.String java.net.NetworkInterface.getDisplayName() 
  java.lang.String <- public java.lang.String java.net.NetworkInterface.getName() 
  java.lang.String <- public java.lang.String java.net.NetworkInterface.toString() 
 Generators for java.lang.CharSequence: 3
  java.lang.CharSequence <- public java.lang.CharSequence org.graphstream.graph.implementations.MultiNode_Stub.getLabel(java.lang.String) 
  java.lang.CharSequence <- public abstract java.lang.CharSequence org.graphstream.graph.Element.getLabel(java.lang.String) 
  java.lang.CharSequence <- public java.lang.CharSequence javax.swing.text.Segment.subSequence(int,int) 
 Generators for java.util.ArrayList<?>: 2
  java.util.ArrayList<?> <- public java.util.ArrayList org.graphstream.graph.implementations.MultiNode_Stub.getVector(java.lang.String) 
  java.util.ArrayList<?> <- public abstract java.util.ArrayList<? extends java.lang.Number> org.graphstream.graph.Element.getVector(java.lang.String) 
 Generators for java.lang.Object: 1
  java.lang.Object <- public java.lang.Object() 
 Generators for java.util.Set<?>: 5
  java.util.Set<?> <- public java.util.Set<java.util.Map.java.util.Map$Entry<K, V>> java.util.HashMap.entrySet() 
  java.util.Set<?> <- public java.util.Set<K> java.util.HashMap.keySet() 
  java.util.Set<?> <- public java.util.Set<java.lang.Character> java.util.Locale.getExtensionKeys() 
  java.util.Set<?> <- public java.util.Set<java.lang.String> java.util.Locale.getUnicodeLocaleAttributes() 
  java.util.Set<?> <- public java.util.Set<java.lang.String> java.util.Locale.getUnicodeLocaleKeys() 
 Generators for java.util.LinkedList<?>: 2
  java.util.LinkedList<?> <- public java.util.LinkedList() 
  java.util.LinkedList<?> <- public java.util.LinkedList(java.util.Collection<? extends E>) 
 Generators for java.util.Iterator<?>: 5
  java.util.Iterator<?> <- public java.util.Iterator<E> java.util.LinkedList.descendingIterator() 
  java.util.Iterator<?> <- public abstract java.util.Iterator<E> java.util.Deque.iterator() 
  java.util.Iterator<?> <- public abstract java.util.Iterator<java.lang.String> org.graphstream.graph.Element.getAttributeKeyIterator() 
  java.util.Iterator<?> <- public java.util.Iterator<org.graphstream.graph.Edge> org.graphstream.graph.implementations.AbstractNode.iterator() 
  java.util.Iterator<?> <- public java.util.Iterator<org.graphstream.graph.Node> org.graphstream.graph.implementations.AbstractGraph.iterator() 
 Generators for java.util.ListIterator<?>: 2
  java.util.ListIterator<?> <- public abstract java.util.ListIterator<E> java.util.List.listIterator() 
  java.util.ListIterator<?> <- public java.util.ListIterator<E> java.util.LinkedList.listIterator(int) 
 Generators for java.util.List<?>: 2
  java.util.List<?> <- public abstract java.util.List<E> java.util.List.subList(int,int) 
  java.util.List<?> <- public java.util.List<java.net.InterfaceAddress> java.net.NetworkInterface.getInterfaceAddresses() 
 Generators for org.graphstream.graph.implementations.AdjacencyListNode: 1
  org.graphstream.graph.implementations.AdjacencyListNode <- protected org.graphstream.graph.implementations.AdjacencyListNode(org.graphstream.graph.implementations.AbstractGraph,java.lang.String) 
 Generators for org.graphstream.graph.implementations.SingleNode: 1
  org.graphstream.graph.implementations.SingleNode <- protected org.graphstream.graph.implementations.SingleNode(org.graphstream.graph.implementations.AbstractGraph,java.lang.String) 
 Generators for org.graphstream.graph.implementations.MultiNode: 1
  org.graphstream.graph.implementations.MultiNode <- public org.graphstream.graph.implementations.MultiNode(org.graphstream.graph.implementations.AbstractGraph,java.lang.String) 
 Generators for org.graphstream.graph.implementations.AbstractEdge: 1
  org.graphstream.graph.implementations.AbstractEdge <- protected org.graphstream.graph.implementations.AbstractEdge(java.lang.String,org.graphstream.graph.implementations.AbstractNode,org.graphstream.graph.implementations.AbstractNode,boolean) 
 Generators for org.graphstream.graph.implementations.AdjacencyListGraph: 3
  org.graphstream.graph.implementations.AdjacencyListGraph <- public org.graphstream.graph.implementations.AdjacencyListGraph(java.lang.String) 
  org.graphstream.graph.implementations.AdjacencyListGraph <- public org.graphstream.graph.implementations.AdjacencyListGraph(java.lang.String,boolean,boolean) 
  org.graphstream.graph.implementations.AdjacencyListGraph <- public org.graphstream.graph.implementations.AdjacencyListGraph(java.lang.String,boolean,boolean,int,int) 
 Generators for org.graphstream.ui.swingViewer.Viewer: 2
  org.graphstream.ui.swingViewer.Viewer <- public org.graphstream.ui.swingViewer.Viewer org.graphstream.graph.implementations.AbstractGraph.display() 
  org.graphstream.ui.swingViewer.Viewer <- public org.graphstream.ui.swingViewer.Viewer org.graphstream.graph.implementations.AbstractGraph.display(boolean) 
 Generators for org.graphstream.graph.EdgeFactory<?>: 1
  org.graphstream.graph.EdgeFactory<?> <- public org.graphstream.graph.EdgeFactory<? extends org.graphstream.graph.Edge> org.graphstream.graph.implementations.AbstractGraph.edgeFactory() 
 Generators for org.graphstream.stream.Replayable$Controller: 1
  org.graphstream.stream.Replayable$Controller <- public org.graphstream.stream.Replayable$Controller org.graphstream.graph.implementations.AbstractGraph.getReplayController() 
 Generators for org.graphstream.graph.NodeFactory<?>: 1
  org.graphstream.graph.NodeFactory<?> <- public org.graphstream.graph.NodeFactory<? extends org.graphstream.graph.Node> org.graphstream.graph.implementations.AbstractGraph.nodeFactory() 
 Generators for org.graphstream.graph.implementations.SingleGraph: 3
  org.graphstream.graph.implementations.SingleGraph <- public org.graphstream.graph.implementations.SingleGraph(java.lang.String) 
  org.graphstream.graph.implementations.SingleGraph <- public org.graphstream.graph.implementations.SingleGraph(java.lang.String,boolean,boolean) 
  org.graphstream.graph.implementations.SingleGraph <- public org.graphstream.graph.implementations.SingleGraph(java.lang.String,boolean,boolean,int,int) 
 Generators for org.graphstream.graph.implementations.MultiGraph: 3
  org.graphstream.graph.implementations.MultiGraph <- public org.graphstream.graph.implementations.MultiGraph(java.lang.String) 
  org.graphstream.graph.implementations.MultiGraph <- public org.graphstream.graph.implementations.MultiGraph(java.lang.String,boolean,boolean) 
  org.graphstream.graph.implementations.MultiGraph <- public org.graphstream.graph.implementations.MultiGraph(java.lang.String,boolean,boolean,int,int) 
 Generators for org.graphstream.graph.implementations.DefaultGraph: 3
  org.graphstream.graph.implementations.DefaultGraph <- public org.graphstream.graph.implementations.DefaultGraph(java.lang.String) 
  org.graphstream.graph.implementations.DefaultGraph <- public org.graphstream.graph.implementations.DefaultGraph(java.lang.String,boolean,boolean) 
  org.graphstream.graph.implementations.DefaultGraph <- public org.graphstream.graph.implementations.DefaultGraph(java.lang.String,boolean,boolean,int,int) 
 Generators for org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent: 1
  org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent <- public static org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent.valueOf(java.lang.String) 
 Generators for org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent[]: 1
  org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent[] <- public static org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent[] org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent.values() 
 Generators for org.graphstream.stream.SinkAdapter: 1
  org.graphstream.stream.SinkAdapter <- public org.graphstream.stream.SinkAdapter() 
 Generators for org.graphstream.stream.Timeline: 1
  org.graphstream.stream.Timeline <- public org.graphstream.stream.Timeline() 
 Generators for org.graphstream.stream.PipeBase: 1
  org.graphstream.stream.PipeBase <- public org.graphstream.stream.PipeBase() 
 Generators for org.graphstream.stream.PipeAdapter: 1
  org.graphstream.stream.PipeAdapter <- public org.graphstream.stream.PipeAdapter() 
 Generators for org.graphstream.stream.AttributePipe: 1
  org.graphstream.stream.AttributePipe <- public org.graphstream.stream.AttributePipe() 
 Generators for org.graphstream.stream.AttributePredicate: 4
  org.graphstream.stream.AttributePredicate <- public org.graphstream.stream.AttributePredicate org.graphstream.stream.AttributePipe.getEdgeAttributeFilter() 
  org.graphstream.stream.AttributePredicate <- public org.graphstream.stream.AttributePredicate org.graphstream.stream.AttributePipe.getGlobalAttributeFilter() 
  org.graphstream.stream.AttributePredicate <- public org.graphstream.stream.AttributePredicate org.graphstream.stream.AttributePipe.getGraphAttributeFilter() 
  org.graphstream.stream.AttributePredicate <- public org.graphstream.stream.AttributePredicate org.graphstream.stream.AttributePipe.getNodeAttributeFilter() 
 Generators for org.graphstream.stream.file.FileSourceGraphML: 1
  org.graphstream.stream.file.FileSourceGraphML <- public org.graphstream.stream.file.FileSourceGraphML() 
 Generators for org.graphstream.stream.file.FileSourceGPX: 1
  org.graphstream.stream.file.FileSourceGPX <- public org.graphstream.stream.file.FileSourceGPX() 
 Generators for org.graphstream.stream.file.FileSourceGEXF: 1
  org.graphstream.stream.file.FileSourceGEXF <- public org.graphstream.stream.file.FileSourceGEXF() 
 Generators for org.graphstream.stream.file.FileSourceTLP: 1
  org.graphstream.stream.file.FileSourceTLP <- public org.graphstream.stream.file.FileSourceTLP() 
 Generators for org.graphstream.util.parser.ParserFactory: 5
  org.graphstream.util.parser.ParserFactory <- public org.graphstream.util.parser.ParserFactory org.graphstream.stream.file.FileSourceTLP.getNewParserFactory() 
  org.graphstream.util.parser.ParserFactory <- public org.graphstream.util.parser.ParserFactory org.graphstream.stream.file.FileSourceDOT.getNewParserFactory() 
  org.graphstream.util.parser.ParserFactory <- public org.graphstream.util.parser.ParserFactory org.graphstream.stream.file.FileSourcePajek.getNewParserFactory() 
  org.graphstream.util.parser.ParserFactory <- public org.graphstream.util.parser.ParserFactory org.graphstream.stream.file.FileSourceDGS.getNewParserFactory() 
  org.graphstream.util.parser.ParserFactory <- public org.graphstream.util.parser.ParserFactory org.graphstream.stream.file.FileSourceGML.getNewParserFactory() 
 Generators for org.graphstream.stream.file.FileSourceDOT: 1
  org.graphstream.stream.file.FileSourceDOT <- public org.graphstream.stream.file.FileSourceDOT() 
 Generators for org.graphstream.stream.file.FileSourcePajek: 1
  org.graphstream.stream.file.FileSourcePajek <- public org.graphstream.stream.file.FileSourcePajek() 
 Generators for org.graphstream.stream.file.FileSourceDGS: 1
  org.graphstream.stream.file.FileSourceDGS <- public org.graphstream.stream.file.FileSourceDGS() 
 Generators for org.graphstream.stream.file.FileSourceGML: 1
  org.graphstream.stream.file.FileSourceGML <- public org.graphstream.stream.file.FileSourceGML() 
 Generators for org.graphstream.stream.file.FileSourceLGL: 2
  org.graphstream.stream.file.FileSourceLGL <- public org.graphstream.stream.file.FileSourceLGL() 
  org.graphstream.stream.file.FileSourceLGL <- public org.graphstream.stream.file.FileSourceLGL(boolean) 
 Generators for org.graphstream.stream.file.FileSourceNCol: 2
  org.graphstream.stream.file.FileSourceNCol <- public org.graphstream.stream.file.FileSourceNCol() 
  org.graphstream.stream.file.FileSourceNCol <- public org.graphstream.stream.file.FileSourceNCol(boolean) 
 Generators for org.graphstream.stream.file.FileSourceEdge: 3
  org.graphstream.stream.file.FileSourceEdge <- public org.graphstream.stream.file.FileSourceEdge() 
  org.graphstream.stream.file.FileSourceEdge <- public org.graphstream.stream.file.FileSourceEdge(boolean) 
  org.graphstream.stream.file.FileSourceEdge <- public org.graphstream.stream.file.FileSourceEdge(boolean,boolean) 
 Generators for org.graphstream.stream.file.FileSourceDGS1And2: 1
  org.graphstream.stream.file.FileSourceDGS1And2 <- public org.graphstream.stream.file.FileSourceDGS1And2() 
 Generators for org.graphstream.stream.file.FileSinkImages: 3
  org.graphstream.stream.file.FileSinkImages <- public org.graphstream.stream.file.FileSinkImages() 
  org.graphstream.stream.file.FileSinkImages <- public org.graphstream.stream.file.FileSinkImages(java.lang.String,org.graphstream.stream.file.FileSinkImages$OutputType,org.graphstream.stream.file.FileSinkImages$Resolution,org.graphstream.stream.file.FileSinkImages$OutputPolicy) 
  org.graphstream.stream.file.FileSinkImages <- public org.graphstream.stream.file.FileSinkImages(org.graphstream.stream.file.FileSinkImages$OutputType,org.graphstream.stream.file.FileSinkImages$Resolution) 
 Generators for org.graphstream.ui.geom.Point3: 1
  org.graphstream.ui.geom.Point3 <- public org.graphstream.ui.geom.Point3 org.graphstream.stream.file.FileSinkImages.getViewCenter() 
 Generators for org.graphstream.stream.file.FileSinkSVG2: 1
  org.graphstream.stream.file.FileSinkSVG2 <- public org.graphstream.stream.file.FileSinkSVG2() 
 Generators for org.graphstream.stream.file.FileSinkSVG: 1
  org.graphstream.stream.file.FileSinkSVG <- public org.graphstream.stream.file.FileSinkSVG() 
 Generators for org.graphstream.stream.file.FileSinkGEXF: 1
  org.graphstream.stream.file.FileSinkGEXF <- public org.graphstream.stream.file.FileSinkGEXF() 
 Generators for org.graphstream.stream.file.FileSinkDGS: 1
  org.graphstream.stream.file.FileSinkDGS <- public org.graphstream.stream.file.FileSinkDGS() 
 Generators for org.graphstream.stream.file.FileSinkGML: 1
  org.graphstream.stream.file.FileSinkGML <- public org.graphstream.stream.file.FileSinkGML() 
 Generators for org.graphstream.stream.file.FileSinkDOT: 2
  org.graphstream.stream.file.FileSinkDOT <- public org.graphstream.stream.file.FileSinkDOT() 
  org.graphstream.stream.file.FileSinkDOT <- public org.graphstream.stream.file.FileSinkDOT(boolean) 
 Generators for org.graphstream.stream.file.FileSinkGraphML: 1
  org.graphstream.stream.file.FileSinkGraphML <- public org.graphstream.stream.file.FileSinkGraphML() 
 Generators for org.graphstream.stream.file.FileSinkTikZ: 1
  org.graphstream.stream.file.FileSinkTikZ <- public org.graphstream.stream.file.FileSinkTikZ() 
 Generators for org.graphstream.stream.file.FileSinkDynamicGML: 1
  org.graphstream.stream.file.FileSinkDynamicGML <- public org.graphstream.stream.file.FileSinkDynamicGML() 
 Generators for org.graphstream.stream.SourceBase$ElementType: 1
  org.graphstream.stream.SourceBase$ElementType <- public static org.graphstream.stream.SourceBase$ElementType org.graphstream.stream.SourceBase$ElementType.valueOf(java.lang.String) 
 Generators for org.graphstream.stream.SourceBase$ElementType[]: 1
  org.graphstream.stream.SourceBase$ElementType[] <- public static org.graphstream.stream.SourceBase$ElementType[] org.graphstream.stream.SourceBase$ElementType.values() 
 Generators for java.io.PipedInputStream: 4
  java.io.PipedInputStream <- public java.io.PipedInputStream() 
  java.io.PipedInputStream <- public java.io.PipedInputStream(int) 
  java.io.PipedInputStream <- public java.io.PipedInputStream(java.io.PipedOutputStream) throws java.io.IOException 
  java.io.PipedInputStream <- public java.io.PipedInputStream(java.io.PipedOutputStream,int) throws java.io.IOException 
 Generators for java.io.SequenceInputStream: 2
  java.io.SequenceInputStream <- public java.io.SequenceInputStream(java.io.InputStream,java.io.InputStream) 
  java.io.SequenceInputStream <- public java.io.SequenceInputStream(java.util.Enumeration<? extends java.io.InputStream>) 
 Generators for java.io.ObjectInputStream: 1
  java.io.ObjectInputStream <- public java.io.ObjectInputStream(java.io.InputStream) throws java.io.IOException 
 Generators for java.io.ObjectInputStream$GetField: 1
  java.io.ObjectInputStream$GetField <- public java.io.ObjectInputStream$GetField java.io.ObjectInputStream.readFields() throws java.io.IOException,java.lang.ClassNotFoundException 
 Generators for java.io.ByteArrayInputStream: 2
  java.io.ByteArrayInputStream <- public java.io.ByteArrayInputStream(byte[]) 
  java.io.ByteArrayInputStream <- public java.io.ByteArrayInputStream(byte[],int,int) 
 Generators for java.io.FileInputStream: 3
  java.io.FileInputStream <- public java.io.FileInputStream(java.io.File) throws java.io.FileNotFoundException 
  java.io.FileInputStream <- public java.io.FileInputStream(java.io.FileDescriptor) 
  java.io.FileInputStream <- public java.io.FileInputStream(java.lang.String) throws java.io.FileNotFoundException 
 Generators for java.nio.channels.FileChannel: 3
  java.nio.channels.FileChannel <- public java.nio.channels.FileChannel java.io.FileInputStream.getChannel() 
  java.nio.channels.FileChannel <- public java.nio.channels.FileChannel java.io.FileOutputStream.getChannel() 
  java.nio.channels.FileChannel <- public final java.nio.channels.FileChannel java.io.RandomAccessFile.getChannel() 
 Generators for java.io.FileDescriptor: 4
  java.io.FileDescriptor <- public final java.io.FileDescriptor java.io.FileInputStream.getFD() throws java.io.IOException 
  java.io.FileDescriptor <- public final java.io.FileDescriptor java.io.FileOutputStream.getFD() throws java.io.IOException 
  java.io.FileDescriptor <- public java.io.FileDescriptor() 
  java.io.FileDescriptor <- public final java.io.FileDescriptor java.io.RandomAccessFile.getFD() throws java.io.IOException 
 Generators for java.io.PushbackInputStream: 2
  java.io.PushbackInputStream <- public java.io.PushbackInputStream(java.io.InputStream) 
  java.io.PushbackInputStream <- public java.io.PushbackInputStream(java.io.InputStream,int) 
 Generators for java.io.DataInputStream: 1
  java.io.DataInputStream <- public java.io.DataInputStream(java.io.InputStream) 
 Generators for java.io.BufferedInputStream: 2
  java.io.BufferedInputStream <- public java.io.BufferedInputStream(java.io.InputStream) 
  java.io.BufferedInputStream <- public java.io.BufferedInputStream(java.io.InputStream,int) 
 Generators for java.io.CharArrayReader: 2
  java.io.CharArrayReader <- public java.io.CharArrayReader(char[]) 
  java.io.CharArrayReader <- public java.io.CharArrayReader(char[],int,int) 
 Generators for java.io.PipedReader: 4
  java.io.PipedReader <- public java.io.PipedReader() 
  java.io.PipedReader <- public java.io.PipedReader(int) 
  java.io.PipedReader <- public java.io.PipedReader(java.io.PipedWriter) throws java.io.IOException 
  java.io.PipedReader <- public java.io.PipedReader(java.io.PipedWriter,int) throws java.io.IOException 
 Generators for java.io.StringReader: 1
  java.io.StringReader <- public java.io.StringReader(java.lang.String) 
 Generators for java.io.InputStreamReader: 4
  java.io.InputStreamReader <- public java.io.InputStreamReader(java.io.InputStream) 
  java.io.InputStreamReader <- public java.io.InputStreamReader(java.io.InputStream,java.lang.String) throws java.io.UnsupportedEncodingException 
  java.io.InputStreamReader <- public java.io.InputStreamReader(java.io.InputStream,java.nio.charset.Charset) 
  java.io.InputStreamReader <- public java.io.InputStreamReader(java.io.InputStream,java.nio.charset.CharsetDecoder) 
 Generators for java.io.BufferedReader: 2
  java.io.BufferedReader <- public java.io.BufferedReader(java.io.Reader) 
  java.io.BufferedReader <- public java.io.BufferedReader(java.io.Reader,int) 
 Generators for java.io.PushbackReader: 2
  java.io.PushbackReader <- public java.io.PushbackReader(java.io.Reader) 
  java.io.PushbackReader <- public java.io.PushbackReader(java.io.Reader,int) 
 Generators for java.io.FileReader: 3
  java.io.FileReader <- public java.io.FileReader(java.io.File) throws java.io.FileNotFoundException 
  java.io.FileReader <- public java.io.FileReader(java.io.FileDescriptor) 
  java.io.FileReader <- public java.io.FileReader(java.lang.String) throws java.io.FileNotFoundException 
 Generators for java.io.LineNumberReader: 2
  java.io.LineNumberReader <- public java.io.LineNumberReader(java.io.Reader) 
  java.io.LineNumberReader <- public java.io.LineNumberReader(java.io.Reader,int) 
 Generators for java.net.URL: 7
  java.net.URL <- public java.net.URL(java.lang.String) throws java.net.MalformedURLException 
  java.net.URL <- public java.net.URL(java.lang.String,java.lang.String,int,java.lang.String) throws java.net.MalformedURLException 
  java.net.URL <- public java.net.URL(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler) throws java.net.MalformedURLException 
  java.net.URL <- public java.net.URL(java.lang.String,java.lang.String,java.lang.String) throws java.net.MalformedURLException 
  java.net.URL <- public java.net.URL(java.net.URL,java.lang.String) throws java.net.MalformedURLException 
  java.net.URL <- public java.net.URL(java.net.URL,java.lang.String,java.net.URLStreamHandler) throws java.net.MalformedURLException 
  java.net.URL <- public java.net.URL java.net.URI.toURL() throws java.net.MalformedURLException 
 Generators for java.net.URLConnection: 2
  java.net.URLConnection <- public java.net.URLConnection java.net.URL.openConnection() throws java.io.IOException 
  java.net.URLConnection <- public java.net.URLConnection java.net.URL.openConnection(java.net.Proxy) throws java.io.IOException 
 Generators for java.io.InputStream: 1
  java.io.InputStream <- public final java.io.InputStream java.net.URL.openStream() throws java.io.IOException 
 Generators for java.net.URI: 13
  java.net.URI <- public java.net.URI java.net.URL.toURI() throws java.net.URISyntaxException 
  java.net.URI <- public java.net.URI java.io.File.toURI() 
  java.net.URI <- public java.net.URI(java.lang.String) throws java.net.URISyntaxException 
  java.net.URI <- public java.net.URI(java.lang.String,java.lang.String,java.lang.String) throws java.net.URISyntaxException 
  java.net.URI <- public java.net.URI(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String) throws java.net.URISyntaxException 
  java.net.URI <- public java.net.URI(java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.net.URISyntaxException 
  java.net.URI <- public java.net.URI(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.net.URISyntaxException 
  java.net.URI <- public static java.net.URI java.net.URI.create(java.lang.String) 
  java.net.URI <- public java.net.URI java.net.URI.normalize() 
  java.net.URI <- public java.net.URI java.net.URI.parseServerAuthority() throws java.net.URISyntaxException 
  java.net.URI <- public java.net.URI java.net.URI.relativize(java.net.URI) 
  java.net.URI <- public java.net.URI java.net.URI.resolve(java.lang.String) 
  java.net.URI <- public java.net.URI java.net.URI.resolve(java.net.URI) 
 Generators for org.graphstream.stream.file.FileSinkImages$OutputType: 1
  org.graphstream.stream.file.FileSinkImages$OutputType <- public static org.graphstream.stream.file.FileSinkImages$OutputType org.graphstream.stream.file.FileSinkImages$OutputType.valueOf(java.lang.String) 
 Generators for org.graphstream.stream.file.FileSinkImages$OutputType[]: 1
  org.graphstream.stream.file.FileSinkImages$OutputType[] <- public static org.graphstream.stream.file.FileSinkImages$OutputType[] org.graphstream.stream.file.FileSinkImages$OutputType.values() 
 Generators for org.graphstream.stream.file.FileSinkImages$Resolutions: 1
  org.graphstream.stream.file.FileSinkImages$Resolutions <- public static org.graphstream.stream.file.FileSinkImages$Resolutions org.graphstream.stream.file.FileSinkImages$Resolutions.valueOf(java.lang.String) 
 Generators for org.graphstream.stream.file.FileSinkImages$Resolutions[]: 1
  org.graphstream.stream.file.FileSinkImages$Resolutions[] <- public static org.graphstream.stream.file.FileSinkImages$Resolutions[] org.graphstream.stream.file.FileSinkImages$Resolutions.values() 
 Generators for org.graphstream.stream.file.FileSinkImages$CustomResolution: 1
  org.graphstream.stream.file.FileSinkImages$CustomResolution <- public org.graphstream.stream.file.FileSinkImages$CustomResolution(int,int) 
 Generators for org.graphstream.stream.file.FileSinkImages$OutputPolicy: 1
  org.graphstream.stream.file.FileSinkImages$OutputPolicy <- public static org.graphstream.stream.file.FileSinkImages$OutputPolicy org.graphstream.stream.file.FileSinkImages$OutputPolicy.valueOf(java.lang.String) 
 Generators for org.graphstream.stream.file.FileSinkImages$OutputPolicy[]: 1
  org.graphstream.stream.file.FileSinkImages$OutputPolicy[] <- public static org.graphstream.stream.file.FileSinkImages$OutputPolicy[] org.graphstream.stream.file.FileSinkImages$OutputPolicy.values() 
 Generators for java.io.PipedOutputStream: 2
  java.io.PipedOutputStream <- public java.io.PipedOutputStream() 
  java.io.PipedOutputStream <- public java.io.PipedOutputStream(java.io.PipedInputStream) throws java.io.IOException 
 Generators for java.io.ObjectOutputStream: 1
  java.io.ObjectOutputStream <- public java.io.ObjectOutputStream(java.io.OutputStream) throws java.io.IOException 
 Generators for java.io.ObjectOutputStream$PutField: 1
  java.io.ObjectOutputStream$PutField <- public java.io.ObjectOutputStream$PutField java.io.ObjectOutputStream.putFields() throws java.io.IOException 
 Generators for java.io.ByteArrayOutputStream: 2
  java.io.ByteArrayOutputStream <- public java.io.ByteArrayOutputStream() 
  java.io.ByteArrayOutputStream <- public java.io.ByteArrayOutputStream(int) 
 Generators for byte[]: 3
  byte[] <- public synchronized byte[] java.io.ByteArrayOutputStream.toByteArray() 
  byte[] <- public byte[] java.net.InetAddress.getAddress() 
  byte[] <- public byte[] java.net.NetworkInterface.getHardwareAddress() throws java.net.SocketException 
 Generators for java.io.FilterOutputStream: 1
  java.io.FilterOutputStream <- public java.io.FilterOutputStream(java.io.OutputStream) 
 Generators for java.io.FileOutputStream: 5
  java.io.FileOutputStream <- public java.io.FileOutputStream(java.io.File) throws java.io.FileNotFoundException 
  java.io.FileOutputStream <- public java.io.FileOutputStream(java.io.File,boolean) throws java.io.FileNotFoundException 
  java.io.FileOutputStream <- public java.io.FileOutputStream(java.io.FileDescriptor) 
  java.io.FileOutputStream <- public java.io.FileOutputStream(java.lang.String) throws java.io.FileNotFoundException 
  java.io.FileOutputStream <- public java.io.FileOutputStream(java.lang.String,boolean) throws java.io.FileNotFoundException 
 Generators for java.io.DataOutputStream: 1
  java.io.DataOutputStream <- public java.io.DataOutputStream(java.io.OutputStream) 
 Generators for java.io.BufferedOutputStream: 2
  java.io.BufferedOutputStream <- public java.io.BufferedOutputStream(java.io.OutputStream) 
  java.io.BufferedOutputStream <- public java.io.BufferedOutputStream(java.io.OutputStream,int) 
 Generators for java.io.PrintStream: 14
  java.io.PrintStream <- public java.io.PrintStream(java.io.File) throws java.io.FileNotFoundException 
  java.io.PrintStream <- public java.io.PrintStream(java.io.File,java.lang.String) throws java.io.FileNotFoundException,java.io.UnsupportedEncodingException 
  java.io.PrintStream <- public java.io.PrintStream(java.io.OutputStream) 
  java.io.PrintStream <- public java.io.PrintStream(java.io.OutputStream,boolean) 
  java.io.PrintStream <- public java.io.PrintStream(java.io.OutputStream,boolean,java.lang.String) throws java.io.UnsupportedEncodingException 
  java.io.PrintStream <- public java.io.PrintStream(java.lang.String) throws java.io.FileNotFoundException 
  java.io.PrintStream <- public java.io.PrintStream(java.lang.String,java.lang.String) throws java.io.FileNotFoundException,java.io.UnsupportedEncodingException 
  java.io.PrintStream <- public java.io.PrintStream java.io.PrintStream.append(char) 
  java.io.PrintStream <- public java.io.PrintStream java.io.PrintStream.append(java.lang.CharSequence) 
  java.io.PrintStream <- public java.io.PrintStream java.io.PrintStream.append(java.lang.CharSequence,int,int) 
  java.io.PrintStream <- public java.io.PrintStream java.io.PrintStream.format(java.lang.String,java.lang.Object...) 
  java.io.PrintStream <- public java.io.PrintStream java.io.PrintStream.format(java.util.Locale,java.lang.String,java.lang.Object...) 
  java.io.PrintStream <- public java.io.PrintStream java.io.PrintStream.printf(java.lang.String,java.lang.Object...) 
  java.io.PrintStream <- public java.io.PrintStream java.io.PrintStream.printf(java.util.Locale,java.lang.String,java.lang.Object...) 
 Generators for java.io.PipedWriter: 2
  java.io.PipedWriter <- public java.io.PipedWriter() 
  java.io.PipedWriter <- public java.io.PipedWriter(java.io.PipedReader) throws java.io.IOException 
 Generators for java.io.Writer: 3
  java.io.Writer <- public java.io.Writer java.io.Writer.append(char) throws java.io.IOException 
  java.io.Writer <- public java.io.Writer java.io.Writer.append(java.lang.CharSequence) throws java.io.IOException 
  java.io.Writer <- public java.io.Writer java.io.Writer.append(java.lang.CharSequence,int,int) throws java.io.IOException 
 Generators for java.io.StringWriter: 5
  java.io.StringWriter <- public java.io.StringWriter() 
  java.io.StringWriter <- public java.io.StringWriter(int) 
  java.io.StringWriter <- public java.io.StringWriter java.io.StringWriter.append(char) 
  java.io.StringWriter <- public java.io.StringWriter java.io.StringWriter.append(java.lang.CharSequence) 
  java.io.StringWriter <- public java.io.StringWriter java.io.StringWriter.append(java.lang.CharSequence,int,int) 
 Generators for java.lang.StringBuffer: 1
  java.lang.StringBuffer <- public java.lang.StringBuffer java.io.StringWriter.getBuffer() 
 Generators for java.io.CharArrayWriter: 5
  java.io.CharArrayWriter <- public java.io.CharArrayWriter() 
  java.io.CharArrayWriter <- public java.io.CharArrayWriter(int) 
  java.io.CharArrayWriter <- public java.io.CharArrayWriter java.io.CharArrayWriter.append(char) 
  java.io.CharArrayWriter <- public java.io.CharArrayWriter java.io.CharArrayWriter.append(java.lang.CharSequence) 
  java.io.CharArrayWriter <- public java.io.CharArrayWriter java.io.CharArrayWriter.append(java.lang.CharSequence,int,int) 
 Generators for char[]: 1
  char[] <- public char[] java.io.CharArrayWriter.toCharArray() 
 Generators for java.io.PrintWriter: 15
  java.io.PrintWriter <- public java.io.PrintWriter(java.io.File) throws java.io.FileNotFoundException 
  java.io.PrintWriter <- public java.io.PrintWriter(java.io.File,java.lang.String) throws java.io.FileNotFoundException,java.io.UnsupportedEncodingException 
  java.io.PrintWriter <- public java.io.PrintWriter(java.io.OutputStream) 
  java.io.PrintWriter <- public java.io.PrintWriter(java.io.OutputStream,boolean) 
  java.io.PrintWriter <- public java.io.PrintWriter(java.io.Writer) 
  java.io.PrintWriter <- public java.io.PrintWriter(java.io.Writer,boolean) 
  java.io.PrintWriter <- public java.io.PrintWriter(java.lang.String) throws java.io.FileNotFoundException 
  java.io.PrintWriter <- public java.io.PrintWriter(java.lang.String,java.lang.String) throws java.io.FileNotFoundException,java.io.UnsupportedEncodingException 
  java.io.PrintWriter <- public java.io.PrintWriter java.io.PrintWriter.append(char) 
  java.io.PrintWriter <- public java.io.PrintWriter java.io.PrintWriter.append(java.lang.CharSequence) 
  java.io.PrintWriter <- public java.io.PrintWriter java.io.PrintWriter.append(java.lang.CharSequence,int,int) 
  java.io.PrintWriter <- public java.io.PrintWriter java.io.PrintWriter.format(java.lang.String,java.lang.Object...) 
  java.io.PrintWriter <- public java.io.PrintWriter java.io.PrintWriter.format(java.util.Locale,java.lang.String,java.lang.Object...) 
  java.io.PrintWriter <- public java.io.PrintWriter java.io.PrintWriter.printf(java.lang.String,java.lang.Object...) 
  java.io.PrintWriter <- public java.io.PrintWriter java.io.PrintWriter.printf(java.util.Locale,java.lang.String,java.lang.Object...) 
 Generators for java.io.BufferedWriter: 2
  java.io.BufferedWriter <- public java.io.BufferedWriter(java.io.Writer) 
  java.io.BufferedWriter <- public java.io.BufferedWriter(java.io.Writer,int) 
 Generators for java.io.OutputStreamWriter: 4
  java.io.OutputStreamWriter <- public java.io.OutputStreamWriter(java.io.OutputStream) 
  java.io.OutputStreamWriter <- public java.io.OutputStreamWriter(java.io.OutputStream,java.lang.String) throws java.io.UnsupportedEncodingException 
  java.io.OutputStreamWriter <- public java.io.OutputStreamWriter(java.io.OutputStream,java.nio.charset.Charset) 
  java.io.OutputStreamWriter <- public java.io.OutputStreamWriter(java.io.OutputStream,java.nio.charset.CharsetEncoder) 
 Generators for java.io.FileWriter: 5
  java.io.FileWriter <- public java.io.FileWriter(java.io.File) throws java.io.IOException 
  java.io.FileWriter <- public java.io.FileWriter(java.io.File,boolean) throws java.io.IOException 
  java.io.FileWriter <- public java.io.FileWriter(java.io.FileDescriptor) 
  java.io.FileWriter <- public java.io.FileWriter(java.lang.String) throws java.io.IOException 
  java.io.FileWriter <- public java.io.FileWriter(java.lang.String,boolean) throws java.io.IOException 
 Generators for org.graphstream.stream.file.FileSinkImages$LayoutPolicy: 1
  org.graphstream.stream.file.FileSinkImages$LayoutPolicy <- public static org.graphstream.stream.file.FileSinkImages$LayoutPolicy org.graphstream.stream.file.FileSinkImages$LayoutPolicy.valueOf(java.lang.String) 
 Generators for org.graphstream.stream.file.FileSinkImages$LayoutPolicy[]: 1
  org.graphstream.stream.file.FileSinkImages$LayoutPolicy[] <- public static org.graphstream.stream.file.FileSinkImages$LayoutPolicy[] org.graphstream.stream.file.FileSinkImages$LayoutPolicy.values() 
 Generators for org.graphstream.stream.file.FileSinkImages$Quality: 1
  org.graphstream.stream.file.FileSinkImages$Quality <- public static org.graphstream.stream.file.FileSinkImages$Quality org.graphstream.stream.file.FileSinkImages$Quality.valueOf(java.lang.String) 
 Generators for org.graphstream.stream.file.FileSinkImages$Quality[]: 1
  org.graphstream.stream.file.FileSinkImages$Quality[] <- public static org.graphstream.stream.file.FileSinkImages$Quality[] org.graphstream.stream.file.FileSinkImages$Quality.values() 
 Generators for org.graphstream.stream.file.FileSinkImages$RendererType: 1
  org.graphstream.stream.file.FileSinkImages$RendererType <- public static org.graphstream.stream.file.FileSinkImages$RendererType org.graphstream.stream.file.FileSinkImages$RendererType.valueOf(java.lang.String) 
 Generators for org.graphstream.stream.file.FileSinkImages$RendererType[]: 1
  org.graphstream.stream.file.FileSinkImages$RendererType[] <- public static org.graphstream.stream.file.FileSinkImages$RendererType[] org.graphstream.stream.file.FileSinkImages$RendererType.values() 
 Generators for java.util.StringTokenizer: 3
  java.util.StringTokenizer <- public java.util.StringTokenizer(java.lang.String) 
  java.util.StringTokenizer <- public java.util.StringTokenizer(java.lang.String,java.lang.String) 
  java.util.StringTokenizer <- public java.util.StringTokenizer(java.lang.String,java.lang.String,boolean) 
 Generators for java.io.File: 9
  java.io.File <- public java.io.File(java.io.File,java.lang.String) 
  java.io.File <- public java.io.File(java.lang.String) 
  java.io.File <- public java.io.File(java.lang.String,java.lang.String) 
  java.io.File <- public java.io.File(java.net.URI) 
  java.io.File <- public static java.io.File java.io.File.createTempFile(java.lang.String,java.lang.String) throws java.io.IOException 
  java.io.File <- public static java.io.File java.io.File.createTempFile(java.lang.String,java.lang.String,java.io.File) throws java.io.IOException 
  java.io.File <- public java.io.File java.io.File.getAbsoluteFile() 
  java.io.File <- public java.io.File java.io.File.getCanonicalFile() throws java.io.IOException 
  java.io.File <- public java.io.File java.io.File.getParentFile() 
 Generators for java.lang.String[]: 4
  java.lang.String[] <- public java.lang.String[] java.io.File.list() 
  java.lang.String[] <- public java.lang.String[] java.io.File.list(java.io.FilenameFilter) 
  java.lang.String[] <- public static java.lang.String[] java.util.Locale.getISOCountries() 
  java.lang.String[] <- public static java.lang.String[] java.util.Locale.getISOLanguages() 
 Generators for java.io.File[]: 4
  java.io.File[] <- public java.io.File[] java.io.File.listFiles() 
  java.io.File[] <- public java.io.File[] java.io.File.listFiles(java.io.FileFilter) 
  java.io.File[] <- public java.io.File[] java.io.File.listFiles(java.io.FilenameFilter) 
  java.io.File[] <- public static java.io.File[] java.io.File.listRoots() 
 Generators for java.nio.file.Path: 1
  java.nio.file.Path <- public java.nio.file.Path java.io.File.toPath() 
 Generators for java.io.RandomAccessFile: 2
  java.io.RandomAccessFile <- public java.io.RandomAccessFile(java.io.File,java.lang.String) throws java.io.FileNotFoundException 
  java.io.RandomAccessFile <- public java.io.RandomAccessFile(java.lang.String,java.lang.String) throws java.io.FileNotFoundException 
 Generators for java.net.Proxy: 1
  java.net.Proxy <- public java.net.Proxy(java.net.Proxy$Type,java.net.SocketAddress) 
 Generators for java.net.SocketAddress: 1
  java.net.SocketAddress <- public java.net.SocketAddress java.net.Proxy.address() 
 Generators for java.net.Proxy$Type: 2
  java.net.Proxy$Type <- public java.net.Proxy$Type java.net.Proxy.type() 
  java.net.Proxy$Type <- public static java.net.Proxy$Type java.net.Proxy$Type.valueOf(java.lang.String) 
 Generators for javax.swing.text.Segment: 2
  javax.swing.text.Segment <- public javax.swing.text.Segment() 
  javax.swing.text.Segment <- public javax.swing.text.Segment(char[],int,int) 
 Generators for java.util.Locale: 6
  java.util.Locale <- public java.util.Locale(java.lang.String) 
  java.util.Locale <- public java.util.Locale(java.lang.String,java.lang.String) 
  java.util.Locale <- public java.util.Locale(java.lang.String,java.lang.String,java.lang.String) 
  java.util.Locale <- public static java.util.Locale java.util.Locale.forLanguageTag(java.lang.String) 
  java.util.Locale <- public static java.util.Locale java.util.Locale.getDefault() 
  java.util.Locale <- public static java.util.Locale java.util.Locale.getDefault(java.util.Locale$Category) 
 Generators for org.apache.oro.io.AwkFilenameFilter: 3
  org.apache.oro.io.AwkFilenameFilter <- public org.apache.oro.io.AwkFilenameFilter() 
  org.apache.oro.io.AwkFilenameFilter <- public org.apache.oro.io.AwkFilenameFilter(java.lang.String) 
  org.apache.oro.io.AwkFilenameFilter <- public org.apache.oro.io.AwkFilenameFilter(java.lang.String,int) 
 Generators for org.apache.oro.io.GlobFilenameFilter: 3
  org.apache.oro.io.GlobFilenameFilter <- public org.apache.oro.io.GlobFilenameFilter() 
  org.apache.oro.io.GlobFilenameFilter <- public org.apache.oro.io.GlobFilenameFilter(java.lang.String) 
  org.apache.oro.io.GlobFilenameFilter <- public org.apache.oro.io.GlobFilenameFilter(java.lang.String,int) 
 Generators for org.apache.oro.io.Perl5FilenameFilter: 3
  org.apache.oro.io.Perl5FilenameFilter <- public org.apache.oro.io.Perl5FilenameFilter() 
  org.apache.oro.io.Perl5FilenameFilter <- public org.apache.oro.io.Perl5FilenameFilter(java.lang.String) 
  org.apache.oro.io.Perl5FilenameFilter <- public org.apache.oro.io.Perl5FilenameFilter(java.lang.String,int) 
 Generators for java.net.Proxy$Type[]: 1
  java.net.Proxy$Type[] <- public static java.net.Proxy$Type[] java.net.Proxy$Type.values() 
 Generators for java.net.InetSocketAddress: 4
  java.net.InetSocketAddress <- public java.net.InetSocketAddress(int) 
  java.net.InetSocketAddress <- public java.net.InetSocketAddress(java.lang.String,int) 
  java.net.InetSocketAddress <- public java.net.InetSocketAddress(java.net.InetAddress,int) 
  java.net.InetSocketAddress <- public static java.net.InetSocketAddress java.net.InetSocketAddress.createUnresolved(java.lang.String,int) 
 Generators for java.net.InetAddress: 6
  java.net.InetAddress <- public final java.net.InetAddress java.net.InetSocketAddress.getAddress() 
  java.net.InetAddress <- public static java.net.InetAddress java.net.InetAddress.getByAddress(java.lang.String,byte[]) throws java.net.UnknownHostException 
  java.net.InetAddress <- public static java.net.InetAddress java.net.InetAddress.getByAddress(byte[]) throws java.net.UnknownHostException 
  java.net.InetAddress <- public static java.net.InetAddress java.net.InetAddress.getByName(java.lang.String) throws java.net.UnknownHostException 
  java.net.InetAddress <- public static java.net.InetAddress java.net.InetAddress.getLocalHost() throws java.net.UnknownHostException 
  java.net.InetAddress <- public static java.net.InetAddress java.net.InetAddress.getLoopbackAddress() 
 Generators for java.util.Locale$Category: 1
  java.util.Locale$Category <- public static java.util.Locale$Category java.util.Locale$Category.valueOf(java.lang.String) 
 Generators for java.util.Locale$Category[]: 1
  java.util.Locale$Category[] <- public static java.util.Locale$Category[] java.util.Locale$Category.values() 
 Generators for java.net.InetAddress[]: 1
  java.net.InetAddress[] <- public static java.net.InetAddress[] java.net.InetAddress.getAllByName(java.lang.String) throws java.net.UnknownHostException 
 Generators for java.net.NetworkInterface: 4
  java.net.NetworkInterface <- public static java.net.NetworkInterface java.net.NetworkInterface.getByIndex(int) throws java.net.SocketException 
  java.net.NetworkInterface <- public static java.net.NetworkInterface java.net.NetworkInterface.getByInetAddress(java.net.InetAddress) throws java.net.SocketException 
  java.net.NetworkInterface <- public static java.net.NetworkInterface java.net.NetworkInterface.getByName(java.lang.String) throws java.net.SocketException 
  java.net.NetworkInterface <- public java.net.NetworkInterface java.net.NetworkInterface.getParent() 
 Generators for java.util.Enumeration<?>: 3
  java.util.Enumeration<?> <- public java.util.Enumeration<java.net.InetAddress> java.net.NetworkInterface.getInetAddresses() 
  java.util.Enumeration<?> <- public static java.util.Enumeration<java.net.NetworkInterface> java.net.NetworkInterface.getNetworkInterfaces() throws java.net.SocketException 
  java.util.Enumeration<?> <- public java.util.Enumeration<java.net.NetworkInterface> java.net.NetworkInterface.getSubInterfaces() 
Modifiers:
 Modifiers for MultiNode_Stub: 66
 MultiNode_Stub <- public void org.graphstream.graph.implementations.MultiNode_Stub.addAttribute(java.lang.String,java.lang.Object...)
 MultiNode_Stub <- public void org.graphstream.graph.implementations.MultiNode_Stub.addAttributes(java.util.Map)
 MultiNode_Stub <- public void org.graphstream.graph.implementations.MultiNode_Stub.changeAttribute(java.lang.String,java.lang.Object...)
 MultiNode_Stub <- public void org.graphstream.graph.implementations.MultiNode_Stub.clearAttributes()
 MultiNode_Stub <- public int org.graphstream.graph.implementations.MultiNode_Stub.collectionSize(java.util.Collection)
 MultiNode_Stub <- public java.lang.Object[] org.graphstream.graph.implementations.MultiNode_Stub.getArray(java.lang.String)
 MultiNode_Stub <- public java.lang.Object org.graphstream.graph.implementations.MultiNode_Stub.getAttribute(java.lang.String,java.lang.Class)
 MultiNode_Stub <- public int org.graphstream.graph.implementations.MultiNode_Stub.getAttributeCount()
 MultiNode_Stub <- public java.util.Collection org.graphstream.graph.implementations.MultiNode_Stub.getAttributeKeySet()
 MultiNode_Stub <- public int org.graphstream.graph.implementations.MultiNode_Stub.getDegree()
 MultiNode_Stub <- public java.lang.Iterable org.graphstream.graph.implementations.MultiNode_Stub.getEachAttributeKey()
 MultiNode_Stub <- public java.lang.Iterable org.graphstream.graph.implementations.MultiNode_Stub.getEachEdge()
 MultiNode_Stub <- public java.lang.Iterable org.graphstream.graph.implementations.MultiNode_Stub.getEachEnteringEdge()
 MultiNode_Stub <- public java.lang.Iterable org.graphstream.graph.implementations.MultiNode_Stub.getEachLeavingEdge()
 MultiNode_Stub <- public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdge(int)
 MultiNode_Stub <- public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeBetween(int)
 MultiNode_Stub <- public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeBetween(java.lang.String)
 MultiNode_Stub <- public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeBetween(org.graphstream.graph.Node)
 MultiNode_Stub <- public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeFrom(int)
 MultiNode_Stub <- public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeFrom(java.lang.String)
 MultiNode_Stub <- public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeFrom(org.graphstream.graph.Node)
 MultiNode_Stub <- public java.util.Collection org.graphstream.graph.implementations.MultiNode_Stub.getEdgeSet()
 MultiNode_Stub <- public java.util.Collection org.graphstream.graph.implementations.MultiNode_Stub.getEdgeSetBetween(int)
 MultiNode_Stub <- public java.util.Collection org.graphstream.graph.implementations.MultiNode_Stub.getEdgeSetBetween(java.lang.String)
 MultiNode_Stub <- public java.util.Collection org.graphstream.graph.implementations.MultiNode_Stub.getEdgeSetBetween(org.graphstream.graph.Node)
 MultiNode_Stub <- public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeToward(int)
 MultiNode_Stub <- public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeToward(java.lang.String)
 MultiNode_Stub <- public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeToward(org.graphstream.graph.Node)
 MultiNode_Stub <- public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEnteringEdge(int)
 MultiNode_Stub <- public java.util.Collection org.graphstream.graph.implementations.MultiNode_Stub.getEnteringEdgeSet()
 MultiNode_Stub <- public java.lang.Object org.graphstream.graph.implementations.MultiNode_Stub.getFirstAttributeOf(java.lang.Class,java.lang.String...)
 MultiNode_Stub <- public java.lang.Object org.graphstream.graph.implementations.MultiNode_Stub.getFirstAttributeOf(java.lang.String...)
 MultiNode_Stub <- public org.graphstream.graph.Graph org.graphstream.graph.implementations.MultiNode_Stub.getGraph()
 MultiNode_Stub <- public java.util.HashMap org.graphstream.graph.implementations.MultiNode_Stub.getHash(java.lang.String)
 MultiNode_Stub <- public java.lang.String org.graphstream.graph.implementations.MultiNode_Stub.getId()
 MultiNode_Stub <- public int org.graphstream.graph.implementations.MultiNode_Stub.getInDegree()
 MultiNode_Stub <- public int org.graphstream.graph.implementations.MultiNode_Stub.getIndex()
 MultiNode_Stub <- public java.lang.CharSequence org.graphstream.graph.implementations.MultiNode_Stub.getLabel(java.lang.String)
 MultiNode_Stub <- public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getLeavingEdge(int)
 MultiNode_Stub <- public java.util.Collection org.graphstream.graph.implementations.MultiNode_Stub.getLeavingEdgeSet()
 MultiNode_Stub <- public double org.graphstream.graph.implementations.MultiNode_Stub.getNumber(java.lang.String)
 MultiNode_Stub <- public int org.graphstream.graph.implementations.MultiNode_Stub.getOutDegree()
 MultiNode_Stub <- public java.util.ArrayList org.graphstream.graph.implementations.MultiNode_Stub.getVector(java.lang.String)
 MultiNode_Stub <- public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasArray(java.lang.String)
 MultiNode_Stub <- public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasAttribute(java.lang.String)
 MultiNode_Stub <- public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasAttribute(java.lang.String,java.lang.Class)
 MultiNode_Stub <- public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasEdgeBetween(int)
 MultiNode_Stub <- public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasEdgeBetween(java.lang.String)
 MultiNode_Stub <- public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasEdgeBetween(org.graphstream.graph.Node)
 MultiNode_Stub <- public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasEdgeFrom(int)
 MultiNode_Stub <- public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasEdgeFrom(java.lang.String)
 MultiNode_Stub <- public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasEdgeFrom(org.graphstream.graph.Node)
 MultiNode_Stub <- public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasEdgeToward(int)
 MultiNode_Stub <- public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasEdgeToward(java.lang.String)
 MultiNode_Stub <- public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasEdgeToward(org.graphstream.graph.Node)
 MultiNode_Stub <- public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasHash(java.lang.String)
 MultiNode_Stub <- public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasLabel(java.lang.String)
 MultiNode_Stub <- public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasNumber(java.lang.String)
 MultiNode_Stub <- public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasVector(java.lang.String)
 MultiNode_Stub <- public boolean org.graphstream.graph.implementations.MultiNode_Stub.isEnteringEdge(org.graphstream.graph.Edge)
 MultiNode_Stub <- public boolean org.graphstream.graph.implementations.MultiNode_Stub.isIncidentEdge(org.graphstream.graph.Edge)
 MultiNode_Stub <- public boolean org.graphstream.graph.implementations.MultiNode_Stub.isLeavingEdge(org.graphstream.graph.Edge)
 MultiNode_Stub <- public void org.graphstream.graph.implementations.MultiNode_Stub.method_under_test()
 MultiNode_Stub <- public void org.graphstream.graph.implementations.MultiNode_Stub.removeAttribute(java.lang.String)
 MultiNode_Stub <- public void org.graphstream.graph.implementations.MultiNode_Stub.setAttribute(java.lang.String,java.lang.Object...)
 MultiNode_Stub <- public void org.graphstream.graph.implementations.MultiNode_Stub.set_results(java.lang.Object)
 Modifiers for HashMap: 15
 HashMap <- public V java.util.HashMap.put(K,V)
 HashMap <- public void java.util.HashMap.putAll(java.util.Map<? extends K, ? extends V>)
 Modifiers for LinkedList: 47
 LinkedList <- public void java.util.LinkedList.add(int,E)
 LinkedList <- public boolean java.util.LinkedList.add(E)
 LinkedList <- public abstract boolean java.util.Collection.containsAll(java.util.Collection<?>)
 LinkedList <- public E java.util.LinkedList.peekFirst()
 LinkedList <- public E java.util.LinkedList.peekLast()
 Modifiers for AdjacencyListNode: 59
 AdjacencyListNode <- public abstract void org.graphstream.graph.Element.addAttribute(java.lang.String,java.lang.Object...)
 AdjacencyListNode <- protected void org.graphstream.graph.implementations.AbstractElement.addAttribute_(java.lang.String,long,java.lang.String,java.lang.Object...)
 AdjacencyListNode <- public abstract void org.graphstream.graph.Element.addAttributes(java.util.Map<java.lang.String, java.lang.Object>)
 AdjacencyListNode <- protected void org.graphstream.graph.implementations.AbstractElement.addAttributes_(java.lang.String,long,java.util.Map<java.lang.String, java.lang.Object>)
 AdjacencyListNode <- protected boolean org.graphstream.graph.implementations.AdjacencyListNode.addEdgeCallback(org.graphstream.graph.implementations.AbstractEdge)
 AdjacencyListNode <- protected void org.graphstream.graph.implementations.AbstractNode.attributeChanged(java.lang.String,long,java.lang.String,org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent,java.lang.Object,java.lang.Object)
 AdjacencyListNode <- public abstract void org.graphstream.graph.Element.changeAttribute(java.lang.String,java.lang.Object...)
 AdjacencyListNode <- protected void org.graphstream.graph.implementations.AbstractElement.changeAttribute_(java.lang.String,long,java.lang.String,java.lang.Object...)
 AdjacencyListNode <- public abstract void org.graphstream.graph.Element.clearAttributes()
 AdjacencyListNode <- protected void org.graphstream.graph.implementations.AbstractElement.clearAttributes_(java.lang.String,long)
 AdjacencyListNode <- protected void org.graphstream.graph.implementations.AdjacencyListNode.clearCallback()
 AdjacencyListNode <- protected char org.graphstream.graph.implementations.AdjacencyListNode.edgeType(org.graphstream.graph.implementations.AbstractEdge)
 AdjacencyListNode <- public abstract java.lang.Object[] org.graphstream.graph.Element.getArray(java.lang.String)
 AdjacencyListNode <- public abstract int org.graphstream.graph.Element.getAttributeCount()
 AdjacencyListNode <- public abstract java.util.Iterator<java.lang.String> org.graphstream.graph.Element.getAttributeKeyIterator()
 AdjacencyListNode <- public abstract java.lang.Iterable<java.lang.String> org.graphstream.graph.Element.getAttributeKeySet()
 AdjacencyListNode <- public java.util.Collection<java.lang.String> org.graphstream.graph.implementations.AbstractElement.getAttributeKeySet()
 AdjacencyListNode <- public int org.graphstream.graph.implementations.AdjacencyListNode.getDegree()
 AdjacencyListNode <- public java.lang.Iterable<java.lang.String> org.graphstream.graph.implementations.AbstractElement.getEachAttributeKey()
 AdjacencyListNode <- public org.graphstream.graph.Graph org.graphstream.graph.implementations.AbstractNode.getGraph()
 AdjacencyListNode <- public abstract java.util.HashMap<?, ?> org.graphstream.graph.Element.getHash(java.lang.String)
 AdjacencyListNode <- public abstract java.lang.String org.graphstream.graph.Element.getId()
 AdjacencyListNode <- public int org.graphstream.graph.implementations.AdjacencyListNode.getInDegree()
 AdjacencyListNode <- public abstract int org.graphstream.graph.Element.getIndex()
 AdjacencyListNode <- public abstract java.lang.CharSequence org.graphstream.graph.Element.getLabel(java.lang.String)
 AdjacencyListNode <- public abstract double org.graphstream.graph.Element.getNumber(java.lang.String)
 AdjacencyListNode <- public int org.graphstream.graph.implementations.AdjacencyListNode.getOutDegree()
 AdjacencyListNode <- public abstract java.util.ArrayList<? extends java.lang.Number> org.graphstream.graph.Element.getVector(java.lang.String)
 AdjacencyListNode <- public abstract boolean org.graphstream.graph.Element.hasArray(java.lang.String)
 AdjacencyListNode <- public abstract boolean org.graphstream.graph.Element.hasAttribute(java.lang.String)
 AdjacencyListNode <- public abstract boolean org.graphstream.graph.Element.hasAttribute(java.lang.String,java.lang.Class<?>)
 AdjacencyListNode <- public boolean org.graphstream.graph.implementations.AbstractNode.hasEdgeBetween(int)
 AdjacencyListNode <- public boolean org.graphstream.graph.implementations.AbstractNode.hasEdgeBetween(java.lang.String)
 AdjacencyListNode <- public boolean org.graphstream.graph.implementations.AbstractNode.hasEdgeBetween(org.graphstream.graph.Node)
 AdjacencyListNode <- public boolean org.graphstream.graph.implementations.AbstractNode.hasEdgeFrom(int)
 AdjacencyListNode <- public boolean org.graphstream.graph.implementations.AbstractNode.hasEdgeFrom(java.lang.String)
 AdjacencyListNode <- public boolean org.graphstream.graph.implementations.AbstractNode.hasEdgeFrom(org.graphstream.graph.Node)
 AdjacencyListNode <- public boolean org.graphstream.graph.implementations.AbstractNode.hasEdgeToward(int)
 AdjacencyListNode <- public boolean org.graphstream.graph.implementations.AbstractNode.hasEdgeToward(java.lang.String)
 AdjacencyListNode <- public boolean org.graphstream.graph.implementations.AbstractNode.hasEdgeToward(org.graphstream.graph.Node)
 AdjacencyListNode <- public abstract boolean org.graphstream.graph.Element.hasHash(java.lang.String)
 AdjacencyListNode <- public abstract boolean org.graphstream.graph.Element.hasLabel(java.lang.String)
 AdjacencyListNode <- public abstract boolean org.graphstream.graph.Element.hasNumber(java.lang.String)
 AdjacencyListNode <- public abstract boolean org.graphstream.graph.Element.hasVector(java.lang.String)
 AdjacencyListNode <- public boolean org.graphstream.graph.implementations.AbstractNode.isEnteringEdge(org.graphstream.graph.Edge)
 AdjacencyListNode <- public boolean org.graphstream.graph.implementations.AbstractNode.isIncidentEdge(org.graphstream.graph.Edge)
 AdjacencyListNode <- public boolean org.graphstream.graph.implementations.AbstractNode.isLeavingEdge(org.graphstream.graph.Edge)
 AdjacencyListNode <- public java.util.Iterator<org.graphstream.graph.Edge> org.graphstream.graph.implementations.AbstractNode.iterator()
 AdjacencyListNode <- protected java.lang.String org.graphstream.graph.implementations.AbstractNode.myGraphId()
 AdjacencyListNode <- protected long org.graphstream.graph.implementations.AbstractNode.newEvent()
 AdjacencyListNode <- protected boolean org.graphstream.graph.implementations.AbstractNode.nullAttributesAreErrors()
 AdjacencyListNode <- public abstract void org.graphstream.graph.Element.removeAttribute(java.lang.String)
 AdjacencyListNode <- protected void org.graphstream.graph.implementations.AbstractElement.removeAttribute_(java.lang.String,long,java.lang.String)
 AdjacencyListNode <- protected void org.graphstream.graph.implementations.AdjacencyListNode.removeEdge(int)
 AdjacencyListNode <- protected void org.graphstream.graph.implementations.AdjacencyListNode.removeEdgeCallback(org.graphstream.graph.implementations.AbstractEdge)
 AdjacencyListNode <- public abstract void org.graphstream.graph.Element.setAttribute(java.lang.String,java.lang.Object...)
 AdjacencyListNode <- protected void org.graphstream.graph.implementations.AbstractElement.setAttribute_(java.lang.String,long,java.lang.String,java.lang.Object...)
 AdjacencyListNode <- protected void org.graphstream.graph.implementations.AbstractElement.setIndex(int)
 AdjacencyListNode <- public abstract java.lang.String org.graphstream.graph.Node.toString()
 Modifiers for SingleNode: 59
 SingleNode <- public abstract void org.graphstream.graph.Element.addAttribute(java.lang.String,java.lang.Object...)
 SingleNode <- protected void org.graphstream.graph.implementations.AbstractElement.addAttribute_(java.lang.String,long,java.lang.String,java.lang.Object...)
 SingleNode <- public abstract void org.graphstream.graph.Element.addAttributes(java.util.Map<java.lang.String, java.lang.Object>)
 SingleNode <- protected void org.graphstream.graph.implementations.AbstractElement.addAttributes_(java.lang.String,long,java.util.Map<java.lang.String, java.lang.Object>)
 SingleNode <- protected boolean org.graphstream.graph.implementations.SingleNode.addEdgeCallback(org.graphstream.graph.implementations.AbstractEdge)
 SingleNode <- protected void org.graphstream.graph.implementations.AbstractNode.attributeChanged(java.lang.String,long,java.lang.String,org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent,java.lang.Object,java.lang.Object)
 SingleNode <- public abstract void org.graphstream.graph.Element.changeAttribute(java.lang.String,java.lang.Object...)
 SingleNode <- protected void org.graphstream.graph.implementations.AbstractElement.changeAttribute_(java.lang.String,long,java.lang.String,java.lang.Object...)
 SingleNode <- public abstract void org.graphstream.graph.Element.clearAttributes()
 SingleNode <- protected void org.graphstream.graph.implementations.AbstractElement.clearAttributes_(java.lang.String,long)
 SingleNode <- protected void org.graphstream.graph.implementations.SingleNode.clearCallback()
 SingleNode <- protected char org.graphstream.graph.implementations.AdjacencyListNode.edgeType(org.graphstream.graph.implementations.AbstractEdge)
 SingleNode <- public abstract java.lang.Object[] org.graphstream.graph.Element.getArray(java.lang.String)
 SingleNode <- public abstract int org.graphstream.graph.Element.getAttributeCount()
 SingleNode <- public abstract java.util.Iterator<java.lang.String> org.graphstream.graph.Element.getAttributeKeyIterator()
 SingleNode <- public abstract java.lang.Iterable<java.lang.String> org.graphstream.graph.Element.getAttributeKeySet()
 SingleNode <- public java.util.Collection<java.lang.String> org.graphstream.graph.implementations.AbstractElement.getAttributeKeySet()
 SingleNode <- public int org.graphstream.graph.implementations.AdjacencyListNode.getDegree()
 SingleNode <- public java.lang.Iterable<java.lang.String> org.graphstream.graph.implementations.AbstractElement.getEachAttributeKey()
 SingleNode <- public org.graphstream.graph.Graph org.graphstream.graph.implementations.AbstractNode.getGraph()
 SingleNode <- public abstract java.util.HashMap<?, ?> org.graphstream.graph.Element.getHash(java.lang.String)
 SingleNode <- public abstract java.lang.String org.graphstream.graph.Element.getId()
 SingleNode <- public int org.graphstream.graph.implementations.AdjacencyListNode.getInDegree()
 SingleNode <- public abstract int org.graphstream.graph.Element.getIndex()
 SingleNode <- public abstract java.lang.CharSequence org.graphstream.graph.Element.getLabel(java.lang.String)
 SingleNode <- public abstract double org.graphstream.graph.Element.getNumber(java.lang.String)
 SingleNode <- public int org.graphstream.graph.implementations.AdjacencyListNode.getOutDegree()
 SingleNode <- public abstract java.util.ArrayList<? extends java.lang.Number> org.graphstream.graph.Element.getVector(java.lang.String)
 SingleNode <- public abstract boolean org.graphstream.graph.Element.hasArray(java.lang.String)
 SingleNode <- public abstract boolean org.graphstream.graph.Element.hasAttribute(java.lang.String)
 SingleNode <- public abstract boolean org.graphstream.graph.Element.hasAttribute(java.lang.String,java.lang.Class<?>)
 SingleNode <- public boolean org.graphstream.graph.implementations.AbstractNode.hasEdgeBetween(int)
 SingleNode <- public boolean org.graphstream.graph.implementations.AbstractNode.hasEdgeBetween(java.lang.String)
 SingleNode <- public boolean org.graphstream.graph.implementations.AbstractNode.hasEdgeBetween(org.graphstream.graph.Node)
 SingleNode <- public boolean org.graphstream.graph.implementations.AbstractNode.hasEdgeFrom(int)
 SingleNode <- public boolean org.graphstream.graph.implementations.AbstractNode.hasEdgeFrom(java.lang.String)
 SingleNode <- public boolean org.graphstream.graph.implementations.AbstractNode.hasEdgeFrom(org.graphstream.graph.Node)
 SingleNode <- public boolean org.graphstream.graph.implementations.AbstractNode.hasEdgeToward(int)
 SingleNode <- public boolean org.graphstream.graph.implementations.AbstractNode.hasEdgeToward(java.lang.String)
 SingleNode <- public boolean org.graphstream.graph.implementations.AbstractNode.hasEdgeToward(org.graphstream.graph.Node)
 SingleNode <- public abstract boolean org.graphstream.graph.Element.hasHash(java.lang.String)
 SingleNode <- public abstract boolean org.graphstream.graph.Element.hasLabel(java.lang.String)
 SingleNode <- public abstract boolean org.graphstream.graph.Element.hasNumber(java.lang.String)
 SingleNode <- public abstract boolean org.graphstream.graph.Element.hasVector(java.lang.String)
 SingleNode <- public boolean org.graphstream.graph.implementations.AbstractNode.isEnteringEdge(org.graphstream.graph.Edge)
 SingleNode <- public boolean org.graphstream.graph.implementations.AbstractNode.isIncidentEdge(org.graphstream.graph.Edge)
 SingleNode <- public boolean org.graphstream.graph.implementations.AbstractNode.isLeavingEdge(org.graphstream.graph.Edge)
 SingleNode <- public java.util.Iterator<org.graphstream.graph.Edge> org.graphstream.graph.implementations.AbstractNode.iterator()
 SingleNode <- protected java.lang.String org.graphstream.graph.implementations.AbstractNode.myGraphId()
 SingleNode <- protected long org.graphstream.graph.implementations.AbstractNode.newEvent()
 SingleNode <- protected boolean org.graphstream.graph.implementations.AbstractNode.nullAttributesAreErrors()
 SingleNode <- public abstract void org.graphstream.graph.Element.removeAttribute(java.lang.String)
 SingleNode <- protected void org.graphstream.graph.implementations.AbstractElement.removeAttribute_(java.lang.String,long,java.lang.String)
 SingleNode <- protected void org.graphstream.graph.implementations.SingleNode.removeEdge(int)
 SingleNode <- protected void org.graphstream.graph.implementations.AdjacencyListNode.removeEdgeCallback(org.graphstream.graph.implementations.AbstractEdge)
 SingleNode <- public abstract void org.graphstream.graph.Element.setAttribute(java.lang.String,java.lang.Object...)
 SingleNode <- protected void org.graphstream.graph.implementations.AbstractElement.setAttribute_(java.lang.String,long,java.lang.String,java.lang.Object...)
 SingleNode <- protected void org.graphstream.graph.implementations.AbstractElement.setIndex(int)
 SingleNode <- public abstract java.lang.String org.graphstream.graph.Node.toString()
 Modifiers for MultiNode: 59
 MultiNode <- public abstract void org.graphstream.graph.Element.addAttribute(java.lang.String,java.lang.Object...)
 MultiNode <- protected void org.graphstream.graph.implementations.AbstractElement.addAttribute_(java.lang.String,long,java.lang.String,java.lang.Object...)
 MultiNode <- public abstract void org.graphstream.graph.Element.addAttributes(java.util.Map<java.lang.String, java.lang.Object>)
 MultiNode <- protected void org.graphstream.graph.implementations.AbstractElement.addAttributes_(java.lang.String,long,java.util.Map<java.lang.String, java.lang.Object>)
 MultiNode <- protected boolean org.graphstream.graph.implementations.MultiNode.addEdgeCallback(org.graphstream.graph.implementations.AbstractEdge)
 MultiNode <- protected void org.graphstream.graph.implementations.AbstractNode.attributeChanged(java.lang.String,long,java.lang.String,org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent,java.lang.Object,java.lang.Object)
 MultiNode <- public abstract void org.graphstream.graph.Element.changeAttribute(java.lang.String,java.lang.Object...)
 MultiNode <- protected void org.graphstream.graph.implementations.AbstractElement.changeAttribute_(java.lang.String,long,java.lang.String,java.lang.Object...)
 MultiNode <- public abstract void org.graphstream.graph.Element.clearAttributes()
 MultiNode <- protected void org.graphstream.graph.implementations.AbstractElement.clearAttributes_(java.lang.String,long)
 MultiNode <- protected void org.graphstream.graph.implementations.MultiNode.clearCallback()
 MultiNode <- protected char org.graphstream.graph.implementations.AdjacencyListNode.edgeType(org.graphstream.graph.implementations.AbstractEdge)
 MultiNode <- public abstract java.lang.Object[] org.graphstream.graph.Element.getArray(java.lang.String)
 MultiNode <- public abstract int org.graphstream.graph.Element.getAttributeCount()
 MultiNode <- public abstract java.util.Iterator<java.lang.String> org.graphstream.graph.Element.getAttributeKeyIterator()
 MultiNode <- public abstract java.lang.Iterable<java.lang.String> org.graphstream.graph.Element.getAttributeKeySet()
 MultiNode <- public java.util.Collection<java.lang.String> org.graphstream.graph.implementations.AbstractElement.getAttributeKeySet()
 MultiNode <- public int org.graphstream.graph.implementations.AdjacencyListNode.getDegree()
 MultiNode <- public java.lang.Iterable<java.lang.String> org.graphstream.graph.implementations.AbstractElement.getEachAttributeKey()
 MultiNode <- public org.graphstream.graph.Graph org.graphstream.graph.implementations.AbstractNode.getGraph()
 MultiNode <- public abstract java.util.HashMap<?, ?> org.graphstream.graph.Element.getHash(java.lang.String)
 MultiNode <- public abstract java.lang.String org.graphstream.graph.Element.getId()
 MultiNode <- public int org.graphstream.graph.implementations.AdjacencyListNode.getInDegree()
 MultiNode <- public abstract int org.graphstream.graph.Element.getIndex()
 MultiNode <- public abstract java.lang.CharSequence org.graphstream.graph.Element.getLabel(java.lang.String)
 MultiNode <- public abstract double org.graphstream.graph.Element.getNumber(java.lang.String)
 MultiNode <- public int org.graphstream.graph.implementations.AdjacencyListNode.getOutDegree()
 MultiNode <- public abstract java.util.ArrayList<? extends java.lang.Number> org.graphstream.graph.Element.getVector(java.lang.String)
 MultiNode <- public abstract boolean org.graphstream.graph.Element.hasArray(java.lang.String)
 MultiNode <- public abstract boolean org.graphstream.graph.Element.hasAttribute(java.lang.String)
 MultiNode <- public abstract boolean org.graphstream.graph.Element.hasAttribute(java.lang.String,java.lang.Class<?>)
 MultiNode <- public boolean org.graphstream.graph.implementations.AbstractNode.hasEdgeBetween(int)
 MultiNode <- public boolean org.graphstream.graph.implementations.AbstractNode.hasEdgeBetween(java.lang.String)
 MultiNode <- public boolean org.graphstream.graph.implementations.AbstractNode.hasEdgeBetween(org.graphstream.graph.Node)
 MultiNode <- public boolean org.graphstream.graph.implementations.AbstractNode.hasEdgeFrom(int)
 MultiNode <- public boolean org.graphstream.graph.implementations.AbstractNode.hasEdgeFrom(java.lang.String)
 MultiNode <- public boolean org.graphstream.graph.implementations.AbstractNode.hasEdgeFrom(org.graphstream.graph.Node)
 MultiNode <- public boolean org.graphstream.graph.implementations.AbstractNode.hasEdgeToward(int)
 MultiNode <- public boolean org.graphstream.graph.implementations.AbstractNode.hasEdgeToward(java.lang.String)
 MultiNode <- public boolean org.graphstream.graph.implementations.AbstractNode.hasEdgeToward(org.graphstream.graph.Node)
 MultiNode <- public abstract boolean org.graphstream.graph.Element.hasHash(java.lang.String)
 MultiNode <- public abstract boolean org.graphstream.graph.Element.hasLabel(java.lang.String)
 MultiNode <- public abstract boolean org.graphstream.graph.Element.hasNumber(java.lang.String)
 MultiNode <- public abstract boolean org.graphstream.graph.Element.hasVector(java.lang.String)
 MultiNode <- public boolean org.graphstream.graph.implementations.AbstractNode.isEnteringEdge(org.graphstream.graph.Edge)
 MultiNode <- public boolean org.graphstream.graph.implementations.AbstractNode.isIncidentEdge(org.graphstream.graph.Edge)
 MultiNode <- public boolean org.graphstream.graph.implementations.AbstractNode.isLeavingEdge(org.graphstream.graph.Edge)
 MultiNode <- public java.util.Iterator<org.graphstream.graph.Edge> org.graphstream.graph.implementations.AbstractNode.iterator()
 MultiNode <- protected java.lang.String org.graphstream.graph.implementations.AbstractNode.myGraphId()
 MultiNode <- protected long org.graphstream.graph.implementations.AbstractNode.newEvent()
 MultiNode <- protected boolean org.graphstream.graph.implementations.AbstractNode.nullAttributesAreErrors()
 MultiNode <- public abstract void org.graphstream.graph.Element.removeAttribute(java.lang.String)
 MultiNode <- protected void org.graphstream.graph.implementations.AbstractElement.removeAttribute_(java.lang.String,long,java.lang.String)
 MultiNode <- protected void org.graphstream.graph.implementations.MultiNode.removeEdge(int)
 MultiNode <- protected void org.graphstream.graph.implementations.AdjacencyListNode.removeEdgeCallback(org.graphstream.graph.implementations.AbstractEdge)
 MultiNode <- public abstract void org.graphstream.graph.Element.setAttribute(java.lang.String,java.lang.Object...)
 MultiNode <- protected void org.graphstream.graph.implementations.AbstractElement.setAttribute_(java.lang.String,long,java.lang.String,java.lang.Object...)
 MultiNode <- protected void org.graphstream.graph.implementations.AbstractElement.setIndex(int)
 MultiNode <- public abstract java.lang.String org.graphstream.graph.Node.toString()
 Modifiers for AbstractEdge: 39
 AbstractEdge <- public abstract void org.graphstream.graph.Element.addAttribute(java.lang.String,java.lang.Object...)
 AbstractEdge <- protected void org.graphstream.graph.implementations.AbstractElement.addAttribute_(java.lang.String,long,java.lang.String,java.lang.Object...)
 AbstractEdge <- public abstract void org.graphstream.graph.Element.addAttributes(java.util.Map<java.lang.String, java.lang.Object>)
 AbstractEdge <- protected void org.graphstream.graph.implementations.AbstractElement.addAttributes_(java.lang.String,long,java.util.Map<java.lang.String, java.lang.Object>)
 AbstractEdge <- protected void org.graphstream.graph.implementations.AbstractEdge.attributeChanged(java.lang.String,long,java.lang.String,org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent,java.lang.Object,java.lang.Object)
 AbstractEdge <- public abstract void org.graphstream.graph.Element.changeAttribute(java.lang.String,java.lang.Object...)
 AbstractEdge <- protected void org.graphstream.graph.implementations.AbstractElement.changeAttribute_(java.lang.String,long,java.lang.String,java.lang.Object...)
 AbstractEdge <- public abstract void org.graphstream.graph.Element.clearAttributes()
 AbstractEdge <- protected void org.graphstream.graph.implementations.AbstractElement.clearAttributes_(java.lang.String,long)
 AbstractEdge <- public abstract java.lang.Object[] org.graphstream.graph.Element.getArray(java.lang.String)
 AbstractEdge <- public abstract int org.graphstream.graph.Element.getAttributeCount()
 AbstractEdge <- public abstract java.util.Iterator<java.lang.String> org.graphstream.graph.Element.getAttributeKeyIterator()
 AbstractEdge <- public abstract java.lang.Iterable<java.lang.String> org.graphstream.graph.Element.getAttributeKeySet()
 AbstractEdge <- public java.util.Collection<java.lang.String> org.graphstream.graph.implementations.AbstractElement.getAttributeKeySet()
 AbstractEdge <- public java.lang.Iterable<java.lang.String> org.graphstream.graph.implementations.AbstractElement.getEachAttributeKey()
 AbstractEdge <- public abstract java.util.HashMap<?, ?> org.graphstream.graph.Element.getHash(java.lang.String)
 AbstractEdge <- public abstract java.lang.String org.graphstream.graph.Element.getId()
 AbstractEdge <- public abstract int org.graphstream.graph.Element.getIndex()
 AbstractEdge <- public abstract java.lang.CharSequence org.graphstream.graph.Element.getLabel(java.lang.String)
 AbstractEdge <- public abstract double org.graphstream.graph.Element.getNumber(java.lang.String)
 AbstractEdge <- public abstract java.util.ArrayList<? extends java.lang.Number> org.graphstream.graph.Element.getVector(java.lang.String)
 AbstractEdge <- public abstract boolean org.graphstream.graph.Element.hasArray(java.lang.String)
 AbstractEdge <- public abstract boolean org.graphstream.graph.Element.hasAttribute(java.lang.String)
 AbstractEdge <- public abstract boolean org.graphstream.graph.Element.hasAttribute(java.lang.String,java.lang.Class<?>)
 AbstractEdge <- public abstract boolean org.graphstream.graph.Element.hasHash(java.lang.String)
 AbstractEdge <- public abstract boolean org.graphstream.graph.Element.hasLabel(java.lang.String)
 AbstractEdge <- public abstract boolean org.graphstream.graph.Element.hasNumber(java.lang.String)
 AbstractEdge <- public abstract boolean org.graphstream.graph.Element.hasVector(java.lang.String)
 AbstractEdge <- public boolean org.graphstream.graph.implementations.AbstractEdge.isDirected()
 AbstractEdge <- public boolean org.graphstream.graph.implementations.AbstractEdge.isLoop()
 AbstractEdge <- protected java.lang.String org.graphstream.graph.implementations.AbstractEdge.myGraphId()
 AbstractEdge <- protected long org.graphstream.graph.implementations.AbstractEdge.newEvent()
 AbstractEdge <- protected boolean org.graphstream.graph.implementations.AbstractEdge.nullAttributesAreErrors()
 AbstractEdge <- public abstract void org.graphstream.graph.Element.removeAttribute(java.lang.String)
 AbstractEdge <- protected void org.graphstream.graph.implementations.AbstractElement.removeAttribute_(java.lang.String,long,java.lang.String)
 AbstractEdge <- public abstract void org.graphstream.graph.Element.setAttribute(java.lang.String,java.lang.Object...)
 AbstractEdge <- protected void org.graphstream.graph.implementations.AbstractElement.setAttribute_(java.lang.String,long,java.lang.String,java.lang.Object...)
 AbstractEdge <- protected void org.graphstream.graph.implementations.AbstractElement.setIndex(int)
 AbstractEdge <- public java.lang.String org.graphstream.graph.implementations.AbstractEdge.toString()
 Modifiers for AdjacencyListGraph: 94
 AdjacencyListGraph <- public abstract void org.graphstream.graph.Element.addAttribute(java.lang.String,java.lang.Object...)
 AdjacencyListGraph <- public void org.graphstream.graph.implementations.AbstractGraph.addAttributeSink(org.graphstream.stream.AttributeSink)
 AdjacencyListGraph <- protected void org.graphstream.graph.implementations.AbstractElement.addAttribute_(java.lang.String,long,java.lang.String,java.lang.Object...)
 AdjacencyListGraph <- public abstract void org.graphstream.graph.Element.addAttributes(java.util.Map<java.lang.String, java.lang.Object>)
 AdjacencyListGraph <- protected void org.graphstream.graph.implementations.AbstractElement.addAttributes_(java.lang.String,long,java.util.Map<java.lang.String, java.lang.Object>)
 AdjacencyListGraph <- protected void org.graphstream.graph.implementations.AdjacencyListGraph.addEdgeCallback(org.graphstream.graph.implementations.AbstractEdge)
 AdjacencyListGraph <- public void org.graphstream.graph.implementations.AbstractGraph.addElementSink(org.graphstream.stream.ElementSink)
 AdjacencyListGraph <- protected void org.graphstream.graph.implementations.AdjacencyListGraph.addNodeCallback(org.graphstream.graph.implementations.AbstractNode)
 AdjacencyListGraph <- public void org.graphstream.graph.implementations.AbstractGraph.addSink(org.graphstream.stream.Sink)
 AdjacencyListGraph <- protected void org.graphstream.graph.implementations.AbstractGraph.attributeChanged(java.lang.String,long,java.lang.String,org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent,java.lang.Object,java.lang.Object)
 AdjacencyListGraph <- public java.lang.Iterable<org.graphstream.stream.AttributeSink> org.graphstream.graph.implementations.AbstractGraph.attributeSinks()
 AdjacencyListGraph <- public abstract void org.graphstream.graph.Element.changeAttribute(java.lang.String,java.lang.Object...)
 AdjacencyListGraph <- protected void org.graphstream.graph.implementations.AbstractElement.changeAttribute_(java.lang.String,long,java.lang.String,java.lang.Object...)
 AdjacencyListGraph <- public void org.graphstream.graph.implementations.AbstractGraph.clear()
 AdjacencyListGraph <- public void org.graphstream.graph.implementations.AbstractGraph.clearAttributeSinks()
 AdjacencyListGraph <- public abstract void org.graphstream.graph.Element.clearAttributes()
 AdjacencyListGraph <- protected void org.graphstream.graph.implementations.AbstractElement.clearAttributes_(java.lang.String,long)
 AdjacencyListGraph <- protected void org.graphstream.graph.implementations.AdjacencyListGraph.clearCallback()
 AdjacencyListGraph <- public void org.graphstream.graph.implementations.AbstractGraph.clearElementSinks()
 AdjacencyListGraph <- public void org.graphstream.graph.implementations.AbstractGraph.clearSinks()
 AdjacencyListGraph <- protected void org.graphstream.graph.implementations.AbstractGraph.clear_(java.lang.String,long)
 AdjacencyListGraph <- public org.graphstream.ui.swingViewer.Viewer org.graphstream.graph.implementations.AbstractGraph.display()
 AdjacencyListGraph <- public org.graphstream.ui.swingViewer.Viewer org.graphstream.graph.implementations.AbstractGraph.display(boolean)
 AdjacencyListGraph <- public void org.graphstream.graph.implementations.AbstractGraph.edgeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,boolean)
 AdjacencyListGraph <- public void org.graphstream.graph.implementations.AbstractGraph.edgeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 AdjacencyListGraph <- public void org.graphstream.graph.implementations.AbstractGraph.edgeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 AdjacencyListGraph <- public void org.graphstream.graph.implementations.AbstractGraph.edgeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 AdjacencyListGraph <- public org.graphstream.graph.EdgeFactory<? extends org.graphstream.graph.Edge> org.graphstream.graph.implementations.AbstractGraph.edgeFactory()
 AdjacencyListGraph <- public void org.graphstream.graph.implementations.AbstractGraph.edgeRemoved(java.lang.String,long,java.lang.String)
 AdjacencyListGraph <- public java.lang.Iterable<org.graphstream.stream.ElementSink> org.graphstream.graph.implementations.AbstractGraph.elementSinks()
 AdjacencyListGraph <- public abstract java.lang.Object[] org.graphstream.graph.Element.getArray(java.lang.String)
 AdjacencyListGraph <- public abstract int org.graphstream.graph.Element.getAttributeCount()
 AdjacencyListGraph <- public abstract java.util.Iterator<java.lang.String> org.graphstream.graph.Element.getAttributeKeyIterator()
 AdjacencyListGraph <- public abstract java.lang.Iterable<java.lang.String> org.graphstream.graph.Element.getAttributeKeySet()
 AdjacencyListGraph <- public java.util.Collection<java.lang.String> org.graphstream.graph.implementations.AbstractElement.getAttributeKeySet()
 AdjacencyListGraph <- public java.lang.Iterable<java.lang.String> org.graphstream.graph.implementations.AbstractElement.getEachAttributeKey()
 AdjacencyListGraph <- public int org.graphstream.graph.implementations.AdjacencyListGraph.getEdgeCount()
 AdjacencyListGraph <- public abstract java.util.HashMap<?, ?> org.graphstream.graph.Element.getHash(java.lang.String)
 AdjacencyListGraph <- public abstract java.lang.String org.graphstream.graph.Element.getId()
 AdjacencyListGraph <- public abstract int org.graphstream.graph.Element.getIndex()
 AdjacencyListGraph <- public abstract java.lang.CharSequence org.graphstream.graph.Element.getLabel(java.lang.String)
 AdjacencyListGraph <- public int org.graphstream.graph.implementations.AdjacencyListGraph.getNodeCount()
 AdjacencyListGraph <- public abstract double org.graphstream.graph.Element.getNumber(java.lang.String)
 AdjacencyListGraph <- public org.graphstream.stream.Replayable$Controller org.graphstream.graph.implementations.AbstractGraph.getReplayController()
 AdjacencyListGraph <- public double org.graphstream.graph.implementations.AbstractGraph.getStep()
 AdjacencyListGraph <- public abstract java.util.ArrayList<? extends java.lang.Number> org.graphstream.graph.Element.getVector(java.lang.String)
 AdjacencyListGraph <- public void org.graphstream.graph.implementations.AbstractGraph.graphAttributeAdded(java.lang.String,long,java.lang.String,java.lang.Object)
 AdjacencyListGraph <- public void org.graphstream.graph.implementations.AbstractGraph.graphAttributeChanged(java.lang.String,long,java.lang.String,java.lang.Object,java.lang.Object)
 AdjacencyListGraph <- public void org.graphstream.graph.implementations.AbstractGraph.graphAttributeRemoved(java.lang.String,long,java.lang.String)
 AdjacencyListGraph <- public void org.graphstream.graph.implementations.AbstractGraph.graphCleared(java.lang.String,long)
 AdjacencyListGraph <- public abstract boolean org.graphstream.graph.Element.hasArray(java.lang.String)
 AdjacencyListGraph <- public abstract boolean org.graphstream.graph.Element.hasAttribute(java.lang.String)
 AdjacencyListGraph <- public abstract boolean org.graphstream.graph.Element.hasAttribute(java.lang.String,java.lang.Class<?>)
 AdjacencyListGraph <- public abstract boolean org.graphstream.graph.Element.hasHash(java.lang.String)
 AdjacencyListGraph <- public abstract boolean org.graphstream.graph.Element.hasLabel(java.lang.String)
 AdjacencyListGraph <- public abstract boolean org.graphstream.graph.Element.hasNumber(java.lang.String)
 AdjacencyListGraph <- public abstract boolean org.graphstream.graph.Element.hasVector(java.lang.String)
 AdjacencyListGraph <- public boolean org.graphstream.graph.implementations.AbstractGraph.isAutoCreationEnabled()
 AdjacencyListGraph <- public boolean org.graphstream.graph.implementations.AbstractGraph.isStrict()
 AdjacencyListGraph <- public java.util.Iterator<org.graphstream.graph.Node> org.graphstream.graph.implementations.AbstractGraph.iterator()
 AdjacencyListGraph <- protected java.lang.String org.graphstream.graph.implementations.AbstractGraph.myGraphId()
 AdjacencyListGraph <- protected long org.graphstream.graph.implementations.AbstractGraph.newEvent()
 AdjacencyListGraph <- public void org.graphstream.graph.implementations.AbstractGraph.nodeAdded(java.lang.String,long,java.lang.String)
 AdjacencyListGraph <- public void org.graphstream.graph.implementations.AbstractGraph.nodeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 AdjacencyListGraph <- public void org.graphstream.graph.implementations.AbstractGraph.nodeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 AdjacencyListGraph <- public void org.graphstream.graph.implementations.AbstractGraph.nodeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 AdjacencyListGraph <- public org.graphstream.graph.NodeFactory<? extends org.graphstream.graph.Node> org.graphstream.graph.implementations.AbstractGraph.nodeFactory()
 AdjacencyListGraph <- public void org.graphstream.graph.implementations.AbstractGraph.nodeRemoved(java.lang.String,long,java.lang.String)
 AdjacencyListGraph <- public boolean org.graphstream.graph.implementations.AbstractGraph.nullAttributesAreErrors()
 AdjacencyListGraph <- public void org.graphstream.graph.implementations.AbstractGraph.read(java.lang.String) throws java.io.IOException,org.graphstream.stream.GraphParseException,org.graphstream.graph.ElementNotFoundException
 AdjacencyListGraph <- public void org.graphstream.graph.implementations.AbstractGraph.read(org.graphstream.stream.file.FileSource,java.lang.String) throws java.io.IOException,org.graphstream.stream.GraphParseException
 AdjacencyListGraph <- public abstract void org.graphstream.graph.Element.removeAttribute(java.lang.String)
 AdjacencyListGraph <- public void org.graphstream.graph.implementations.AbstractGraph.removeAttributeSink(org.graphstream.stream.AttributeSink)
 AdjacencyListGraph <- protected void org.graphstream.graph.implementations.AbstractElement.removeAttribute_(java.lang.String,long,java.lang.String)
 AdjacencyListGraph <- protected void org.graphstream.graph.implementations.AbstractGraph.removeEdge(org.graphstream.graph.implementations.AbstractEdge,boolean,boolean,boolean)
 AdjacencyListGraph <- protected void org.graphstream.graph.implementations.AdjacencyListGraph.removeEdgeCallback(org.graphstream.graph.implementations.AbstractEdge)
 AdjacencyListGraph <- public void org.graphstream.graph.implementations.AbstractGraph.removeElementSink(org.graphstream.stream.ElementSink)
 AdjacencyListGraph <- protected void org.graphstream.graph.implementations.AbstractGraph.removeNode(org.graphstream.graph.implementations.AbstractNode,boolean)
 AdjacencyListGraph <- protected void org.graphstream.graph.implementations.AdjacencyListGraph.removeNodeCallback(org.graphstream.graph.implementations.AbstractNode)
 AdjacencyListGraph <- public void org.graphstream.graph.implementations.AbstractGraph.removeSink(org.graphstream.stream.Sink)
 AdjacencyListGraph <- public abstract void org.graphstream.graph.Element.setAttribute(java.lang.String,java.lang.Object...)
 AdjacencyListGraph <- protected void org.graphstream.graph.implementations.AbstractElement.setAttribute_(java.lang.String,long,java.lang.String,java.lang.Object...)
 AdjacencyListGraph <- public void org.graphstream.graph.implementations.AbstractGraph.setAutoCreate(boolean)
 AdjacencyListGraph <- public void org.graphstream.graph.implementations.AbstractGraph.setEdgeFactory(org.graphstream.graph.EdgeFactory<? extends org.graphstream.graph.Edge>)
 AdjacencyListGraph <- protected void org.graphstream.graph.implementations.AbstractElement.setIndex(int)
 AdjacencyListGraph <- public void org.graphstream.graph.implementations.AbstractGraph.setNodeFactory(org.graphstream.graph.NodeFactory<? extends org.graphstream.graph.Node>)
 AdjacencyListGraph <- public void org.graphstream.graph.implementations.AbstractGraph.setNullAttributesAreErrors(boolean)
 AdjacencyListGraph <- public void org.graphstream.graph.implementations.AbstractGraph.setStrict(boolean)
 AdjacencyListGraph <- public void org.graphstream.graph.implementations.AbstractGraph.stepBegins(double)
 AdjacencyListGraph <- public void org.graphstream.graph.implementations.AbstractGraph.stepBegins(java.lang.String,long,double)
 AdjacencyListGraph <- protected void org.graphstream.graph.implementations.AbstractGraph.stepBegins_(java.lang.String,long,double)
 AdjacencyListGraph <- public java.lang.String org.graphstream.graph.implementations.AbstractElement.toString()
 AdjacencyListGraph <- public void org.graphstream.graph.implementations.AbstractGraph.write(java.lang.String) throws java.io.IOException
 AdjacencyListGraph <- public void org.graphstream.graph.implementations.AbstractGraph.write(org.graphstream.stream.file.FileSink,java.lang.String) throws java.io.IOException
 Modifiers for SingleGraph: 94
 SingleGraph <- public abstract void org.graphstream.graph.Element.addAttribute(java.lang.String,java.lang.Object...)
 SingleGraph <- public void org.graphstream.graph.implementations.AbstractGraph.addAttributeSink(org.graphstream.stream.AttributeSink)
 SingleGraph <- protected void org.graphstream.graph.implementations.AbstractElement.addAttribute_(java.lang.String,long,java.lang.String,java.lang.Object...)
 SingleGraph <- public abstract void org.graphstream.graph.Element.addAttributes(java.util.Map<java.lang.String, java.lang.Object>)
 SingleGraph <- protected void org.graphstream.graph.implementations.AbstractElement.addAttributes_(java.lang.String,long,java.util.Map<java.lang.String, java.lang.Object>)
 SingleGraph <- protected void org.graphstream.graph.implementations.AdjacencyListGraph.addEdgeCallback(org.graphstream.graph.implementations.AbstractEdge)
 SingleGraph <- public void org.graphstream.graph.implementations.AbstractGraph.addElementSink(org.graphstream.stream.ElementSink)
 SingleGraph <- protected void org.graphstream.graph.implementations.AdjacencyListGraph.addNodeCallback(org.graphstream.graph.implementations.AbstractNode)
 SingleGraph <- public void org.graphstream.graph.implementations.AbstractGraph.addSink(org.graphstream.stream.Sink)
 SingleGraph <- protected void org.graphstream.graph.implementations.AbstractGraph.attributeChanged(java.lang.String,long,java.lang.String,org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent,java.lang.Object,java.lang.Object)
 SingleGraph <- public java.lang.Iterable<org.graphstream.stream.AttributeSink> org.graphstream.graph.implementations.AbstractGraph.attributeSinks()
 SingleGraph <- public abstract void org.graphstream.graph.Element.changeAttribute(java.lang.String,java.lang.Object...)
 SingleGraph <- protected void org.graphstream.graph.implementations.AbstractElement.changeAttribute_(java.lang.String,long,java.lang.String,java.lang.Object...)
 SingleGraph <- public void org.graphstream.graph.implementations.AbstractGraph.clear()
 SingleGraph <- public void org.graphstream.graph.implementations.AbstractGraph.clearAttributeSinks()
 SingleGraph <- public abstract void org.graphstream.graph.Element.clearAttributes()
 SingleGraph <- protected void org.graphstream.graph.implementations.AbstractElement.clearAttributes_(java.lang.String,long)
 SingleGraph <- protected void org.graphstream.graph.implementations.AdjacencyListGraph.clearCallback()
 SingleGraph <- public void org.graphstream.graph.implementations.AbstractGraph.clearElementSinks()
 SingleGraph <- public void org.graphstream.graph.implementations.AbstractGraph.clearSinks()
 SingleGraph <- protected void org.graphstream.graph.implementations.AbstractGraph.clear_(java.lang.String,long)
 SingleGraph <- public org.graphstream.ui.swingViewer.Viewer org.graphstream.graph.implementations.AbstractGraph.display()
 SingleGraph <- public org.graphstream.ui.swingViewer.Viewer org.graphstream.graph.implementations.AbstractGraph.display(boolean)
 SingleGraph <- public void org.graphstream.graph.implementations.AbstractGraph.edgeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,boolean)
 SingleGraph <- public void org.graphstream.graph.implementations.AbstractGraph.edgeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 SingleGraph <- public void org.graphstream.graph.implementations.AbstractGraph.edgeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 SingleGraph <- public void org.graphstream.graph.implementations.AbstractGraph.edgeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 SingleGraph <- public org.graphstream.graph.EdgeFactory<? extends org.graphstream.graph.Edge> org.graphstream.graph.implementations.AbstractGraph.edgeFactory()
 SingleGraph <- public void org.graphstream.graph.implementations.AbstractGraph.edgeRemoved(java.lang.String,long,java.lang.String)
 SingleGraph <- public java.lang.Iterable<org.graphstream.stream.ElementSink> org.graphstream.graph.implementations.AbstractGraph.elementSinks()
 SingleGraph <- public abstract java.lang.Object[] org.graphstream.graph.Element.getArray(java.lang.String)
 SingleGraph <- public abstract int org.graphstream.graph.Element.getAttributeCount()
 SingleGraph <- public abstract java.util.Iterator<java.lang.String> org.graphstream.graph.Element.getAttributeKeyIterator()
 SingleGraph <- public abstract java.lang.Iterable<java.lang.String> org.graphstream.graph.Element.getAttributeKeySet()
 SingleGraph <- public java.util.Collection<java.lang.String> org.graphstream.graph.implementations.AbstractElement.getAttributeKeySet()
 SingleGraph <- public java.lang.Iterable<java.lang.String> org.graphstream.graph.implementations.AbstractElement.getEachAttributeKey()
 SingleGraph <- public int org.graphstream.graph.implementations.AdjacencyListGraph.getEdgeCount()
 SingleGraph <- public abstract java.util.HashMap<?, ?> org.graphstream.graph.Element.getHash(java.lang.String)
 SingleGraph <- public abstract java.lang.String org.graphstream.graph.Element.getId()
 SingleGraph <- public abstract int org.graphstream.graph.Element.getIndex()
 SingleGraph <- public abstract java.lang.CharSequence org.graphstream.graph.Element.getLabel(java.lang.String)
 SingleGraph <- public int org.graphstream.graph.implementations.AdjacencyListGraph.getNodeCount()
 SingleGraph <- public abstract double org.graphstream.graph.Element.getNumber(java.lang.String)
 SingleGraph <- public org.graphstream.stream.Replayable$Controller org.graphstream.graph.implementations.AbstractGraph.getReplayController()
 SingleGraph <- public double org.graphstream.graph.implementations.AbstractGraph.getStep()
 SingleGraph <- public abstract java.util.ArrayList<? extends java.lang.Number> org.graphstream.graph.Element.getVector(java.lang.String)
 SingleGraph <- public void org.graphstream.graph.implementations.AbstractGraph.graphAttributeAdded(java.lang.String,long,java.lang.String,java.lang.Object)
 SingleGraph <- public void org.graphstream.graph.implementations.AbstractGraph.graphAttributeChanged(java.lang.String,long,java.lang.String,java.lang.Object,java.lang.Object)
 SingleGraph <- public void org.graphstream.graph.implementations.AbstractGraph.graphAttributeRemoved(java.lang.String,long,java.lang.String)
 SingleGraph <- public void org.graphstream.graph.implementations.AbstractGraph.graphCleared(java.lang.String,long)
 SingleGraph <- public abstract boolean org.graphstream.graph.Element.hasArray(java.lang.String)
 SingleGraph <- public abstract boolean org.graphstream.graph.Element.hasAttribute(java.lang.String)
 SingleGraph <- public abstract boolean org.graphstream.graph.Element.hasAttribute(java.lang.String,java.lang.Class<?>)
 SingleGraph <- public abstract boolean org.graphstream.graph.Element.hasHash(java.lang.String)
 SingleGraph <- public abstract boolean org.graphstream.graph.Element.hasLabel(java.lang.String)
 SingleGraph <- public abstract boolean org.graphstream.graph.Element.hasNumber(java.lang.String)
 SingleGraph <- public abstract boolean org.graphstream.graph.Element.hasVector(java.lang.String)
 SingleGraph <- public boolean org.graphstream.graph.implementations.AbstractGraph.isAutoCreationEnabled()
 SingleGraph <- public boolean org.graphstream.graph.implementations.AbstractGraph.isStrict()
 SingleGraph <- public java.util.Iterator<org.graphstream.graph.Node> org.graphstream.graph.implementations.AbstractGraph.iterator()
 SingleGraph <- protected java.lang.String org.graphstream.graph.implementations.AbstractGraph.myGraphId()
 SingleGraph <- protected long org.graphstream.graph.implementations.AbstractGraph.newEvent()
 SingleGraph <- public void org.graphstream.graph.implementations.AbstractGraph.nodeAdded(java.lang.String,long,java.lang.String)
 SingleGraph <- public void org.graphstream.graph.implementations.AbstractGraph.nodeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 SingleGraph <- public void org.graphstream.graph.implementations.AbstractGraph.nodeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 SingleGraph <- public void org.graphstream.graph.implementations.AbstractGraph.nodeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 SingleGraph <- public org.graphstream.graph.NodeFactory<? extends org.graphstream.graph.Node> org.graphstream.graph.implementations.AbstractGraph.nodeFactory()
 SingleGraph <- public void org.graphstream.graph.implementations.AbstractGraph.nodeRemoved(java.lang.String,long,java.lang.String)
 SingleGraph <- public boolean org.graphstream.graph.implementations.AbstractGraph.nullAttributesAreErrors()
 SingleGraph <- public void org.graphstream.graph.implementations.AbstractGraph.read(java.lang.String) throws java.io.IOException,org.graphstream.stream.GraphParseException,org.graphstream.graph.ElementNotFoundException
 SingleGraph <- public void org.graphstream.graph.implementations.AbstractGraph.read(org.graphstream.stream.file.FileSource,java.lang.String) throws java.io.IOException,org.graphstream.stream.GraphParseException
 SingleGraph <- public abstract void org.graphstream.graph.Element.removeAttribute(java.lang.String)
 SingleGraph <- public void org.graphstream.graph.implementations.AbstractGraph.removeAttributeSink(org.graphstream.stream.AttributeSink)
 SingleGraph <- protected void org.graphstream.graph.implementations.AbstractElement.removeAttribute_(java.lang.String,long,java.lang.String)
 SingleGraph <- protected void org.graphstream.graph.implementations.AbstractGraph.removeEdge(org.graphstream.graph.implementations.AbstractEdge,boolean,boolean,boolean)
 SingleGraph <- protected void org.graphstream.graph.implementations.AdjacencyListGraph.removeEdgeCallback(org.graphstream.graph.implementations.AbstractEdge)
 SingleGraph <- public void org.graphstream.graph.implementations.AbstractGraph.removeElementSink(org.graphstream.stream.ElementSink)
 SingleGraph <- protected void org.graphstream.graph.implementations.AbstractGraph.removeNode(org.graphstream.graph.implementations.AbstractNode,boolean)
 SingleGraph <- protected void org.graphstream.graph.implementations.AdjacencyListGraph.removeNodeCallback(org.graphstream.graph.implementations.AbstractNode)
 SingleGraph <- public void org.graphstream.graph.implementations.AbstractGraph.removeSink(org.graphstream.stream.Sink)
 SingleGraph <- public abstract void org.graphstream.graph.Element.setAttribute(java.lang.String,java.lang.Object...)
 SingleGraph <- protected void org.graphstream.graph.implementations.AbstractElement.setAttribute_(java.lang.String,long,java.lang.String,java.lang.Object...)
 SingleGraph <- public void org.graphstream.graph.implementations.AbstractGraph.setAutoCreate(boolean)
 SingleGraph <- public void org.graphstream.graph.implementations.AbstractGraph.setEdgeFactory(org.graphstream.graph.EdgeFactory<? extends org.graphstream.graph.Edge>)
 SingleGraph <- protected void org.graphstream.graph.implementations.AbstractElement.setIndex(int)
 SingleGraph <- public void org.graphstream.graph.implementations.AbstractGraph.setNodeFactory(org.graphstream.graph.NodeFactory<? extends org.graphstream.graph.Node>)
 SingleGraph <- public void org.graphstream.graph.implementations.AbstractGraph.setNullAttributesAreErrors(boolean)
 SingleGraph <- public void org.graphstream.graph.implementations.AbstractGraph.setStrict(boolean)
 SingleGraph <- public void org.graphstream.graph.implementations.AbstractGraph.stepBegins(double)
 SingleGraph <- public void org.graphstream.graph.implementations.AbstractGraph.stepBegins(java.lang.String,long,double)
 SingleGraph <- protected void org.graphstream.graph.implementations.AbstractGraph.stepBegins_(java.lang.String,long,double)
 SingleGraph <- public java.lang.String org.graphstream.graph.implementations.AbstractElement.toString()
 SingleGraph <- public void org.graphstream.graph.implementations.AbstractGraph.write(java.lang.String) throws java.io.IOException
 SingleGraph <- public void org.graphstream.graph.implementations.AbstractGraph.write(org.graphstream.stream.file.FileSink,java.lang.String) throws java.io.IOException
 Modifiers for MultiGraph: 94
 MultiGraph <- public abstract void org.graphstream.graph.Element.addAttribute(java.lang.String,java.lang.Object...)
 MultiGraph <- public void org.graphstream.graph.implementations.AbstractGraph.addAttributeSink(org.graphstream.stream.AttributeSink)
 MultiGraph <- protected void org.graphstream.graph.implementations.AbstractElement.addAttribute_(java.lang.String,long,java.lang.String,java.lang.Object...)
 MultiGraph <- public abstract void org.graphstream.graph.Element.addAttributes(java.util.Map<java.lang.String, java.lang.Object>)
 MultiGraph <- protected void org.graphstream.graph.implementations.AbstractElement.addAttributes_(java.lang.String,long,java.util.Map<java.lang.String, java.lang.Object>)
 MultiGraph <- protected void org.graphstream.graph.implementations.AdjacencyListGraph.addEdgeCallback(org.graphstream.graph.implementations.AbstractEdge)
 MultiGraph <- public void org.graphstream.graph.implementations.AbstractGraph.addElementSink(org.graphstream.stream.ElementSink)
 MultiGraph <- protected void org.graphstream.graph.implementations.AdjacencyListGraph.addNodeCallback(org.graphstream.graph.implementations.AbstractNode)
 MultiGraph <- public void org.graphstream.graph.implementations.AbstractGraph.addSink(org.graphstream.stream.Sink)
 MultiGraph <- protected void org.graphstream.graph.implementations.AbstractGraph.attributeChanged(java.lang.String,long,java.lang.String,org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent,java.lang.Object,java.lang.Object)
 MultiGraph <- public java.lang.Iterable<org.graphstream.stream.AttributeSink> org.graphstream.graph.implementations.AbstractGraph.attributeSinks()
 MultiGraph <- public abstract void org.graphstream.graph.Element.changeAttribute(java.lang.String,java.lang.Object...)
 MultiGraph <- protected void org.graphstream.graph.implementations.AbstractElement.changeAttribute_(java.lang.String,long,java.lang.String,java.lang.Object...)
 MultiGraph <- public void org.graphstream.graph.implementations.AbstractGraph.clear()
 MultiGraph <- public void org.graphstream.graph.implementations.AbstractGraph.clearAttributeSinks()
 MultiGraph <- public abstract void org.graphstream.graph.Element.clearAttributes()
 MultiGraph <- protected void org.graphstream.graph.implementations.AbstractElement.clearAttributes_(java.lang.String,long)
 MultiGraph <- protected void org.graphstream.graph.implementations.AdjacencyListGraph.clearCallback()
 MultiGraph <- public void org.graphstream.graph.implementations.AbstractGraph.clearElementSinks()
 MultiGraph <- public void org.graphstream.graph.implementations.AbstractGraph.clearSinks()
 MultiGraph <- protected void org.graphstream.graph.implementations.AbstractGraph.clear_(java.lang.String,long)
 MultiGraph <- public org.graphstream.ui.swingViewer.Viewer org.graphstream.graph.implementations.AbstractGraph.display()
 MultiGraph <- public org.graphstream.ui.swingViewer.Viewer org.graphstream.graph.implementations.AbstractGraph.display(boolean)
 MultiGraph <- public void org.graphstream.graph.implementations.AbstractGraph.edgeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,boolean)
 MultiGraph <- public void org.graphstream.graph.implementations.AbstractGraph.edgeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 MultiGraph <- public void org.graphstream.graph.implementations.AbstractGraph.edgeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 MultiGraph <- public void org.graphstream.graph.implementations.AbstractGraph.edgeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 MultiGraph <- public org.graphstream.graph.EdgeFactory<? extends org.graphstream.graph.Edge> org.graphstream.graph.implementations.AbstractGraph.edgeFactory()
 MultiGraph <- public void org.graphstream.graph.implementations.AbstractGraph.edgeRemoved(java.lang.String,long,java.lang.String)
 MultiGraph <- public java.lang.Iterable<org.graphstream.stream.ElementSink> org.graphstream.graph.implementations.AbstractGraph.elementSinks()
 MultiGraph <- public abstract java.lang.Object[] org.graphstream.graph.Element.getArray(java.lang.String)
 MultiGraph <- public abstract int org.graphstream.graph.Element.getAttributeCount()
 MultiGraph <- public abstract java.util.Iterator<java.lang.String> org.graphstream.graph.Element.getAttributeKeyIterator()
 MultiGraph <- public abstract java.lang.Iterable<java.lang.String> org.graphstream.graph.Element.getAttributeKeySet()
 MultiGraph <- public java.util.Collection<java.lang.String> org.graphstream.graph.implementations.AbstractElement.getAttributeKeySet()
 MultiGraph <- public java.lang.Iterable<java.lang.String> org.graphstream.graph.implementations.AbstractElement.getEachAttributeKey()
 MultiGraph <- public int org.graphstream.graph.implementations.AdjacencyListGraph.getEdgeCount()
 MultiGraph <- public abstract java.util.HashMap<?, ?> org.graphstream.graph.Element.getHash(java.lang.String)
 MultiGraph <- public abstract java.lang.String org.graphstream.graph.Element.getId()
 MultiGraph <- public abstract int org.graphstream.graph.Element.getIndex()
 MultiGraph <- public abstract java.lang.CharSequence org.graphstream.graph.Element.getLabel(java.lang.String)
 MultiGraph <- public int org.graphstream.graph.implementations.AdjacencyListGraph.getNodeCount()
 MultiGraph <- public abstract double org.graphstream.graph.Element.getNumber(java.lang.String)
 MultiGraph <- public org.graphstream.stream.Replayable$Controller org.graphstream.graph.implementations.AbstractGraph.getReplayController()
 MultiGraph <- public double org.graphstream.graph.implementations.AbstractGraph.getStep()
 MultiGraph <- public abstract java.util.ArrayList<? extends java.lang.Number> org.graphstream.graph.Element.getVector(java.lang.String)
 MultiGraph <- public void org.graphstream.graph.implementations.AbstractGraph.graphAttributeAdded(java.lang.String,long,java.lang.String,java.lang.Object)
 MultiGraph <- public void org.graphstream.graph.implementations.AbstractGraph.graphAttributeChanged(java.lang.String,long,java.lang.String,java.lang.Object,java.lang.Object)
 MultiGraph <- public void org.graphstream.graph.implementations.AbstractGraph.graphAttributeRemoved(java.lang.String,long,java.lang.String)
 MultiGraph <- public void org.graphstream.graph.implementations.AbstractGraph.graphCleared(java.lang.String,long)
 MultiGraph <- public abstract boolean org.graphstream.graph.Element.hasArray(java.lang.String)
 MultiGraph <- public abstract boolean org.graphstream.graph.Element.hasAttribute(java.lang.String)
 MultiGraph <- public abstract boolean org.graphstream.graph.Element.hasAttribute(java.lang.String,java.lang.Class<?>)
 MultiGraph <- public abstract boolean org.graphstream.graph.Element.hasHash(java.lang.String)
 MultiGraph <- public abstract boolean org.graphstream.graph.Element.hasLabel(java.lang.String)
 MultiGraph <- public abstract boolean org.graphstream.graph.Element.hasNumber(java.lang.String)
 MultiGraph <- public abstract boolean org.graphstream.graph.Element.hasVector(java.lang.String)
 MultiGraph <- public boolean org.graphstream.graph.implementations.AbstractGraph.isAutoCreationEnabled()
 MultiGraph <- public boolean org.graphstream.graph.implementations.AbstractGraph.isStrict()
 MultiGraph <- public java.util.Iterator<org.graphstream.graph.Node> org.graphstream.graph.implementations.AbstractGraph.iterator()
 MultiGraph <- protected java.lang.String org.graphstream.graph.implementations.AbstractGraph.myGraphId()
 MultiGraph <- protected long org.graphstream.graph.implementations.AbstractGraph.newEvent()
 MultiGraph <- public void org.graphstream.graph.implementations.AbstractGraph.nodeAdded(java.lang.String,long,java.lang.String)
 MultiGraph <- public void org.graphstream.graph.implementations.AbstractGraph.nodeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 MultiGraph <- public void org.graphstream.graph.implementations.AbstractGraph.nodeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 MultiGraph <- public void org.graphstream.graph.implementations.AbstractGraph.nodeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 MultiGraph <- public org.graphstream.graph.NodeFactory<? extends org.graphstream.graph.Node> org.graphstream.graph.implementations.AbstractGraph.nodeFactory()
 MultiGraph <- public void org.graphstream.graph.implementations.AbstractGraph.nodeRemoved(java.lang.String,long,java.lang.String)
 MultiGraph <- public boolean org.graphstream.graph.implementations.AbstractGraph.nullAttributesAreErrors()
 MultiGraph <- public void org.graphstream.graph.implementations.AbstractGraph.read(java.lang.String) throws java.io.IOException,org.graphstream.stream.GraphParseException,org.graphstream.graph.ElementNotFoundException
 MultiGraph <- public void org.graphstream.graph.implementations.AbstractGraph.read(org.graphstream.stream.file.FileSource,java.lang.String) throws java.io.IOException,org.graphstream.stream.GraphParseException
 MultiGraph <- public abstract void org.graphstream.graph.Element.removeAttribute(java.lang.String)
 MultiGraph <- public void org.graphstream.graph.implementations.AbstractGraph.removeAttributeSink(org.graphstream.stream.AttributeSink)
 MultiGraph <- protected void org.graphstream.graph.implementations.AbstractElement.removeAttribute_(java.lang.String,long,java.lang.String)
 MultiGraph <- protected void org.graphstream.graph.implementations.AbstractGraph.removeEdge(org.graphstream.graph.implementations.AbstractEdge,boolean,boolean,boolean)
 MultiGraph <- protected void org.graphstream.graph.implementations.AdjacencyListGraph.removeEdgeCallback(org.graphstream.graph.implementations.AbstractEdge)
 MultiGraph <- public void org.graphstream.graph.implementations.AbstractGraph.removeElementSink(org.graphstream.stream.ElementSink)
 MultiGraph <- protected void org.graphstream.graph.implementations.AbstractGraph.removeNode(org.graphstream.graph.implementations.AbstractNode,boolean)
 MultiGraph <- protected void org.graphstream.graph.implementations.AdjacencyListGraph.removeNodeCallback(org.graphstream.graph.implementations.AbstractNode)
 MultiGraph <- public void org.graphstream.graph.implementations.AbstractGraph.removeSink(org.graphstream.stream.Sink)
 MultiGraph <- public abstract void org.graphstream.graph.Element.setAttribute(java.lang.String,java.lang.Object...)
 MultiGraph <- protected void org.graphstream.graph.implementations.AbstractElement.setAttribute_(java.lang.String,long,java.lang.String,java.lang.Object...)
 MultiGraph <- public void org.graphstream.graph.implementations.AbstractGraph.setAutoCreate(boolean)
 MultiGraph <- public void org.graphstream.graph.implementations.AbstractGraph.setEdgeFactory(org.graphstream.graph.EdgeFactory<? extends org.graphstream.graph.Edge>)
 MultiGraph <- protected void org.graphstream.graph.implementations.AbstractElement.setIndex(int)
 MultiGraph <- public void org.graphstream.graph.implementations.AbstractGraph.setNodeFactory(org.graphstream.graph.NodeFactory<? extends org.graphstream.graph.Node>)
 MultiGraph <- public void org.graphstream.graph.implementations.AbstractGraph.setNullAttributesAreErrors(boolean)
 MultiGraph <- public void org.graphstream.graph.implementations.AbstractGraph.setStrict(boolean)
 MultiGraph <- public void org.graphstream.graph.implementations.AbstractGraph.stepBegins(double)
 MultiGraph <- public void org.graphstream.graph.implementations.AbstractGraph.stepBegins(java.lang.String,long,double)
 MultiGraph <- protected void org.graphstream.graph.implementations.AbstractGraph.stepBegins_(java.lang.String,long,double)
 MultiGraph <- public java.lang.String org.graphstream.graph.implementations.AbstractElement.toString()
 MultiGraph <- public void org.graphstream.graph.implementations.AbstractGraph.write(java.lang.String) throws java.io.IOException
 MultiGraph <- public void org.graphstream.graph.implementations.AbstractGraph.write(org.graphstream.stream.file.FileSink,java.lang.String) throws java.io.IOException
 Modifiers for DefaultGraph: 94
 DefaultGraph <- public abstract void org.graphstream.graph.Element.addAttribute(java.lang.String,java.lang.Object...)
 DefaultGraph <- public void org.graphstream.graph.implementations.AbstractGraph.addAttributeSink(org.graphstream.stream.AttributeSink)
 DefaultGraph <- protected void org.graphstream.graph.implementations.AbstractElement.addAttribute_(java.lang.String,long,java.lang.String,java.lang.Object...)
 DefaultGraph <- public abstract void org.graphstream.graph.Element.addAttributes(java.util.Map<java.lang.String, java.lang.Object>)
 DefaultGraph <- protected void org.graphstream.graph.implementations.AbstractElement.addAttributes_(java.lang.String,long,java.util.Map<java.lang.String, java.lang.Object>)
 DefaultGraph <- protected void org.graphstream.graph.implementations.AdjacencyListGraph.addEdgeCallback(org.graphstream.graph.implementations.AbstractEdge)
 DefaultGraph <- public void org.graphstream.graph.implementations.AbstractGraph.addElementSink(org.graphstream.stream.ElementSink)
 DefaultGraph <- protected void org.graphstream.graph.implementations.AdjacencyListGraph.addNodeCallback(org.graphstream.graph.implementations.AbstractNode)
 DefaultGraph <- public void org.graphstream.graph.implementations.AbstractGraph.addSink(org.graphstream.stream.Sink)
 DefaultGraph <- protected void org.graphstream.graph.implementations.AbstractGraph.attributeChanged(java.lang.String,long,java.lang.String,org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent,java.lang.Object,java.lang.Object)
 DefaultGraph <- public java.lang.Iterable<org.graphstream.stream.AttributeSink> org.graphstream.graph.implementations.AbstractGraph.attributeSinks()
 DefaultGraph <- public abstract void org.graphstream.graph.Element.changeAttribute(java.lang.String,java.lang.Object...)
 DefaultGraph <- protected void org.graphstream.graph.implementations.AbstractElement.changeAttribute_(java.lang.String,long,java.lang.String,java.lang.Object...)
 DefaultGraph <- public void org.graphstream.graph.implementations.AbstractGraph.clear()
 DefaultGraph <- public void org.graphstream.graph.implementations.AbstractGraph.clearAttributeSinks()
 DefaultGraph <- public abstract void org.graphstream.graph.Element.clearAttributes()
 DefaultGraph <- protected void org.graphstream.graph.implementations.AbstractElement.clearAttributes_(java.lang.String,long)
 DefaultGraph <- protected void org.graphstream.graph.implementations.AdjacencyListGraph.clearCallback()
 DefaultGraph <- public void org.graphstream.graph.implementations.AbstractGraph.clearElementSinks()
 DefaultGraph <- public void org.graphstream.graph.implementations.AbstractGraph.clearSinks()
 DefaultGraph <- protected void org.graphstream.graph.implementations.AbstractGraph.clear_(java.lang.String,long)
 DefaultGraph <- public org.graphstream.ui.swingViewer.Viewer org.graphstream.graph.implementations.AbstractGraph.display()
 DefaultGraph <- public org.graphstream.ui.swingViewer.Viewer org.graphstream.graph.implementations.AbstractGraph.display(boolean)
 DefaultGraph <- public void org.graphstream.graph.implementations.AbstractGraph.edgeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,boolean)
 DefaultGraph <- public void org.graphstream.graph.implementations.AbstractGraph.edgeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 DefaultGraph <- public void org.graphstream.graph.implementations.AbstractGraph.edgeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 DefaultGraph <- public void org.graphstream.graph.implementations.AbstractGraph.edgeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 DefaultGraph <- public org.graphstream.graph.EdgeFactory<? extends org.graphstream.graph.Edge> org.graphstream.graph.implementations.AbstractGraph.edgeFactory()
 DefaultGraph <- public void org.graphstream.graph.implementations.AbstractGraph.edgeRemoved(java.lang.String,long,java.lang.String)
 DefaultGraph <- public java.lang.Iterable<org.graphstream.stream.ElementSink> org.graphstream.graph.implementations.AbstractGraph.elementSinks()
 DefaultGraph <- public abstract java.lang.Object[] org.graphstream.graph.Element.getArray(java.lang.String)
 DefaultGraph <- public abstract int org.graphstream.graph.Element.getAttributeCount()
 DefaultGraph <- public abstract java.util.Iterator<java.lang.String> org.graphstream.graph.Element.getAttributeKeyIterator()
 DefaultGraph <- public abstract java.lang.Iterable<java.lang.String> org.graphstream.graph.Element.getAttributeKeySet()
 DefaultGraph <- public java.util.Collection<java.lang.String> org.graphstream.graph.implementations.AbstractElement.getAttributeKeySet()
 DefaultGraph <- public java.lang.Iterable<java.lang.String> org.graphstream.graph.implementations.AbstractElement.getEachAttributeKey()
 DefaultGraph <- public int org.graphstream.graph.implementations.AdjacencyListGraph.getEdgeCount()
 DefaultGraph <- public abstract java.util.HashMap<?, ?> org.graphstream.graph.Element.getHash(java.lang.String)
 DefaultGraph <- public abstract java.lang.String org.graphstream.graph.Element.getId()
 DefaultGraph <- public abstract int org.graphstream.graph.Element.getIndex()
 DefaultGraph <- public abstract java.lang.CharSequence org.graphstream.graph.Element.getLabel(java.lang.String)
 DefaultGraph <- public int org.graphstream.graph.implementations.AdjacencyListGraph.getNodeCount()
 DefaultGraph <- public abstract double org.graphstream.graph.Element.getNumber(java.lang.String)
 DefaultGraph <- public org.graphstream.stream.Replayable$Controller org.graphstream.graph.implementations.AbstractGraph.getReplayController()
 DefaultGraph <- public double org.graphstream.graph.implementations.AbstractGraph.getStep()
 DefaultGraph <- public abstract java.util.ArrayList<? extends java.lang.Number> org.graphstream.graph.Element.getVector(java.lang.String)
 DefaultGraph <- public void org.graphstream.graph.implementations.AbstractGraph.graphAttributeAdded(java.lang.String,long,java.lang.String,java.lang.Object)
 DefaultGraph <- public void org.graphstream.graph.implementations.AbstractGraph.graphAttributeChanged(java.lang.String,long,java.lang.String,java.lang.Object,java.lang.Object)
 DefaultGraph <- public void org.graphstream.graph.implementations.AbstractGraph.graphAttributeRemoved(java.lang.String,long,java.lang.String)
 DefaultGraph <- public void org.graphstream.graph.implementations.AbstractGraph.graphCleared(java.lang.String,long)
 DefaultGraph <- public abstract boolean org.graphstream.graph.Element.hasArray(java.lang.String)
 DefaultGraph <- public abstract boolean org.graphstream.graph.Element.hasAttribute(java.lang.String)
 DefaultGraph <- public abstract boolean org.graphstream.graph.Element.hasAttribute(java.lang.String,java.lang.Class<?>)
 DefaultGraph <- public abstract boolean org.graphstream.graph.Element.hasHash(java.lang.String)
 DefaultGraph <- public abstract boolean org.graphstream.graph.Element.hasLabel(java.lang.String)
 DefaultGraph <- public abstract boolean org.graphstream.graph.Element.hasNumber(java.lang.String)
 DefaultGraph <- public abstract boolean org.graphstream.graph.Element.hasVector(java.lang.String)
 DefaultGraph <- public boolean org.graphstream.graph.implementations.AbstractGraph.isAutoCreationEnabled()
 DefaultGraph <- public boolean org.graphstream.graph.implementations.AbstractGraph.isStrict()
 DefaultGraph <- public java.util.Iterator<org.graphstream.graph.Node> org.graphstream.graph.implementations.AbstractGraph.iterator()
 DefaultGraph <- protected java.lang.String org.graphstream.graph.implementations.AbstractGraph.myGraphId()
 DefaultGraph <- protected long org.graphstream.graph.implementations.AbstractGraph.newEvent()
 DefaultGraph <- public void org.graphstream.graph.implementations.AbstractGraph.nodeAdded(java.lang.String,long,java.lang.String)
 DefaultGraph <- public void org.graphstream.graph.implementations.AbstractGraph.nodeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 DefaultGraph <- public void org.graphstream.graph.implementations.AbstractGraph.nodeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 DefaultGraph <- public void org.graphstream.graph.implementations.AbstractGraph.nodeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 DefaultGraph <- public org.graphstream.graph.NodeFactory<? extends org.graphstream.graph.Node> org.graphstream.graph.implementations.AbstractGraph.nodeFactory()
 DefaultGraph <- public void org.graphstream.graph.implementations.AbstractGraph.nodeRemoved(java.lang.String,long,java.lang.String)
 DefaultGraph <- public boolean org.graphstream.graph.implementations.AbstractGraph.nullAttributesAreErrors()
 DefaultGraph <- public void org.graphstream.graph.implementations.AbstractGraph.read(java.lang.String) throws java.io.IOException,org.graphstream.stream.GraphParseException,org.graphstream.graph.ElementNotFoundException
 DefaultGraph <- public void org.graphstream.graph.implementations.AbstractGraph.read(org.graphstream.stream.file.FileSource,java.lang.String) throws java.io.IOException,org.graphstream.stream.GraphParseException
 DefaultGraph <- public abstract void org.graphstream.graph.Element.removeAttribute(java.lang.String)
 DefaultGraph <- public void org.graphstream.graph.implementations.AbstractGraph.removeAttributeSink(org.graphstream.stream.AttributeSink)
 DefaultGraph <- protected void org.graphstream.graph.implementations.AbstractElement.removeAttribute_(java.lang.String,long,java.lang.String)
 DefaultGraph <- protected void org.graphstream.graph.implementations.AbstractGraph.removeEdge(org.graphstream.graph.implementations.AbstractEdge,boolean,boolean,boolean)
 DefaultGraph <- protected void org.graphstream.graph.implementations.AdjacencyListGraph.removeEdgeCallback(org.graphstream.graph.implementations.AbstractEdge)
 DefaultGraph <- public void org.graphstream.graph.implementations.AbstractGraph.removeElementSink(org.graphstream.stream.ElementSink)
 DefaultGraph <- protected void org.graphstream.graph.implementations.AbstractGraph.removeNode(org.graphstream.graph.implementations.AbstractNode,boolean)
 DefaultGraph <- protected void org.graphstream.graph.implementations.AdjacencyListGraph.removeNodeCallback(org.graphstream.graph.implementations.AbstractNode)
 DefaultGraph <- public void org.graphstream.graph.implementations.AbstractGraph.removeSink(org.graphstream.stream.Sink)
 DefaultGraph <- public abstract void org.graphstream.graph.Element.setAttribute(java.lang.String,java.lang.Object...)
 DefaultGraph <- protected void org.graphstream.graph.implementations.AbstractElement.setAttribute_(java.lang.String,long,java.lang.String,java.lang.Object...)
 DefaultGraph <- public void org.graphstream.graph.implementations.AbstractGraph.setAutoCreate(boolean)
 DefaultGraph <- public void org.graphstream.graph.implementations.AbstractGraph.setEdgeFactory(org.graphstream.graph.EdgeFactory<? extends org.graphstream.graph.Edge>)
 DefaultGraph <- protected void org.graphstream.graph.implementations.AbstractElement.setIndex(int)
 DefaultGraph <- public void org.graphstream.graph.implementations.AbstractGraph.setNodeFactory(org.graphstream.graph.NodeFactory<? extends org.graphstream.graph.Node>)
 DefaultGraph <- public void org.graphstream.graph.implementations.AbstractGraph.setNullAttributesAreErrors(boolean)
 DefaultGraph <- public void org.graphstream.graph.implementations.AbstractGraph.setStrict(boolean)
 DefaultGraph <- public void org.graphstream.graph.implementations.AbstractGraph.stepBegins(double)
 DefaultGraph <- public void org.graphstream.graph.implementations.AbstractGraph.stepBegins(java.lang.String,long,double)
 DefaultGraph <- protected void org.graphstream.graph.implementations.AbstractGraph.stepBegins_(java.lang.String,long,double)
 DefaultGraph <- public java.lang.String org.graphstream.graph.implementations.AbstractElement.toString()
 DefaultGraph <- public void org.graphstream.graph.implementations.AbstractGraph.write(java.lang.String) throws java.io.IOException
 DefaultGraph <- public void org.graphstream.graph.implementations.AbstractGraph.write(org.graphstream.stream.file.FileSink,java.lang.String) throws java.io.IOException
 Modifiers for AbstractElement.AttributeChangeEvent: 2
 AbstractElement.AttributeChangeEvent <- public static org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent.valueOf(java.lang.String)
 AbstractElement.AttributeChangeEvent <- public static org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent[] org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent.values()
 Modifiers for SinkAdapter: 15
 SinkAdapter <- public void org.graphstream.stream.SinkAdapter.edgeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,boolean)
 SinkAdapter <- public void org.graphstream.stream.SinkAdapter.edgeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 SinkAdapter <- public void org.graphstream.stream.SinkAdapter.edgeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 SinkAdapter <- public void org.graphstream.stream.SinkAdapter.edgeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 SinkAdapter <- public void org.graphstream.stream.SinkAdapter.edgeRemoved(java.lang.String,long,java.lang.String)
 SinkAdapter <- public void org.graphstream.stream.SinkAdapter.graphAttributeAdded(java.lang.String,long,java.lang.String,java.lang.Object)
 SinkAdapter <- public void org.graphstream.stream.SinkAdapter.graphAttributeChanged(java.lang.String,long,java.lang.String,java.lang.Object,java.lang.Object)
 SinkAdapter <- public void org.graphstream.stream.SinkAdapter.graphAttributeRemoved(java.lang.String,long,java.lang.String)
 SinkAdapter <- public void org.graphstream.stream.SinkAdapter.graphCleared(java.lang.String,long)
 SinkAdapter <- public void org.graphstream.stream.SinkAdapter.nodeAdded(java.lang.String,long,java.lang.String)
 SinkAdapter <- public void org.graphstream.stream.SinkAdapter.nodeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 SinkAdapter <- public void org.graphstream.stream.SinkAdapter.nodeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 SinkAdapter <- public void org.graphstream.stream.SinkAdapter.nodeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 SinkAdapter <- public void org.graphstream.stream.SinkAdapter.nodeRemoved(java.lang.String,long,java.lang.String)
 SinkAdapter <- public void org.graphstream.stream.SinkAdapter.stepBegins(java.lang.String,long,double)
 Modifiers for Timeline: 77
 Timeline <- public void org.graphstream.stream.SourceBase.addAttributeSink(org.graphstream.stream.AttributeSink)
 Timeline <- public void org.graphstream.stream.Timeline.addEdgeAt(long,java.lang.String,java.lang.String,java.lang.String,boolean)
 Timeline <- public void org.graphstream.stream.Timeline.addEdgeAttributeAt(long,java.lang.String,java.lang.String,java.lang.Object)
 Timeline <- public void org.graphstream.stream.SourceBase.addElementSink(org.graphstream.stream.ElementSink)
 Timeline <- public void org.graphstream.stream.Timeline.addGraphAttributeAt(long,java.lang.String,java.lang.Object)
 Timeline <- public void org.graphstream.stream.Timeline.addNodeAt(long,java.lang.String)
 Timeline <- public void org.graphstream.stream.Timeline.addNodeAttributeAt(long,java.lang.String,java.lang.String,java.lang.Object)
 Timeline <- public void org.graphstream.stream.SourceBase.addSink(org.graphstream.stream.Sink)
 Timeline <- public java.lang.Iterable<org.graphstream.stream.AttributeSink> org.graphstream.stream.SourceBase.attributeSinks()
 Timeline <- public void org.graphstream.stream.Timeline.changeEdgeAttributeAt(long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 Timeline <- public void org.graphstream.stream.Timeline.changeGraphAttributeAt(long,java.lang.String,java.lang.Object,java.lang.Object)
 Timeline <- public void org.graphstream.stream.Timeline.changeNodeAttributeAt(long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 Timeline <- public void org.graphstream.stream.SourceBase.clearAttributeSinks()
 Timeline <- public void org.graphstream.stream.SourceBase.clearElementSinks()
 Timeline <- public void org.graphstream.stream.Timeline.clearGraphAt(long)
 Timeline <- public void org.graphstream.stream.SourceBase.clearSinks()
 Timeline <- public void org.graphstream.stream.Timeline.edgeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,boolean)
 Timeline <- public void org.graphstream.stream.Timeline.edgeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 Timeline <- public void org.graphstream.stream.Timeline.edgeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 Timeline <- public void org.graphstream.stream.Timeline.edgeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 Timeline <- public void org.graphstream.stream.Timeline.edgeRemoved(java.lang.String,long,java.lang.String)
 Timeline <- public java.lang.Iterable<org.graphstream.stream.ElementSink> org.graphstream.stream.SourceBase.elementSinks()
 Timeline <- public void org.graphstream.stream.Timeline.graphAttributeAdded(java.lang.String,long,java.lang.String,java.lang.Object)
 Timeline <- public void org.graphstream.stream.Timeline.graphAttributeChanged(java.lang.String,long,java.lang.String,java.lang.Object,java.lang.Object)
 Timeline <- public void org.graphstream.stream.Timeline.graphAttributeRemoved(java.lang.String,long,java.lang.String)
 Timeline <- public void org.graphstream.stream.Timeline.graphCleared(java.lang.String,long)
 Timeline <- public boolean org.graphstream.stream.Timeline.next()
 Timeline <- public void org.graphstream.stream.Timeline.nodeAdded(java.lang.String,long,java.lang.String)
 Timeline <- public void org.graphstream.stream.Timeline.nodeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 Timeline <- public void org.graphstream.stream.Timeline.nodeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 Timeline <- public void org.graphstream.stream.Timeline.nodeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 Timeline <- public void org.graphstream.stream.Timeline.nodeRemoved(java.lang.String,long,java.lang.String)
 Timeline <- public void org.graphstream.stream.Timeline.play(long,long)
 Timeline <- public void org.graphstream.stream.Timeline.playAll()
 Timeline <- public void org.graphstream.stream.SourceBase.removeAttributeSink(org.graphstream.stream.AttributeSink)
 Timeline <- public void org.graphstream.stream.Timeline.removeEdgeAt(long,java.lang.String)
 Timeline <- public void org.graphstream.stream.Timeline.removeEdgeAttributeAt(long,java.lang.String,java.lang.String)
 Timeline <- public void org.graphstream.stream.SourceBase.removeElementSink(org.graphstream.stream.ElementSink)
 Timeline <- public void org.graphstream.stream.Timeline.removeGraphAttributeAt(long,java.lang.String)
 Timeline <- public void org.graphstream.stream.Timeline.removeNodeAt(long,java.lang.String)
 Timeline <- public void org.graphstream.stream.Timeline.removeNodeAttributeAt(long,java.lang.String,java.lang.String)
 Timeline <- public void org.graphstream.stream.SourceBase.removeSink(org.graphstream.stream.Sink)
 Timeline <- public void org.graphstream.stream.Timeline.reset()
 Timeline <- public void org.graphstream.stream.SourceBase.sendAttributeChangedEvent(java.lang.String,long,java.lang.String,org.graphstream.stream.SourceBase$ElementType,java.lang.String,org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent,java.lang.Object,java.lang.Object)
 Timeline <- public void org.graphstream.stream.SourceBase.sendAttributeChangedEvent(java.lang.String,java.lang.String,org.graphstream.stream.SourceBase$ElementType,java.lang.String,org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent,java.lang.Object,java.lang.Object)
 Timeline <- public void org.graphstream.stream.SourceBase.sendEdgeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,boolean)
 Timeline <- public void org.graphstream.stream.SourceBase.sendEdgeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)
 Timeline <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 Timeline <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
 Timeline <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 Timeline <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeChanged(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 Timeline <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 Timeline <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeRemoved(java.lang.String,java.lang.String,java.lang.String)
 Timeline <- public void org.graphstream.stream.SourceBase.sendEdgeRemoved(java.lang.String,long,java.lang.String)
 Timeline <- public void org.graphstream.stream.SourceBase.sendEdgeRemoved(java.lang.String,java.lang.String)
 Timeline <- public void org.graphstream.stream.SourceBase.sendGraphAttributeAdded(java.lang.String,long,java.lang.String,java.lang.Object)
 Timeline <- public void org.graphstream.stream.SourceBase.sendGraphAttributeAdded(java.lang.String,java.lang.String,java.lang.Object)
 Timeline <- public void org.graphstream.stream.SourceBase.sendGraphAttributeChanged(java.lang.String,long,java.lang.String,java.lang.Object,java.lang.Object)
 Timeline <- public void org.graphstream.stream.SourceBase.sendGraphAttributeChanged(java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 Timeline <- public void org.graphstream.stream.SourceBase.sendGraphAttributeRemoved(java.lang.String,long,java.lang.String)
 Timeline <- public void org.graphstream.stream.SourceBase.sendGraphAttributeRemoved(java.lang.String,java.lang.String)
 Timeline <- public void org.graphstream.stream.SourceBase.sendGraphCleared(java.lang.String)
 Timeline <- public void org.graphstream.stream.SourceBase.sendGraphCleared(java.lang.String,long)
 Timeline <- public void org.graphstream.stream.SourceBase.sendNodeAdded(java.lang.String,long,java.lang.String)
 Timeline <- public void org.graphstream.stream.SourceBase.sendNodeAdded(java.lang.String,java.lang.String)
 Timeline <- public void org.graphstream.stream.SourceBase.sendNodeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 Timeline <- public void org.graphstream.stream.SourceBase.sendNodeAttributeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
 Timeline <- public void org.graphstream.stream.SourceBase.sendNodeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 Timeline <- public void org.graphstream.stream.SourceBase.sendNodeAttributeChanged(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 Timeline <- public void org.graphstream.stream.SourceBase.sendNodeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 Timeline <- public void org.graphstream.stream.SourceBase.sendNodeAttributeRemoved(java.lang.String,java.lang.String,java.lang.String)
 Timeline <- public void org.graphstream.stream.SourceBase.sendNodeRemoved(java.lang.String,long,java.lang.String)
 Timeline <- public void org.graphstream.stream.SourceBase.sendNodeRemoved(java.lang.String,java.lang.String)
 Timeline <- public void org.graphstream.stream.SourceBase.sendStepBegins(java.lang.String,double)
 Timeline <- public void org.graphstream.stream.SourceBase.sendStepBegins(java.lang.String,long,double)
 Timeline <- public void org.graphstream.stream.Timeline.stepBegins(java.lang.String,long,double)
 Timeline <- public void org.graphstream.stream.Timeline.stepBeginsAt(long,double)
 Modifiers for PipeBase: 58
 PipeBase <- public abstract void org.graphstream.stream.Source.addAttributeSink(org.graphstream.stream.AttributeSink)
 PipeBase <- public abstract void org.graphstream.stream.Source.addElementSink(org.graphstream.stream.ElementSink)
 PipeBase <- public abstract void org.graphstream.stream.Source.addSink(org.graphstream.stream.Sink)
 PipeBase <- public java.lang.Iterable<org.graphstream.stream.AttributeSink> org.graphstream.stream.SourceBase.attributeSinks()
 PipeBase <- public abstract void org.graphstream.stream.Source.clearAttributeSinks()
 PipeBase <- public abstract void org.graphstream.stream.Source.clearElementSinks()
 PipeBase <- public abstract void org.graphstream.stream.Source.clearSinks()
 PipeBase <- public void org.graphstream.stream.PipeBase.edgeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,boolean)
 PipeBase <- public void org.graphstream.stream.PipeBase.edgeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 PipeBase <- public void org.graphstream.stream.PipeBase.edgeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 PipeBase <- public void org.graphstream.stream.PipeBase.edgeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 PipeBase <- public void org.graphstream.stream.PipeBase.edgeRemoved(java.lang.String,long,java.lang.String)
 PipeBase <- public java.lang.Iterable<org.graphstream.stream.ElementSink> org.graphstream.stream.SourceBase.elementSinks()
 PipeBase <- public void org.graphstream.stream.PipeBase.graphAttributeAdded(java.lang.String,long,java.lang.String,java.lang.Object)
 PipeBase <- public void org.graphstream.stream.PipeBase.graphAttributeChanged(java.lang.String,long,java.lang.String,java.lang.Object,java.lang.Object)
 PipeBase <- public void org.graphstream.stream.PipeBase.graphAttributeRemoved(java.lang.String,long,java.lang.String)
 PipeBase <- public void org.graphstream.stream.PipeBase.graphCleared(java.lang.String,long)
 PipeBase <- public void org.graphstream.stream.PipeBase.nodeAdded(java.lang.String,long,java.lang.String)
 PipeBase <- public void org.graphstream.stream.PipeBase.nodeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 PipeBase <- public void org.graphstream.stream.PipeBase.nodeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 PipeBase <- public void org.graphstream.stream.PipeBase.nodeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 PipeBase <- public void org.graphstream.stream.PipeBase.nodeRemoved(java.lang.String,long,java.lang.String)
 PipeBase <- public abstract void org.graphstream.stream.Source.removeAttributeSink(org.graphstream.stream.AttributeSink)
 PipeBase <- public abstract void org.graphstream.stream.Source.removeElementSink(org.graphstream.stream.ElementSink)
 PipeBase <- public abstract void org.graphstream.stream.Source.removeSink(org.graphstream.stream.Sink)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendAttributeChangedEvent(java.lang.String,long,java.lang.String,org.graphstream.stream.SourceBase$ElementType,java.lang.String,org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent,java.lang.Object,java.lang.Object)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendAttributeChangedEvent(java.lang.String,java.lang.String,org.graphstream.stream.SourceBase$ElementType,java.lang.String,org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent,java.lang.Object,java.lang.Object)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendEdgeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,boolean)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendEdgeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeChanged(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeRemoved(java.lang.String,java.lang.String,java.lang.String)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendEdgeRemoved(java.lang.String,long,java.lang.String)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendEdgeRemoved(java.lang.String,java.lang.String)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendGraphAttributeAdded(java.lang.String,long,java.lang.String,java.lang.Object)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendGraphAttributeAdded(java.lang.String,java.lang.String,java.lang.Object)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendGraphAttributeChanged(java.lang.String,long,java.lang.String,java.lang.Object,java.lang.Object)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendGraphAttributeChanged(java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendGraphAttributeRemoved(java.lang.String,long,java.lang.String)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendGraphAttributeRemoved(java.lang.String,java.lang.String)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendGraphCleared(java.lang.String)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendGraphCleared(java.lang.String,long)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendNodeAdded(java.lang.String,long,java.lang.String)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendNodeAdded(java.lang.String,java.lang.String)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendNodeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendNodeAttributeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendNodeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendNodeAttributeChanged(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendNodeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendNodeAttributeRemoved(java.lang.String,java.lang.String,java.lang.String)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendNodeRemoved(java.lang.String,long,java.lang.String)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendNodeRemoved(java.lang.String,java.lang.String)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendStepBegins(java.lang.String,double)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendStepBegins(java.lang.String,long,double)
 PipeBase <- public void org.graphstream.stream.PipeBase.stepBegins(java.lang.String,long,double)
 Modifiers for PipeAdapter: 24
 PipeAdapter <- public void org.graphstream.stream.PipeAdapter.addAttributeSink(org.graphstream.stream.AttributeSink)
 PipeAdapter <- public void org.graphstream.stream.PipeAdapter.addElementSink(org.graphstream.stream.ElementSink)
 PipeAdapter <- public void org.graphstream.stream.PipeAdapter.addSink(org.graphstream.stream.Sink)
 PipeAdapter <- public void org.graphstream.stream.PipeAdapter.clearAttributeSinks()
 PipeAdapter <- public void org.graphstream.stream.PipeAdapter.clearElementSinks()
 PipeAdapter <- public void org.graphstream.stream.PipeAdapter.clearSinks()
 PipeAdapter <- public void org.graphstream.stream.PipeAdapter.edgeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,boolean)
 PipeAdapter <- public void org.graphstream.stream.PipeAdapter.edgeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 PipeAdapter <- public void org.graphstream.stream.PipeAdapter.edgeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 PipeAdapter <- public void org.graphstream.stream.PipeAdapter.edgeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 PipeAdapter <- public void org.graphstream.stream.PipeAdapter.edgeRemoved(java.lang.String,long,java.lang.String)
 PipeAdapter <- public void org.graphstream.stream.PipeAdapter.graphAttributeAdded(java.lang.String,long,java.lang.String,java.lang.Object)
 PipeAdapter <- public void org.graphstream.stream.PipeAdapter.graphAttributeChanged(java.lang.String,long,java.lang.String,java.lang.Object,java.lang.Object)
 PipeAdapter <- public void org.graphstream.stream.PipeAdapter.graphAttributeRemoved(java.lang.String,long,java.lang.String)
 PipeAdapter <- public void org.graphstream.stream.PipeAdapter.graphCleared(java.lang.String,long)
 PipeAdapter <- public void org.graphstream.stream.PipeAdapter.nodeAdded(java.lang.String,long,java.lang.String)
 PipeAdapter <- public void org.graphstream.stream.PipeAdapter.nodeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 PipeAdapter <- public void org.graphstream.stream.PipeAdapter.nodeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 PipeAdapter <- public void org.graphstream.stream.PipeAdapter.nodeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 PipeAdapter <- public void org.graphstream.stream.PipeAdapter.nodeRemoved(java.lang.String,long,java.lang.String)
 PipeAdapter <- public void org.graphstream.stream.PipeAdapter.removeAttributeSink(org.graphstream.stream.AttributeSink)
 PipeAdapter <- public void org.graphstream.stream.PipeAdapter.removeElementSink(org.graphstream.stream.ElementSink)
 PipeAdapter <- public void org.graphstream.stream.PipeAdapter.removeSink(org.graphstream.stream.Sink)
 PipeAdapter <- public void org.graphstream.stream.PipeAdapter.stepBegins(java.lang.String,long,double)
 Modifiers for AttributePipe: 66
 AttributePipe <- public abstract void org.graphstream.stream.Source.addAttributeSink(org.graphstream.stream.AttributeSink)
 AttributePipe <- public abstract void org.graphstream.stream.Source.addElementSink(org.graphstream.stream.ElementSink)
 AttributePipe <- public abstract void org.graphstream.stream.Source.addSink(org.graphstream.stream.Sink)
 AttributePipe <- public java.lang.Iterable<org.graphstream.stream.AttributeSink> org.graphstream.stream.SourceBase.attributeSinks()
 AttributePipe <- public abstract void org.graphstream.stream.Source.clearAttributeSinks()
 AttributePipe <- public abstract void org.graphstream.stream.Source.clearElementSinks()
 AttributePipe <- public abstract void org.graphstream.stream.Source.clearSinks()
 AttributePipe <- public void org.graphstream.stream.PipeBase.edgeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,boolean)
 AttributePipe <- public void org.graphstream.stream.AttributePipe.edgeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 AttributePipe <- public void org.graphstream.stream.AttributePipe.edgeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 AttributePipe <- public void org.graphstream.stream.AttributePipe.edgeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 AttributePipe <- public void org.graphstream.stream.PipeBase.edgeRemoved(java.lang.String,long,java.lang.String)
 AttributePipe <- public java.lang.Iterable<org.graphstream.stream.ElementSink> org.graphstream.stream.SourceBase.elementSinks()
 AttributePipe <- public org.graphstream.stream.AttributePredicate org.graphstream.stream.AttributePipe.getEdgeAttributeFilter()
 AttributePipe <- public org.graphstream.stream.AttributePredicate org.graphstream.stream.AttributePipe.getGlobalAttributeFilter()
 AttributePipe <- public org.graphstream.stream.AttributePredicate org.graphstream.stream.AttributePipe.getGraphAttributeFilter()
 AttributePipe <- public org.graphstream.stream.AttributePredicate org.graphstream.stream.AttributePipe.getNodeAttributeFilter()
 AttributePipe <- public void org.graphstream.stream.AttributePipe.graphAttributeAdded(java.lang.String,long,java.lang.String,java.lang.Object)
 AttributePipe <- public void org.graphstream.stream.AttributePipe.graphAttributeChanged(java.lang.String,long,java.lang.String,java.lang.Object,java.lang.Object)
 AttributePipe <- public void org.graphstream.stream.AttributePipe.graphAttributeRemoved(java.lang.String,long,java.lang.String)
 AttributePipe <- public void org.graphstream.stream.PipeBase.graphCleared(java.lang.String,long)
 AttributePipe <- public void org.graphstream.stream.PipeBase.nodeAdded(java.lang.String,long,java.lang.String)
 AttributePipe <- public void org.graphstream.stream.AttributePipe.nodeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 AttributePipe <- public void org.graphstream.stream.AttributePipe.nodeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 AttributePipe <- public void org.graphstream.stream.AttributePipe.nodeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 AttributePipe <- public void org.graphstream.stream.PipeBase.nodeRemoved(java.lang.String,long,java.lang.String)
 AttributePipe <- public abstract void org.graphstream.stream.Source.removeAttributeSink(org.graphstream.stream.AttributeSink)
 AttributePipe <- public abstract void org.graphstream.stream.Source.removeElementSink(org.graphstream.stream.ElementSink)
 AttributePipe <- public abstract void org.graphstream.stream.Source.removeSink(org.graphstream.stream.Sink)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendAttributeChangedEvent(java.lang.String,long,java.lang.String,org.graphstream.stream.SourceBase$ElementType,java.lang.String,org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent,java.lang.Object,java.lang.Object)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendAttributeChangedEvent(java.lang.String,java.lang.String,org.graphstream.stream.SourceBase$ElementType,java.lang.String,org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent,java.lang.Object,java.lang.Object)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendEdgeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,boolean)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendEdgeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeChanged(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeRemoved(java.lang.String,java.lang.String,java.lang.String)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendEdgeRemoved(java.lang.String,long,java.lang.String)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendEdgeRemoved(java.lang.String,java.lang.String)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendGraphAttributeAdded(java.lang.String,long,java.lang.String,java.lang.Object)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendGraphAttributeAdded(java.lang.String,java.lang.String,java.lang.Object)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendGraphAttributeChanged(java.lang.String,long,java.lang.String,java.lang.Object,java.lang.Object)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendGraphAttributeChanged(java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendGraphAttributeRemoved(java.lang.String,long,java.lang.String)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendGraphAttributeRemoved(java.lang.String,java.lang.String)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendGraphCleared(java.lang.String)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendGraphCleared(java.lang.String,long)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendNodeAdded(java.lang.String,long,java.lang.String)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendNodeAdded(java.lang.String,java.lang.String)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendNodeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendNodeAttributeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendNodeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendNodeAttributeChanged(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendNodeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendNodeAttributeRemoved(java.lang.String,java.lang.String,java.lang.String)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendNodeRemoved(java.lang.String,long,java.lang.String)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendNodeRemoved(java.lang.String,java.lang.String)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendStepBegins(java.lang.String,double)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendStepBegins(java.lang.String,long,double)
 AttributePipe <- public void org.graphstream.stream.AttributePipe.setEdgeAttributeFilter(org.graphstream.stream.AttributePredicate)
 AttributePipe <- public void org.graphstream.stream.AttributePipe.setGlobalAttributeFilter(org.graphstream.stream.AttributePredicate)
 AttributePipe <- public void org.graphstream.stream.AttributePipe.setGraphAttributeFilter(org.graphstream.stream.AttributePredicate)
 AttributePipe <- public void org.graphstream.stream.AttributePipe.setNodeAttributeFilter(org.graphstream.stream.AttributePredicate)
 AttributePipe <- public void org.graphstream.stream.PipeBase.stepBegins(java.lang.String,long,double)
 Modifiers for FileSourceGraphML: 54
 FileSourceGraphML <- public abstract void org.graphstream.stream.Source.addAttributeSink(org.graphstream.stream.AttributeSink)
 FileSourceGraphML <- public abstract void org.graphstream.stream.Source.addElementSink(org.graphstream.stream.ElementSink)
 FileSourceGraphML <- public abstract void org.graphstream.stream.Source.addSink(org.graphstream.stream.Sink)
 FileSourceGraphML <- public java.lang.Iterable<org.graphstream.stream.AttributeSink> org.graphstream.stream.SourceBase.attributeSinks()
 FileSourceGraphML <- public void org.graphstream.stream.file.FileSourceGraphML.begin(java.io.InputStream) throws java.io.IOException
 FileSourceGraphML <- public void org.graphstream.stream.file.FileSourceGraphML.begin(java.io.Reader) throws java.io.IOException
 FileSourceGraphML <- public void org.graphstream.stream.file.FileSourceGraphML.begin(java.lang.String) throws java.io.IOException
 FileSourceGraphML <- public void org.graphstream.stream.file.FileSourceGraphML.begin(java.net.URL) throws java.io.IOException
 FileSourceGraphML <- public abstract void org.graphstream.stream.Source.clearAttributeSinks()
 FileSourceGraphML <- public abstract void org.graphstream.stream.Source.clearElementSinks()
 FileSourceGraphML <- public abstract void org.graphstream.stream.Source.clearSinks()
 FileSourceGraphML <- public java.lang.Iterable<org.graphstream.stream.ElementSink> org.graphstream.stream.SourceBase.elementSinks()
 FileSourceGraphML <- public void org.graphstream.stream.file.FileSourceGraphML.end() throws java.io.IOException
 FileSourceGraphML <- public boolean org.graphstream.stream.file.FileSourceGraphML.nextEvents() throws java.io.IOException
 FileSourceGraphML <- public boolean org.graphstream.stream.file.FileSourceGraphML.nextStep() throws java.io.IOException
 FileSourceGraphML <- public void org.graphstream.stream.file.FileSourceGraphML.readAll(java.io.InputStream) throws java.io.IOException
 FileSourceGraphML <- public void org.graphstream.stream.file.FileSourceGraphML.readAll(java.io.Reader) throws java.io.IOException
 FileSourceGraphML <- public void org.graphstream.stream.file.FileSourceGraphML.readAll(java.lang.String) throws java.io.IOException
 FileSourceGraphML <- public void org.graphstream.stream.file.FileSourceGraphML.readAll(java.net.URL) throws java.io.IOException
 FileSourceGraphML <- public abstract void org.graphstream.stream.Source.removeAttributeSink(org.graphstream.stream.AttributeSink)
 FileSourceGraphML <- public abstract void org.graphstream.stream.Source.removeElementSink(org.graphstream.stream.ElementSink)
 FileSourceGraphML <- public abstract void org.graphstream.stream.Source.removeSink(org.graphstream.stream.Sink)
 FileSourceGraphML <- public void org.graphstream.stream.SourceBase.sendAttributeChangedEvent(java.lang.String,long,java.lang.String,org.graphstream.stream.SourceBase$ElementType,java.lang.String,org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent,java.lang.Object,java.lang.Object)
 FileSourceGraphML <- public void org.graphstream.stream.SourceBase.sendAttributeChangedEvent(java.lang.String,java.lang.String,org.graphstream.stream.SourceBase$ElementType,java.lang.String,org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent,java.lang.Object,java.lang.Object)
 FileSourceGraphML <- public void org.graphstream.stream.SourceBase.sendEdgeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,boolean)
 FileSourceGraphML <- public void org.graphstream.stream.SourceBase.sendEdgeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)
 FileSourceGraphML <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 FileSourceGraphML <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
 FileSourceGraphML <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceGraphML <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeChanged(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceGraphML <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 FileSourceGraphML <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeRemoved(java.lang.String,java.lang.String,java.lang.String)
 FileSourceGraphML <- public void org.graphstream.stream.SourceBase.sendEdgeRemoved(java.lang.String,long,java.lang.String)
 FileSourceGraphML <- public void org.graphstream.stream.SourceBase.sendEdgeRemoved(java.lang.String,java.lang.String)
 FileSourceGraphML <- public void org.graphstream.stream.SourceBase.sendGraphAttributeAdded(java.lang.String,long,java.lang.String,java.lang.Object)
 FileSourceGraphML <- public void org.graphstream.stream.SourceBase.sendGraphAttributeAdded(java.lang.String,java.lang.String,java.lang.Object)
 FileSourceGraphML <- public void org.graphstream.stream.SourceBase.sendGraphAttributeChanged(java.lang.String,long,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceGraphML <- public void org.graphstream.stream.SourceBase.sendGraphAttributeChanged(java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceGraphML <- public void org.graphstream.stream.SourceBase.sendGraphAttributeRemoved(java.lang.String,long,java.lang.String)
 FileSourceGraphML <- public void org.graphstream.stream.SourceBase.sendGraphAttributeRemoved(java.lang.String,java.lang.String)
 FileSourceGraphML <- public void org.graphstream.stream.SourceBase.sendGraphCleared(java.lang.String)
 FileSourceGraphML <- public void org.graphstream.stream.SourceBase.sendGraphCleared(java.lang.String,long)
 FileSourceGraphML <- public void org.graphstream.stream.SourceBase.sendNodeAdded(java.lang.String,long,java.lang.String)
 FileSourceGraphML <- public void org.graphstream.stream.SourceBase.sendNodeAdded(java.lang.String,java.lang.String)
 FileSourceGraphML <- public void org.graphstream.stream.SourceBase.sendNodeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 FileSourceGraphML <- public void org.graphstream.stream.SourceBase.sendNodeAttributeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
 FileSourceGraphML <- public void org.graphstream.stream.SourceBase.sendNodeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceGraphML <- public void org.graphstream.stream.SourceBase.sendNodeAttributeChanged(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceGraphML <- public void org.graphstream.stream.SourceBase.sendNodeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 FileSourceGraphML <- public void org.graphstream.stream.SourceBase.sendNodeAttributeRemoved(java.lang.String,java.lang.String,java.lang.String)
 FileSourceGraphML <- public void org.graphstream.stream.SourceBase.sendNodeRemoved(java.lang.String,long,java.lang.String)
 FileSourceGraphML <- public void org.graphstream.stream.SourceBase.sendNodeRemoved(java.lang.String,java.lang.String)
 FileSourceGraphML <- public void org.graphstream.stream.SourceBase.sendStepBegins(java.lang.String,double)
 FileSourceGraphML <- public void org.graphstream.stream.SourceBase.sendStepBegins(java.lang.String,long,double)
 Modifiers for FileSourceGPX: 56
 FileSourceGPX <- public abstract void org.graphstream.stream.Source.addAttributeSink(org.graphstream.stream.AttributeSink)
 FileSourceGPX <- public abstract void org.graphstream.stream.Source.addElementSink(org.graphstream.stream.ElementSink)
 FileSourceGPX <- public abstract void org.graphstream.stream.Source.addSink(org.graphstream.stream.Sink)
 FileSourceGPX <- public java.lang.Iterable<org.graphstream.stream.AttributeSink> org.graphstream.stream.SourceBase.attributeSinks()
 FileSourceGPX <- public void org.graphstream.stream.file.FileSourceXML.begin(java.io.InputStream) throws java.io.IOException
 FileSourceGPX <- public void org.graphstream.stream.file.FileSourceXML.begin(java.io.Reader) throws java.io.IOException
 FileSourceGPX <- public void org.graphstream.stream.file.FileSourceXML.begin(java.lang.String) throws java.io.IOException
 FileSourceGPX <- public void org.graphstream.stream.file.FileSourceXML.begin(java.net.URL) throws java.io.IOException
 FileSourceGPX <- public abstract void org.graphstream.stream.Source.clearAttributeSinks()
 FileSourceGPX <- public abstract void org.graphstream.stream.Source.clearElementSinks()
 FileSourceGPX <- public abstract void org.graphstream.stream.Source.clearSinks()
 FileSourceGPX <- public java.lang.Iterable<org.graphstream.stream.ElementSink> org.graphstream.stream.SourceBase.elementSinks()
 FileSourceGPX <- public void org.graphstream.stream.file.FileSourceXML.end() throws java.io.IOException
 FileSourceGPX <- public boolean org.graphstream.stream.file.FileSourceGPX.isStrict()
 FileSourceGPX <- public boolean org.graphstream.stream.file.FileSourceGPX.nextEvents() throws java.io.IOException
 FileSourceGPX <- public boolean org.graphstream.stream.file.FileSourceXML.nextStep() throws java.io.IOException
 FileSourceGPX <- public void org.graphstream.stream.file.FileSourceXML.readAll(java.io.InputStream) throws java.io.IOException
 FileSourceGPX <- public void org.graphstream.stream.file.FileSourceXML.readAll(java.io.Reader) throws java.io.IOException
 FileSourceGPX <- public void org.graphstream.stream.file.FileSourceXML.readAll(java.lang.String) throws java.io.IOException
 FileSourceGPX <- public void org.graphstream.stream.file.FileSourceXML.readAll(java.net.URL) throws java.io.IOException
 FileSourceGPX <- public abstract void org.graphstream.stream.Source.removeAttributeSink(org.graphstream.stream.AttributeSink)
 FileSourceGPX <- public abstract void org.graphstream.stream.Source.removeElementSink(org.graphstream.stream.ElementSink)
 FileSourceGPX <- public abstract void org.graphstream.stream.Source.removeSink(org.graphstream.stream.Sink)
 FileSourceGPX <- public void org.graphstream.stream.SourceBase.sendAttributeChangedEvent(java.lang.String,long,java.lang.String,org.graphstream.stream.SourceBase$ElementType,java.lang.String,org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent,java.lang.Object,java.lang.Object)
 FileSourceGPX <- public void org.graphstream.stream.SourceBase.sendAttributeChangedEvent(java.lang.String,java.lang.String,org.graphstream.stream.SourceBase$ElementType,java.lang.String,org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent,java.lang.Object,java.lang.Object)
 FileSourceGPX <- public void org.graphstream.stream.SourceBase.sendEdgeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,boolean)
 FileSourceGPX <- public void org.graphstream.stream.SourceBase.sendEdgeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)
 FileSourceGPX <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 FileSourceGPX <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
 FileSourceGPX <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceGPX <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeChanged(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceGPX <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 FileSourceGPX <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeRemoved(java.lang.String,java.lang.String,java.lang.String)
 FileSourceGPX <- public void org.graphstream.stream.SourceBase.sendEdgeRemoved(java.lang.String,long,java.lang.String)
 FileSourceGPX <- public void org.graphstream.stream.SourceBase.sendEdgeRemoved(java.lang.String,java.lang.String)
 FileSourceGPX <- public void org.graphstream.stream.SourceBase.sendGraphAttributeAdded(java.lang.String,long,java.lang.String,java.lang.Object)
 FileSourceGPX <- public void org.graphstream.stream.SourceBase.sendGraphAttributeAdded(java.lang.String,java.lang.String,java.lang.Object)
 FileSourceGPX <- public void org.graphstream.stream.SourceBase.sendGraphAttributeChanged(java.lang.String,long,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceGPX <- public void org.graphstream.stream.SourceBase.sendGraphAttributeChanged(java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceGPX <- public void org.graphstream.stream.SourceBase.sendGraphAttributeRemoved(java.lang.String,long,java.lang.String)
 FileSourceGPX <- public void org.graphstream.stream.SourceBase.sendGraphAttributeRemoved(java.lang.String,java.lang.String)
 FileSourceGPX <- public void org.graphstream.stream.SourceBase.sendGraphCleared(java.lang.String)
 FileSourceGPX <- public void org.graphstream.stream.SourceBase.sendGraphCleared(java.lang.String,long)
 FileSourceGPX <- public void org.graphstream.stream.SourceBase.sendNodeAdded(java.lang.String,long,java.lang.String)
 FileSourceGPX <- public void org.graphstream.stream.SourceBase.sendNodeAdded(java.lang.String,java.lang.String)
 FileSourceGPX <- public void org.graphstream.stream.SourceBase.sendNodeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 FileSourceGPX <- public void org.graphstream.stream.SourceBase.sendNodeAttributeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
 FileSourceGPX <- public void org.graphstream.stream.SourceBase.sendNodeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceGPX <- public void org.graphstream.stream.SourceBase.sendNodeAttributeChanged(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceGPX <- public void org.graphstream.stream.SourceBase.sendNodeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 FileSourceGPX <- public void org.graphstream.stream.SourceBase.sendNodeAttributeRemoved(java.lang.String,java.lang.String,java.lang.String)
 FileSourceGPX <- public void org.graphstream.stream.SourceBase.sendNodeRemoved(java.lang.String,long,java.lang.String)
 FileSourceGPX <- public void org.graphstream.stream.SourceBase.sendNodeRemoved(java.lang.String,java.lang.String)
 FileSourceGPX <- public void org.graphstream.stream.SourceBase.sendStepBegins(java.lang.String,double)
 FileSourceGPX <- public void org.graphstream.stream.SourceBase.sendStepBegins(java.lang.String,long,double)
 FileSourceGPX <- public void org.graphstream.stream.file.FileSourceGPX.setStrict(boolean)
 Modifiers for FileSourceGEXF: 54
 FileSourceGEXF <- public abstract void org.graphstream.stream.Source.addAttributeSink(org.graphstream.stream.AttributeSink)
 FileSourceGEXF <- public abstract void org.graphstream.stream.Source.addElementSink(org.graphstream.stream.ElementSink)
 FileSourceGEXF <- public abstract void org.graphstream.stream.Source.addSink(org.graphstream.stream.Sink)
 FileSourceGEXF <- public java.lang.Iterable<org.graphstream.stream.AttributeSink> org.graphstream.stream.SourceBase.attributeSinks()
 FileSourceGEXF <- public void org.graphstream.stream.file.FileSourceXML.begin(java.io.InputStream) throws java.io.IOException
 FileSourceGEXF <- public void org.graphstream.stream.file.FileSourceXML.begin(java.io.Reader) throws java.io.IOException
 FileSourceGEXF <- public void org.graphstream.stream.file.FileSourceXML.begin(java.lang.String) throws java.io.IOException
 FileSourceGEXF <- public void org.graphstream.stream.file.FileSourceXML.begin(java.net.URL) throws java.io.IOException
 FileSourceGEXF <- public abstract void org.graphstream.stream.Source.clearAttributeSinks()
 FileSourceGEXF <- public abstract void org.graphstream.stream.Source.clearElementSinks()
 FileSourceGEXF <- public abstract void org.graphstream.stream.Source.clearSinks()
 FileSourceGEXF <- public java.lang.Iterable<org.graphstream.stream.ElementSink> org.graphstream.stream.SourceBase.elementSinks()
 FileSourceGEXF <- public void org.graphstream.stream.file.FileSourceXML.end() throws java.io.IOException
 FileSourceGEXF <- public boolean org.graphstream.stream.file.FileSourceGEXF.nextEvents() throws java.io.IOException
 FileSourceGEXF <- public boolean org.graphstream.stream.file.FileSourceXML.nextStep() throws java.io.IOException
 FileSourceGEXF <- public void org.graphstream.stream.file.FileSourceXML.readAll(java.io.InputStream) throws java.io.IOException
 FileSourceGEXF <- public void org.graphstream.stream.file.FileSourceXML.readAll(java.io.Reader) throws java.io.IOException
 FileSourceGEXF <- public void org.graphstream.stream.file.FileSourceXML.readAll(java.lang.String) throws java.io.IOException
 FileSourceGEXF <- public void org.graphstream.stream.file.FileSourceXML.readAll(java.net.URL) throws java.io.IOException
 FileSourceGEXF <- public abstract void org.graphstream.stream.Source.removeAttributeSink(org.graphstream.stream.AttributeSink)
 FileSourceGEXF <- public abstract void org.graphstream.stream.Source.removeElementSink(org.graphstream.stream.ElementSink)
 FileSourceGEXF <- public abstract void org.graphstream.stream.Source.removeSink(org.graphstream.stream.Sink)
 FileSourceGEXF <- public void org.graphstream.stream.SourceBase.sendAttributeChangedEvent(java.lang.String,long,java.lang.String,org.graphstream.stream.SourceBase$ElementType,java.lang.String,org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent,java.lang.Object,java.lang.Object)
 FileSourceGEXF <- public void org.graphstream.stream.SourceBase.sendAttributeChangedEvent(java.lang.String,java.lang.String,org.graphstream.stream.SourceBase$ElementType,java.lang.String,org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent,java.lang.Object,java.lang.Object)
 FileSourceGEXF <- public void org.graphstream.stream.SourceBase.sendEdgeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,boolean)
 FileSourceGEXF <- public void org.graphstream.stream.SourceBase.sendEdgeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)
 FileSourceGEXF <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 FileSourceGEXF <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
 FileSourceGEXF <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceGEXF <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeChanged(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceGEXF <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 FileSourceGEXF <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeRemoved(java.lang.String,java.lang.String,java.lang.String)
 FileSourceGEXF <- public void org.graphstream.stream.SourceBase.sendEdgeRemoved(java.lang.String,long,java.lang.String)
 FileSourceGEXF <- public void org.graphstream.stream.SourceBase.sendEdgeRemoved(java.lang.String,java.lang.String)
 FileSourceGEXF <- public void org.graphstream.stream.SourceBase.sendGraphAttributeAdded(java.lang.String,long,java.lang.String,java.lang.Object)
 FileSourceGEXF <- public void org.graphstream.stream.SourceBase.sendGraphAttributeAdded(java.lang.String,java.lang.String,java.lang.Object)
 FileSourceGEXF <- public void org.graphstream.stream.SourceBase.sendGraphAttributeChanged(java.lang.String,long,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceGEXF <- public void org.graphstream.stream.SourceBase.sendGraphAttributeChanged(java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceGEXF <- public void org.graphstream.stream.SourceBase.sendGraphAttributeRemoved(java.lang.String,long,java.lang.String)
 FileSourceGEXF <- public void org.graphstream.stream.SourceBase.sendGraphAttributeRemoved(java.lang.String,java.lang.String)
 FileSourceGEXF <- public void org.graphstream.stream.SourceBase.sendGraphCleared(java.lang.String)
 FileSourceGEXF <- public void org.graphstream.stream.SourceBase.sendGraphCleared(java.lang.String,long)
 FileSourceGEXF <- public void org.graphstream.stream.SourceBase.sendNodeAdded(java.lang.String,long,java.lang.String)
 FileSourceGEXF <- public void org.graphstream.stream.SourceBase.sendNodeAdded(java.lang.String,java.lang.String)
 FileSourceGEXF <- public void org.graphstream.stream.SourceBase.sendNodeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 FileSourceGEXF <- public void org.graphstream.stream.SourceBase.sendNodeAttributeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
 FileSourceGEXF <- public void org.graphstream.stream.SourceBase.sendNodeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceGEXF <- public void org.graphstream.stream.SourceBase.sendNodeAttributeChanged(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceGEXF <- public void org.graphstream.stream.SourceBase.sendNodeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 FileSourceGEXF <- public void org.graphstream.stream.SourceBase.sendNodeAttributeRemoved(java.lang.String,java.lang.String,java.lang.String)
 FileSourceGEXF <- public void org.graphstream.stream.SourceBase.sendNodeRemoved(java.lang.String,long,java.lang.String)
 FileSourceGEXF <- public void org.graphstream.stream.SourceBase.sendNodeRemoved(java.lang.String,java.lang.String)
 FileSourceGEXF <- public void org.graphstream.stream.SourceBase.sendStepBegins(java.lang.String,double)
 FileSourceGEXF <- public void org.graphstream.stream.SourceBase.sendStepBegins(java.lang.String,long,double)
 Modifiers for FileSourceTLP: 55
 FileSourceTLP <- public abstract void org.graphstream.stream.Source.addAttributeSink(org.graphstream.stream.AttributeSink)
 FileSourceTLP <- public abstract void org.graphstream.stream.Source.addElementSink(org.graphstream.stream.ElementSink)
 FileSourceTLP <- public abstract void org.graphstream.stream.Source.addSink(org.graphstream.stream.Sink)
 FileSourceTLP <- public java.lang.Iterable<org.graphstream.stream.AttributeSink> org.graphstream.stream.SourceBase.attributeSinks()
 FileSourceTLP <- public void org.graphstream.stream.file.FileSourceParser.begin(java.io.InputStream) throws java.io.IOException
 FileSourceTLP <- public void org.graphstream.stream.file.FileSourceParser.begin(java.io.Reader) throws java.io.IOException
 FileSourceTLP <- public void org.graphstream.stream.file.FileSourceParser.begin(java.lang.String) throws java.io.IOException
 FileSourceTLP <- public void org.graphstream.stream.file.FileSourceParser.begin(java.net.URL) throws java.io.IOException
 FileSourceTLP <- public abstract void org.graphstream.stream.Source.clearAttributeSinks()
 FileSourceTLP <- public abstract void org.graphstream.stream.Source.clearElementSinks()
 FileSourceTLP <- public abstract void org.graphstream.stream.Source.clearSinks()
 FileSourceTLP <- public java.lang.Iterable<org.graphstream.stream.ElementSink> org.graphstream.stream.SourceBase.elementSinks()
 FileSourceTLP <- public void org.graphstream.stream.file.FileSourceParser.end() throws java.io.IOException
 FileSourceTLP <- public org.graphstream.util.parser.ParserFactory org.graphstream.stream.file.FileSourceTLP.getNewParserFactory()
 FileSourceTLP <- public boolean org.graphstream.stream.file.FileSourceParser.nextEvents() throws java.io.IOException
 FileSourceTLP <- public boolean org.graphstream.stream.file.FileSourceParser.nextStep() throws java.io.IOException
 FileSourceTLP <- public void org.graphstream.stream.file.FileSourceParser.readAll(java.io.InputStream) throws java.io.IOException
 FileSourceTLP <- public void org.graphstream.stream.file.FileSourceParser.readAll(java.io.Reader) throws java.io.IOException
 FileSourceTLP <- public void org.graphstream.stream.file.FileSourceParser.readAll(java.lang.String) throws java.io.IOException
 FileSourceTLP <- public void org.graphstream.stream.file.FileSourceParser.readAll(java.net.URL) throws java.io.IOException
 FileSourceTLP <- public abstract void org.graphstream.stream.Source.removeAttributeSink(org.graphstream.stream.AttributeSink)
 FileSourceTLP <- public abstract void org.graphstream.stream.Source.removeElementSink(org.graphstream.stream.ElementSink)
 FileSourceTLP <- public abstract void org.graphstream.stream.Source.removeSink(org.graphstream.stream.Sink)
 FileSourceTLP <- public void org.graphstream.stream.SourceBase.sendAttributeChangedEvent(java.lang.String,long,java.lang.String,org.graphstream.stream.SourceBase$ElementType,java.lang.String,org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent,java.lang.Object,java.lang.Object)
 FileSourceTLP <- public void org.graphstream.stream.SourceBase.sendAttributeChangedEvent(java.lang.String,java.lang.String,org.graphstream.stream.SourceBase$ElementType,java.lang.String,org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent,java.lang.Object,java.lang.Object)
 FileSourceTLP <- public void org.graphstream.stream.SourceBase.sendEdgeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,boolean)
 FileSourceTLP <- public void org.graphstream.stream.SourceBase.sendEdgeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)
 FileSourceTLP <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 FileSourceTLP <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
 FileSourceTLP <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceTLP <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeChanged(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceTLP <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 FileSourceTLP <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeRemoved(java.lang.String,java.lang.String,java.lang.String)
 FileSourceTLP <- public void org.graphstream.stream.SourceBase.sendEdgeRemoved(java.lang.String,long,java.lang.String)
 FileSourceTLP <- public void org.graphstream.stream.SourceBase.sendEdgeRemoved(java.lang.String,java.lang.String)
 FileSourceTLP <- public void org.graphstream.stream.SourceBase.sendGraphAttributeAdded(java.lang.String,long,java.lang.String,java.lang.Object)
 FileSourceTLP <- public void org.graphstream.stream.SourceBase.sendGraphAttributeAdded(java.lang.String,java.lang.String,java.lang.Object)
 FileSourceTLP <- public void org.graphstream.stream.SourceBase.sendGraphAttributeChanged(java.lang.String,long,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceTLP <- public void org.graphstream.stream.SourceBase.sendGraphAttributeChanged(java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceTLP <- public void org.graphstream.stream.SourceBase.sendGraphAttributeRemoved(java.lang.String,long,java.lang.String)
 FileSourceTLP <- public void org.graphstream.stream.SourceBase.sendGraphAttributeRemoved(java.lang.String,java.lang.String)
 FileSourceTLP <- public void org.graphstream.stream.SourceBase.sendGraphCleared(java.lang.String)
 FileSourceTLP <- public void org.graphstream.stream.SourceBase.sendGraphCleared(java.lang.String,long)
 FileSourceTLP <- public void org.graphstream.stream.SourceBase.sendNodeAdded(java.lang.String,long,java.lang.String)
 FileSourceTLP <- public void org.graphstream.stream.SourceBase.sendNodeAdded(java.lang.String,java.lang.String)
 FileSourceTLP <- public void org.graphstream.stream.SourceBase.sendNodeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 FileSourceTLP <- public void org.graphstream.stream.SourceBase.sendNodeAttributeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
 FileSourceTLP <- public void org.graphstream.stream.SourceBase.sendNodeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceTLP <- public void org.graphstream.stream.SourceBase.sendNodeAttributeChanged(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceTLP <- public void org.graphstream.stream.SourceBase.sendNodeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 FileSourceTLP <- public void org.graphstream.stream.SourceBase.sendNodeAttributeRemoved(java.lang.String,java.lang.String,java.lang.String)
 FileSourceTLP <- public void org.graphstream.stream.SourceBase.sendNodeRemoved(java.lang.String,long,java.lang.String)
 FileSourceTLP <- public void org.graphstream.stream.SourceBase.sendNodeRemoved(java.lang.String,java.lang.String)
 FileSourceTLP <- public void org.graphstream.stream.SourceBase.sendStepBegins(java.lang.String,double)
 FileSourceTLP <- public void org.graphstream.stream.SourceBase.sendStepBegins(java.lang.String,long,double)
 Modifiers for FileSourceDOT: 55
 FileSourceDOT <- public abstract void org.graphstream.stream.Source.addAttributeSink(org.graphstream.stream.AttributeSink)
 FileSourceDOT <- public abstract void org.graphstream.stream.Source.addElementSink(org.graphstream.stream.ElementSink)
 FileSourceDOT <- public abstract void org.graphstream.stream.Source.addSink(org.graphstream.stream.Sink)
 FileSourceDOT <- public java.lang.Iterable<org.graphstream.stream.AttributeSink> org.graphstream.stream.SourceBase.attributeSinks()
 FileSourceDOT <- public void org.graphstream.stream.file.FileSourceParser.begin(java.io.InputStream) throws java.io.IOException
 FileSourceDOT <- public void org.graphstream.stream.file.FileSourceParser.begin(java.io.Reader) throws java.io.IOException
 FileSourceDOT <- public void org.graphstream.stream.file.FileSourceParser.begin(java.lang.String) throws java.io.IOException
 FileSourceDOT <- public void org.graphstream.stream.file.FileSourceParser.begin(java.net.URL) throws java.io.IOException
 FileSourceDOT <- public abstract void org.graphstream.stream.Source.clearAttributeSinks()
 FileSourceDOT <- public abstract void org.graphstream.stream.Source.clearElementSinks()
 FileSourceDOT <- public abstract void org.graphstream.stream.Source.clearSinks()
 FileSourceDOT <- public java.lang.Iterable<org.graphstream.stream.ElementSink> org.graphstream.stream.SourceBase.elementSinks()
 FileSourceDOT <- public void org.graphstream.stream.file.FileSourceParser.end() throws java.io.IOException
 FileSourceDOT <- public org.graphstream.util.parser.ParserFactory org.graphstream.stream.file.FileSourceDOT.getNewParserFactory()
 FileSourceDOT <- public boolean org.graphstream.stream.file.FileSourceParser.nextEvents() throws java.io.IOException
 FileSourceDOT <- public boolean org.graphstream.stream.file.FileSourceParser.nextStep() throws java.io.IOException
 FileSourceDOT <- public void org.graphstream.stream.file.FileSourceParser.readAll(java.io.InputStream) throws java.io.IOException
 FileSourceDOT <- public void org.graphstream.stream.file.FileSourceParser.readAll(java.io.Reader) throws java.io.IOException
 FileSourceDOT <- public void org.graphstream.stream.file.FileSourceParser.readAll(java.lang.String) throws java.io.IOException
 FileSourceDOT <- public void org.graphstream.stream.file.FileSourceParser.readAll(java.net.URL) throws java.io.IOException
 FileSourceDOT <- public abstract void org.graphstream.stream.Source.removeAttributeSink(org.graphstream.stream.AttributeSink)
 FileSourceDOT <- public abstract void org.graphstream.stream.Source.removeElementSink(org.graphstream.stream.ElementSink)
 FileSourceDOT <- public abstract void org.graphstream.stream.Source.removeSink(org.graphstream.stream.Sink)
 FileSourceDOT <- public void org.graphstream.stream.SourceBase.sendAttributeChangedEvent(java.lang.String,long,java.lang.String,org.graphstream.stream.SourceBase$ElementType,java.lang.String,org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent,java.lang.Object,java.lang.Object)
 FileSourceDOT <- public void org.graphstream.stream.SourceBase.sendAttributeChangedEvent(java.lang.String,java.lang.String,org.graphstream.stream.SourceBase$ElementType,java.lang.String,org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent,java.lang.Object,java.lang.Object)
 FileSourceDOT <- public void org.graphstream.stream.SourceBase.sendEdgeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,boolean)
 FileSourceDOT <- public void org.graphstream.stream.SourceBase.sendEdgeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)
 FileSourceDOT <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 FileSourceDOT <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
 FileSourceDOT <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceDOT <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeChanged(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceDOT <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 FileSourceDOT <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeRemoved(java.lang.String,java.lang.String,java.lang.String)
 FileSourceDOT <- public void org.graphstream.stream.SourceBase.sendEdgeRemoved(java.lang.String,long,java.lang.String)
 FileSourceDOT <- public void org.graphstream.stream.SourceBase.sendEdgeRemoved(java.lang.String,java.lang.String)
 FileSourceDOT <- public void org.graphstream.stream.SourceBase.sendGraphAttributeAdded(java.lang.String,long,java.lang.String,java.lang.Object)
 FileSourceDOT <- public void org.graphstream.stream.SourceBase.sendGraphAttributeAdded(java.lang.String,java.lang.String,java.lang.Object)
 FileSourceDOT <- public void org.graphstream.stream.SourceBase.sendGraphAttributeChanged(java.lang.String,long,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceDOT <- public void org.graphstream.stream.SourceBase.sendGraphAttributeChanged(java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceDOT <- public void org.graphstream.stream.SourceBase.sendGraphAttributeRemoved(java.lang.String,long,java.lang.String)
 FileSourceDOT <- public void org.graphstream.stream.SourceBase.sendGraphAttributeRemoved(java.lang.String,java.lang.String)
 FileSourceDOT <- public void org.graphstream.stream.SourceBase.sendGraphCleared(java.lang.String)
 FileSourceDOT <- public void org.graphstream.stream.SourceBase.sendGraphCleared(java.lang.String,long)
 FileSourceDOT <- public void org.graphstream.stream.SourceBase.sendNodeAdded(java.lang.String,long,java.lang.String)
 FileSourceDOT <- public void org.graphstream.stream.SourceBase.sendNodeAdded(java.lang.String,java.lang.String)
 FileSourceDOT <- public void org.graphstream.stream.SourceBase.sendNodeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 FileSourceDOT <- public void org.graphstream.stream.SourceBase.sendNodeAttributeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
 FileSourceDOT <- public void org.graphstream.stream.SourceBase.sendNodeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceDOT <- public void org.graphstream.stream.SourceBase.sendNodeAttributeChanged(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceDOT <- public void org.graphstream.stream.SourceBase.sendNodeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 FileSourceDOT <- public void org.graphstream.stream.SourceBase.sendNodeAttributeRemoved(java.lang.String,java.lang.String,java.lang.String)
 FileSourceDOT <- public void org.graphstream.stream.SourceBase.sendNodeRemoved(java.lang.String,long,java.lang.String)
 FileSourceDOT <- public void org.graphstream.stream.SourceBase.sendNodeRemoved(java.lang.String,java.lang.String)
 FileSourceDOT <- public void org.graphstream.stream.SourceBase.sendStepBegins(java.lang.String,double)
 FileSourceDOT <- public void org.graphstream.stream.SourceBase.sendStepBegins(java.lang.String,long,double)
 Modifiers for FileSourcePajek: 55
 FileSourcePajek <- public abstract void org.graphstream.stream.Source.addAttributeSink(org.graphstream.stream.AttributeSink)
 FileSourcePajek <- public abstract void org.graphstream.stream.Source.addElementSink(org.graphstream.stream.ElementSink)
 FileSourcePajek <- public abstract void org.graphstream.stream.Source.addSink(org.graphstream.stream.Sink)
 FileSourcePajek <- public java.lang.Iterable<org.graphstream.stream.AttributeSink> org.graphstream.stream.SourceBase.attributeSinks()
 FileSourcePajek <- public void org.graphstream.stream.file.FileSourceParser.begin(java.io.InputStream) throws java.io.IOException
 FileSourcePajek <- public void org.graphstream.stream.file.FileSourceParser.begin(java.io.Reader) throws java.io.IOException
 FileSourcePajek <- public void org.graphstream.stream.file.FileSourceParser.begin(java.lang.String) throws java.io.IOException
 FileSourcePajek <- public void org.graphstream.stream.file.FileSourceParser.begin(java.net.URL) throws java.io.IOException
 FileSourcePajek <- public abstract void org.graphstream.stream.Source.clearAttributeSinks()
 FileSourcePajek <- public abstract void org.graphstream.stream.Source.clearElementSinks()
 FileSourcePajek <- public abstract void org.graphstream.stream.Source.clearSinks()
 FileSourcePajek <- public java.lang.Iterable<org.graphstream.stream.ElementSink> org.graphstream.stream.SourceBase.elementSinks()
 FileSourcePajek <- public void org.graphstream.stream.file.FileSourceParser.end() throws java.io.IOException
 FileSourcePajek <- public org.graphstream.util.parser.ParserFactory org.graphstream.stream.file.FileSourcePajek.getNewParserFactory()
 FileSourcePajek <- public boolean org.graphstream.stream.file.FileSourceParser.nextEvents() throws java.io.IOException
 FileSourcePajek <- public boolean org.graphstream.stream.file.FileSourceParser.nextStep() throws java.io.IOException
 FileSourcePajek <- public void org.graphstream.stream.file.FileSourceParser.readAll(java.io.InputStream) throws java.io.IOException
 FileSourcePajek <- public void org.graphstream.stream.file.FileSourceParser.readAll(java.io.Reader) throws java.io.IOException
 FileSourcePajek <- public void org.graphstream.stream.file.FileSourceParser.readAll(java.lang.String) throws java.io.IOException
 FileSourcePajek <- public void org.graphstream.stream.file.FileSourceParser.readAll(java.net.URL) throws java.io.IOException
 FileSourcePajek <- public abstract void org.graphstream.stream.Source.removeAttributeSink(org.graphstream.stream.AttributeSink)
 FileSourcePajek <- public abstract void org.graphstream.stream.Source.removeElementSink(org.graphstream.stream.ElementSink)
 FileSourcePajek <- public abstract void org.graphstream.stream.Source.removeSink(org.graphstream.stream.Sink)
 FileSourcePajek <- public void org.graphstream.stream.SourceBase.sendAttributeChangedEvent(java.lang.String,long,java.lang.String,org.graphstream.stream.SourceBase$ElementType,java.lang.String,org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent,java.lang.Object,java.lang.Object)
 FileSourcePajek <- public void org.graphstream.stream.SourceBase.sendAttributeChangedEvent(java.lang.String,java.lang.String,org.graphstream.stream.SourceBase$ElementType,java.lang.String,org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent,java.lang.Object,java.lang.Object)
 FileSourcePajek <- public void org.graphstream.stream.SourceBase.sendEdgeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,boolean)
 FileSourcePajek <- public void org.graphstream.stream.SourceBase.sendEdgeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)
 FileSourcePajek <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 FileSourcePajek <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
 FileSourcePajek <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourcePajek <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeChanged(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourcePajek <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 FileSourcePajek <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeRemoved(java.lang.String,java.lang.String,java.lang.String)
 FileSourcePajek <- public void org.graphstream.stream.SourceBase.sendEdgeRemoved(java.lang.String,long,java.lang.String)
 FileSourcePajek <- public void org.graphstream.stream.SourceBase.sendEdgeRemoved(java.lang.String,java.lang.String)
 FileSourcePajek <- public void org.graphstream.stream.SourceBase.sendGraphAttributeAdded(java.lang.String,long,java.lang.String,java.lang.Object)
 FileSourcePajek <- public void org.graphstream.stream.SourceBase.sendGraphAttributeAdded(java.lang.String,java.lang.String,java.lang.Object)
 FileSourcePajek <- public void org.graphstream.stream.SourceBase.sendGraphAttributeChanged(java.lang.String,long,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourcePajek <- public void org.graphstream.stream.SourceBase.sendGraphAttributeChanged(java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourcePajek <- public void org.graphstream.stream.SourceBase.sendGraphAttributeRemoved(java.lang.String,long,java.lang.String)
 FileSourcePajek <- public void org.graphstream.stream.SourceBase.sendGraphAttributeRemoved(java.lang.String,java.lang.String)
 FileSourcePajek <- public void org.graphstream.stream.SourceBase.sendGraphCleared(java.lang.String)
 FileSourcePajek <- public void org.graphstream.stream.SourceBase.sendGraphCleared(java.lang.String,long)
 FileSourcePajek <- public void org.graphstream.stream.SourceBase.sendNodeAdded(java.lang.String,long,java.lang.String)
 FileSourcePajek <- public void org.graphstream.stream.SourceBase.sendNodeAdded(java.lang.String,java.lang.String)
 FileSourcePajek <- public void org.graphstream.stream.SourceBase.sendNodeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 FileSourcePajek <- public void org.graphstream.stream.SourceBase.sendNodeAttributeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
 FileSourcePajek <- public void org.graphstream.stream.SourceBase.sendNodeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourcePajek <- public void org.graphstream.stream.SourceBase.sendNodeAttributeChanged(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourcePajek <- public void org.graphstream.stream.SourceBase.sendNodeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 FileSourcePajek <- public void org.graphstream.stream.SourceBase.sendNodeAttributeRemoved(java.lang.String,java.lang.String,java.lang.String)
 FileSourcePajek <- public void org.graphstream.stream.SourceBase.sendNodeRemoved(java.lang.String,long,java.lang.String)
 FileSourcePajek <- public void org.graphstream.stream.SourceBase.sendNodeRemoved(java.lang.String,java.lang.String)
 FileSourcePajek <- public void org.graphstream.stream.SourceBase.sendStepBegins(java.lang.String,double)
 FileSourcePajek <- public void org.graphstream.stream.SourceBase.sendStepBegins(java.lang.String,long,double)
 Modifiers for FileSourceDGS: 55
 FileSourceDGS <- public abstract void org.graphstream.stream.Source.addAttributeSink(org.graphstream.stream.AttributeSink)
 FileSourceDGS <- public abstract void org.graphstream.stream.Source.addElementSink(org.graphstream.stream.ElementSink)
 FileSourceDGS <- public abstract void org.graphstream.stream.Source.addSink(org.graphstream.stream.Sink)
 FileSourceDGS <- public java.lang.Iterable<org.graphstream.stream.AttributeSink> org.graphstream.stream.SourceBase.attributeSinks()
 FileSourceDGS <- public void org.graphstream.stream.file.FileSourceParser.begin(java.io.InputStream) throws java.io.IOException
 FileSourceDGS <- public void org.graphstream.stream.file.FileSourceParser.begin(java.io.Reader) throws java.io.IOException
 FileSourceDGS <- public void org.graphstream.stream.file.FileSourceParser.begin(java.lang.String) throws java.io.IOException
 FileSourceDGS <- public void org.graphstream.stream.file.FileSourceParser.begin(java.net.URL) throws java.io.IOException
 FileSourceDGS <- public abstract void org.graphstream.stream.Source.clearAttributeSinks()
 FileSourceDGS <- public abstract void org.graphstream.stream.Source.clearElementSinks()
 FileSourceDGS <- public abstract void org.graphstream.stream.Source.clearSinks()
 FileSourceDGS <- public java.lang.Iterable<org.graphstream.stream.ElementSink> org.graphstream.stream.SourceBase.elementSinks()
 FileSourceDGS <- public void org.graphstream.stream.file.FileSourceParser.end() throws java.io.IOException
 FileSourceDGS <- public org.graphstream.util.parser.ParserFactory org.graphstream.stream.file.FileSourceDGS.getNewParserFactory()
 FileSourceDGS <- public boolean org.graphstream.stream.file.FileSourceParser.nextEvents() throws java.io.IOException
 FileSourceDGS <- public boolean org.graphstream.stream.file.FileSourceDGS.nextStep() throws java.io.IOException
 FileSourceDGS <- public void org.graphstream.stream.file.FileSourceParser.readAll(java.io.InputStream) throws java.io.IOException
 FileSourceDGS <- public void org.graphstream.stream.file.FileSourceParser.readAll(java.io.Reader) throws java.io.IOException
 FileSourceDGS <- public void org.graphstream.stream.file.FileSourceParser.readAll(java.lang.String) throws java.io.IOException
 FileSourceDGS <- public void org.graphstream.stream.file.FileSourceParser.readAll(java.net.URL) throws java.io.IOException
 FileSourceDGS <- public abstract void org.graphstream.stream.Source.removeAttributeSink(org.graphstream.stream.AttributeSink)
 FileSourceDGS <- public abstract void org.graphstream.stream.Source.removeElementSink(org.graphstream.stream.ElementSink)
 FileSourceDGS <- public abstract void org.graphstream.stream.Source.removeSink(org.graphstream.stream.Sink)
 FileSourceDGS <- public void org.graphstream.stream.SourceBase.sendAttributeChangedEvent(java.lang.String,long,java.lang.String,org.graphstream.stream.SourceBase$ElementType,java.lang.String,org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent,java.lang.Object,java.lang.Object)
 FileSourceDGS <- public void org.graphstream.stream.SourceBase.sendAttributeChangedEvent(java.lang.String,java.lang.String,org.graphstream.stream.SourceBase$ElementType,java.lang.String,org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent,java.lang.Object,java.lang.Object)
 FileSourceDGS <- public void org.graphstream.stream.SourceBase.sendEdgeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,boolean)
 FileSourceDGS <- public void org.graphstream.stream.SourceBase.sendEdgeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)
 FileSourceDGS <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 FileSourceDGS <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
 FileSourceDGS <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceDGS <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeChanged(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceDGS <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 FileSourceDGS <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeRemoved(java.lang.String,java.lang.String,java.lang.String)
 FileSourceDGS <- public void org.graphstream.stream.SourceBase.sendEdgeRemoved(java.lang.String,long,java.lang.String)
 FileSourceDGS <- public void org.graphstream.stream.SourceBase.sendEdgeRemoved(java.lang.String,java.lang.String)
 FileSourceDGS <- public void org.graphstream.stream.SourceBase.sendGraphAttributeAdded(java.lang.String,long,java.lang.String,java.lang.Object)
 FileSourceDGS <- public void org.graphstream.stream.SourceBase.sendGraphAttributeAdded(java.lang.String,java.lang.String,java.lang.Object)
 FileSourceDGS <- public void org.graphstream.stream.SourceBase.sendGraphAttributeChanged(java.lang.String,long,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceDGS <- public void org.graphstream.stream.SourceBase.sendGraphAttributeChanged(java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceDGS <- public void org.graphstream.stream.SourceBase.sendGraphAttributeRemoved(java.lang.String,long,java.lang.String)
 FileSourceDGS <- public void org.graphstream.stream.SourceBase.sendGraphAttributeRemoved(java.lang.String,java.lang.String)
 FileSourceDGS <- public void org.graphstream.stream.SourceBase.sendGraphCleared(java.lang.String)
 FileSourceDGS <- public void org.graphstream.stream.SourceBase.sendGraphCleared(java.lang.String,long)
 FileSourceDGS <- public void org.graphstream.stream.SourceBase.sendNodeAdded(java.lang.String,long,java.lang.String)
 FileSourceDGS <- public void org.graphstream.stream.SourceBase.sendNodeAdded(java.lang.String,java.lang.String)
 FileSourceDGS <- public void org.graphstream.stream.SourceBase.sendNodeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 FileSourceDGS <- public void org.graphstream.stream.SourceBase.sendNodeAttributeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
 FileSourceDGS <- public void org.graphstream.stream.SourceBase.sendNodeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceDGS <- public void org.graphstream.stream.SourceBase.sendNodeAttributeChanged(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceDGS <- public void org.graphstream.stream.SourceBase.sendNodeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 FileSourceDGS <- public void org.graphstream.stream.SourceBase.sendNodeAttributeRemoved(java.lang.String,java.lang.String,java.lang.String)
 FileSourceDGS <- public void org.graphstream.stream.SourceBase.sendNodeRemoved(java.lang.String,long,java.lang.String)
 FileSourceDGS <- public void org.graphstream.stream.SourceBase.sendNodeRemoved(java.lang.String,java.lang.String)
 FileSourceDGS <- public void org.graphstream.stream.SourceBase.sendStepBegins(java.lang.String,double)
 FileSourceDGS <- public void org.graphstream.stream.SourceBase.sendStepBegins(java.lang.String,long,double)
 Modifiers for FileSourceGML: 55
 FileSourceGML <- public abstract void org.graphstream.stream.Source.addAttributeSink(org.graphstream.stream.AttributeSink)
 FileSourceGML <- public abstract void org.graphstream.stream.Source.addElementSink(org.graphstream.stream.ElementSink)
 FileSourceGML <- public abstract void org.graphstream.stream.Source.addSink(org.graphstream.stream.Sink)
 FileSourceGML <- public java.lang.Iterable<org.graphstream.stream.AttributeSink> org.graphstream.stream.SourceBase.attributeSinks()
 FileSourceGML <- public void org.graphstream.stream.file.FileSourceParser.begin(java.io.InputStream) throws java.io.IOException
 FileSourceGML <- public void org.graphstream.stream.file.FileSourceParser.begin(java.io.Reader) throws java.io.IOException
 FileSourceGML <- public void org.graphstream.stream.file.FileSourceParser.begin(java.lang.String) throws java.io.IOException
 FileSourceGML <- public void org.graphstream.stream.file.FileSourceParser.begin(java.net.URL) throws java.io.IOException
 FileSourceGML <- public abstract void org.graphstream.stream.Source.clearAttributeSinks()
 FileSourceGML <- public abstract void org.graphstream.stream.Source.clearElementSinks()
 FileSourceGML <- public abstract void org.graphstream.stream.Source.clearSinks()
 FileSourceGML <- public java.lang.Iterable<org.graphstream.stream.ElementSink> org.graphstream.stream.SourceBase.elementSinks()
 FileSourceGML <- public void org.graphstream.stream.file.FileSourceParser.end() throws java.io.IOException
 FileSourceGML <- public org.graphstream.util.parser.ParserFactory org.graphstream.stream.file.FileSourceGML.getNewParserFactory()
 FileSourceGML <- public boolean org.graphstream.stream.file.FileSourceParser.nextEvents() throws java.io.IOException
 FileSourceGML <- public boolean org.graphstream.stream.file.FileSourceGML.nextStep() throws java.io.IOException
 FileSourceGML <- public void org.graphstream.stream.file.FileSourceParser.readAll(java.io.InputStream) throws java.io.IOException
 FileSourceGML <- public void org.graphstream.stream.file.FileSourceParser.readAll(java.io.Reader) throws java.io.IOException
 FileSourceGML <- public void org.graphstream.stream.file.FileSourceParser.readAll(java.lang.String) throws java.io.IOException
 FileSourceGML <- public void org.graphstream.stream.file.FileSourceParser.readAll(java.net.URL) throws java.io.IOException
 FileSourceGML <- public abstract void org.graphstream.stream.Source.removeAttributeSink(org.graphstream.stream.AttributeSink)
 FileSourceGML <- public abstract void org.graphstream.stream.Source.removeElementSink(org.graphstream.stream.ElementSink)
 FileSourceGML <- public abstract void org.graphstream.stream.Source.removeSink(org.graphstream.stream.Sink)
 FileSourceGML <- public void org.graphstream.stream.SourceBase.sendAttributeChangedEvent(java.lang.String,long,java.lang.String,org.graphstream.stream.SourceBase$ElementType,java.lang.String,org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent,java.lang.Object,java.lang.Object)
 FileSourceGML <- public void org.graphstream.stream.SourceBase.sendAttributeChangedEvent(java.lang.String,java.lang.String,org.graphstream.stream.SourceBase$ElementType,java.lang.String,org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent,java.lang.Object,java.lang.Object)
 FileSourceGML <- public void org.graphstream.stream.SourceBase.sendEdgeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,boolean)
 FileSourceGML <- public void org.graphstream.stream.SourceBase.sendEdgeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)
 FileSourceGML <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 FileSourceGML <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
 FileSourceGML <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceGML <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeChanged(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceGML <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 FileSourceGML <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeRemoved(java.lang.String,java.lang.String,java.lang.String)
 FileSourceGML <- public void org.graphstream.stream.SourceBase.sendEdgeRemoved(java.lang.String,long,java.lang.String)
 FileSourceGML <- public void org.graphstream.stream.SourceBase.sendEdgeRemoved(java.lang.String,java.lang.String)
 FileSourceGML <- public void org.graphstream.stream.SourceBase.sendGraphAttributeAdded(java.lang.String,long,java.lang.String,java.lang.Object)
 FileSourceGML <- public void org.graphstream.stream.SourceBase.sendGraphAttributeAdded(java.lang.String,java.lang.String,java.lang.Object)
 FileSourceGML <- public void org.graphstream.stream.SourceBase.sendGraphAttributeChanged(java.lang.String,long,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceGML <- public void org.graphstream.stream.SourceBase.sendGraphAttributeChanged(java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceGML <- public void org.graphstream.stream.SourceBase.sendGraphAttributeRemoved(java.lang.String,long,java.lang.String)
 FileSourceGML <- public void org.graphstream.stream.SourceBase.sendGraphAttributeRemoved(java.lang.String,java.lang.String)
 FileSourceGML <- public void org.graphstream.stream.SourceBase.sendGraphCleared(java.lang.String)
 FileSourceGML <- public void org.graphstream.stream.SourceBase.sendGraphCleared(java.lang.String,long)
 FileSourceGML <- public void org.graphstream.stream.SourceBase.sendNodeAdded(java.lang.String,long,java.lang.String)
 FileSourceGML <- public void org.graphstream.stream.SourceBase.sendNodeAdded(java.lang.String,java.lang.String)
 FileSourceGML <- public void org.graphstream.stream.SourceBase.sendNodeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 FileSourceGML <- public void org.graphstream.stream.SourceBase.sendNodeAttributeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
 FileSourceGML <- public void org.graphstream.stream.SourceBase.sendNodeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceGML <- public void org.graphstream.stream.SourceBase.sendNodeAttributeChanged(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceGML <- public void org.graphstream.stream.SourceBase.sendNodeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 FileSourceGML <- public void org.graphstream.stream.SourceBase.sendNodeAttributeRemoved(java.lang.String,java.lang.String,java.lang.String)
 FileSourceGML <- public void org.graphstream.stream.SourceBase.sendNodeRemoved(java.lang.String,long,java.lang.String)
 FileSourceGML <- public void org.graphstream.stream.SourceBase.sendNodeRemoved(java.lang.String,java.lang.String)
 FileSourceGML <- public void org.graphstream.stream.SourceBase.sendStepBegins(java.lang.String,double)
 FileSourceGML <- public void org.graphstream.stream.SourceBase.sendStepBegins(java.lang.String,long,double)
 Modifiers for FileSourceLGL: 55
 FileSourceLGL <- public void org.graphstream.stream.file.FileSourceBase.addAttributeClass(java.lang.String,java.lang.String)
 FileSourceLGL <- public abstract void org.graphstream.stream.Source.addAttributeSink(org.graphstream.stream.AttributeSink)
 FileSourceLGL <- public abstract void org.graphstream.stream.Source.addElementSink(org.graphstream.stream.ElementSink)
 FileSourceLGL <- public abstract void org.graphstream.stream.Source.addSink(org.graphstream.stream.Sink)
 FileSourceLGL <- public java.lang.Iterable<org.graphstream.stream.AttributeSink> org.graphstream.stream.SourceBase.attributeSinks()
 FileSourceLGL <- public void org.graphstream.stream.file.FileSourceLGL.begin(java.io.InputStream) throws java.io.IOException
 FileSourceLGL <- public void org.graphstream.stream.file.FileSourceLGL.begin(java.io.Reader) throws java.io.IOException
 FileSourceLGL <- public void org.graphstream.stream.file.FileSourceLGL.begin(java.lang.String) throws java.io.IOException
 FileSourceLGL <- public void org.graphstream.stream.file.FileSourceLGL.begin(java.net.URL) throws java.io.IOException
 FileSourceLGL <- public abstract void org.graphstream.stream.Source.clearAttributeSinks()
 FileSourceLGL <- public abstract void org.graphstream.stream.Source.clearElementSinks()
 FileSourceLGL <- public abstract void org.graphstream.stream.Source.clearSinks()
 FileSourceLGL <- public java.lang.Iterable<org.graphstream.stream.ElementSink> org.graphstream.stream.SourceBase.elementSinks()
 FileSourceLGL <- public void org.graphstream.stream.file.FileSourceLGL.end() throws java.io.IOException
 FileSourceLGL <- public boolean org.graphstream.stream.file.FileSourceLGL.nextEvents() throws java.io.IOException
 FileSourceLGL <- public boolean org.graphstream.stream.file.FileSourceLGL.nextStep() throws java.io.IOException
 FileSourceLGL <- public void org.graphstream.stream.file.FileSourceBase.readAll(java.io.InputStream) throws java.io.IOException
 FileSourceLGL <- public void org.graphstream.stream.file.FileSourceBase.readAll(java.io.Reader) throws java.io.IOException
 FileSourceLGL <- public void org.graphstream.stream.file.FileSourceBase.readAll(java.lang.String) throws java.io.IOException
 FileSourceLGL <- public void org.graphstream.stream.file.FileSourceBase.readAll(java.net.URL) throws java.io.IOException
 FileSourceLGL <- public abstract void org.graphstream.stream.Source.removeAttributeSink(org.graphstream.stream.AttributeSink)
 FileSourceLGL <- public abstract void org.graphstream.stream.Source.removeElementSink(org.graphstream.stream.ElementSink)
 FileSourceLGL <- public abstract void org.graphstream.stream.Source.removeSink(org.graphstream.stream.Sink)
 FileSourceLGL <- public void org.graphstream.stream.SourceBase.sendAttributeChangedEvent(java.lang.String,long,java.lang.String,org.graphstream.stream.SourceBase$ElementType,java.lang.String,org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent,java.lang.Object,java.lang.Object)
 FileSourceLGL <- public void org.graphstream.stream.SourceBase.sendAttributeChangedEvent(java.lang.String,java.lang.String,org.graphstream.stream.SourceBase$ElementType,java.lang.String,org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent,java.lang.Object,java.lang.Object)
 FileSourceLGL <- public void org.graphstream.stream.SourceBase.sendEdgeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,boolean)
 FileSourceLGL <- public void org.graphstream.stream.SourceBase.sendEdgeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)
 FileSourceLGL <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 FileSourceLGL <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
 FileSourceLGL <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceLGL <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeChanged(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceLGL <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 FileSourceLGL <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeRemoved(java.lang.String,java.lang.String,java.lang.String)
 FileSourceLGL <- public void org.graphstream.stream.SourceBase.sendEdgeRemoved(java.lang.String,long,java.lang.String)
 FileSourceLGL <- public void org.graphstream.stream.SourceBase.sendEdgeRemoved(java.lang.String,java.lang.String)
 FileSourceLGL <- public void org.graphstream.stream.SourceBase.sendGraphAttributeAdded(java.lang.String,long,java.lang.String,java.lang.Object)
 FileSourceLGL <- public void org.graphstream.stream.SourceBase.sendGraphAttributeAdded(java.lang.String,java.lang.String,java.lang.Object)
 FileSourceLGL <- public void org.graphstream.stream.SourceBase.sendGraphAttributeChanged(java.lang.String,long,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceLGL <- public void org.graphstream.stream.SourceBase.sendGraphAttributeChanged(java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceLGL <- public void org.graphstream.stream.SourceBase.sendGraphAttributeRemoved(java.lang.String,long,java.lang.String)
 FileSourceLGL <- public void org.graphstream.stream.SourceBase.sendGraphAttributeRemoved(java.lang.String,java.lang.String)
 FileSourceLGL <- public void org.graphstream.stream.SourceBase.sendGraphCleared(java.lang.String)
 FileSourceLGL <- public void org.graphstream.stream.SourceBase.sendGraphCleared(java.lang.String,long)
 FileSourceLGL <- public void org.graphstream.stream.SourceBase.sendNodeAdded(java.lang.String,long,java.lang.String)
 FileSourceLGL <- public void org.graphstream.stream.SourceBase.sendNodeAdded(java.lang.String,java.lang.String)
 FileSourceLGL <- public void org.graphstream.stream.SourceBase.sendNodeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 FileSourceLGL <- public void org.graphstream.stream.SourceBase.sendNodeAttributeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
 FileSourceLGL <- public void org.graphstream.stream.SourceBase.sendNodeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceLGL <- public void org.graphstream.stream.SourceBase.sendNodeAttributeChanged(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceLGL <- public void org.graphstream.stream.SourceBase.sendNodeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 FileSourceLGL <- public void org.graphstream.stream.SourceBase.sendNodeAttributeRemoved(java.lang.String,java.lang.String,java.lang.String)
 FileSourceLGL <- public void org.graphstream.stream.SourceBase.sendNodeRemoved(java.lang.String,long,java.lang.String)
 FileSourceLGL <- public void org.graphstream.stream.SourceBase.sendNodeRemoved(java.lang.String,java.lang.String)
 FileSourceLGL <- public void org.graphstream.stream.SourceBase.sendStepBegins(java.lang.String,double)
 FileSourceLGL <- public void org.graphstream.stream.SourceBase.sendStepBegins(java.lang.String,long,double)
 Modifiers for FileSourceNCol: 55
 FileSourceNCol <- public void org.graphstream.stream.file.FileSourceBase.addAttributeClass(java.lang.String,java.lang.String)
 FileSourceNCol <- public abstract void org.graphstream.stream.Source.addAttributeSink(org.graphstream.stream.AttributeSink)
 FileSourceNCol <- public abstract void org.graphstream.stream.Source.addElementSink(org.graphstream.stream.ElementSink)
 FileSourceNCol <- public abstract void org.graphstream.stream.Source.addSink(org.graphstream.stream.Sink)
 FileSourceNCol <- public java.lang.Iterable<org.graphstream.stream.AttributeSink> org.graphstream.stream.SourceBase.attributeSinks()
 FileSourceNCol <- public void org.graphstream.stream.file.FileSourceNCol.begin(java.io.InputStream) throws java.io.IOException
 FileSourceNCol <- public void org.graphstream.stream.file.FileSourceNCol.begin(java.io.Reader) throws java.io.IOException
 FileSourceNCol <- public void org.graphstream.stream.file.FileSourceNCol.begin(java.lang.String) throws java.io.IOException
 FileSourceNCol <- public void org.graphstream.stream.file.FileSourceNCol.begin(java.net.URL) throws java.io.IOException
 FileSourceNCol <- public abstract void org.graphstream.stream.Source.clearAttributeSinks()
 FileSourceNCol <- public abstract void org.graphstream.stream.Source.clearElementSinks()
 FileSourceNCol <- public abstract void org.graphstream.stream.Source.clearSinks()
 FileSourceNCol <- public java.lang.Iterable<org.graphstream.stream.ElementSink> org.graphstream.stream.SourceBase.elementSinks()
 FileSourceNCol <- public void org.graphstream.stream.file.FileSourceNCol.end() throws java.io.IOException
 FileSourceNCol <- public boolean org.graphstream.stream.file.FileSourceNCol.nextEvents() throws java.io.IOException
 FileSourceNCol <- public boolean org.graphstream.stream.file.FileSourceNCol.nextStep() throws java.io.IOException
 FileSourceNCol <- public void org.graphstream.stream.file.FileSourceBase.readAll(java.io.InputStream) throws java.io.IOException
 FileSourceNCol <- public void org.graphstream.stream.file.FileSourceBase.readAll(java.io.Reader) throws java.io.IOException
 FileSourceNCol <- public void org.graphstream.stream.file.FileSourceBase.readAll(java.lang.String) throws java.io.IOException
 FileSourceNCol <- public void org.graphstream.stream.file.FileSourceBase.readAll(java.net.URL) throws java.io.IOException
 FileSourceNCol <- public abstract void org.graphstream.stream.Source.removeAttributeSink(org.graphstream.stream.AttributeSink)
 FileSourceNCol <- public abstract void org.graphstream.stream.Source.removeElementSink(org.graphstream.stream.ElementSink)
 FileSourceNCol <- public abstract void org.graphstream.stream.Source.removeSink(org.graphstream.stream.Sink)
 FileSourceNCol <- public void org.graphstream.stream.SourceBase.sendAttributeChangedEvent(java.lang.String,long,java.lang.String,org.graphstream.stream.SourceBase$ElementType,java.lang.String,org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent,java.lang.Object,java.lang.Object)
 FileSourceNCol <- public void org.graphstream.stream.SourceBase.sendAttributeChangedEvent(java.lang.String,java.lang.String,org.graphstream.stream.SourceBase$ElementType,java.lang.String,org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent,java.lang.Object,java.lang.Object)
 FileSourceNCol <- public void org.graphstream.stream.SourceBase.sendEdgeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,boolean)
 FileSourceNCol <- public void org.graphstream.stream.SourceBase.sendEdgeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)
 FileSourceNCol <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 FileSourceNCol <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
 FileSourceNCol <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceNCol <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeChanged(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceNCol <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 FileSourceNCol <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeRemoved(java.lang.String,java.lang.String,java.lang.String)
 FileSourceNCol <- public void org.graphstream.stream.SourceBase.sendEdgeRemoved(java.lang.String,long,java.lang.String)
 FileSourceNCol <- public void org.graphstream.stream.SourceBase.sendEdgeRemoved(java.lang.String,java.lang.String)
 FileSourceNCol <- public void org.graphstream.stream.SourceBase.sendGraphAttributeAdded(java.lang.String,long,java.lang.String,java.lang.Object)
 FileSourceNCol <- public void org.graphstream.stream.SourceBase.sendGraphAttributeAdded(java.lang.String,java.lang.String,java.lang.Object)
 FileSourceNCol <- public void org.graphstream.stream.SourceBase.sendGraphAttributeChanged(java.lang.String,long,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceNCol <- public void org.graphstream.stream.SourceBase.sendGraphAttributeChanged(java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceNCol <- public void org.graphstream.stream.SourceBase.sendGraphAttributeRemoved(java.lang.String,long,java.lang.String)
 FileSourceNCol <- public void org.graphstream.stream.SourceBase.sendGraphAttributeRemoved(java.lang.String,java.lang.String)
 FileSourceNCol <- public void org.graphstream.stream.SourceBase.sendGraphCleared(java.lang.String)
 FileSourceNCol <- public void org.graphstream.stream.SourceBase.sendGraphCleared(java.lang.String,long)
 FileSourceNCol <- public void org.graphstream.stream.SourceBase.sendNodeAdded(java.lang.String,long,java.lang.String)
 FileSourceNCol <- public void org.graphstream.stream.SourceBase.sendNodeAdded(java.lang.String,java.lang.String)
 FileSourceNCol <- public void org.graphstream.stream.SourceBase.sendNodeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 FileSourceNCol <- public void org.graphstream.stream.SourceBase.sendNodeAttributeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
 FileSourceNCol <- public void org.graphstream.stream.SourceBase.sendNodeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceNCol <- public void org.graphstream.stream.SourceBase.sendNodeAttributeChanged(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceNCol <- public void org.graphstream.stream.SourceBase.sendNodeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 FileSourceNCol <- public void org.graphstream.stream.SourceBase.sendNodeAttributeRemoved(java.lang.String,java.lang.String,java.lang.String)
 FileSourceNCol <- public void org.graphstream.stream.SourceBase.sendNodeRemoved(java.lang.String,long,java.lang.String)
 FileSourceNCol <- public void org.graphstream.stream.SourceBase.sendNodeRemoved(java.lang.String,java.lang.String)
 FileSourceNCol <- public void org.graphstream.stream.SourceBase.sendStepBegins(java.lang.String,double)
 FileSourceNCol <- public void org.graphstream.stream.SourceBase.sendStepBegins(java.lang.String,long,double)
 Modifiers for FileSourceEdge: 55
 FileSourceEdge <- public void org.graphstream.stream.file.FileSourceBase.addAttributeClass(java.lang.String,java.lang.String)
 FileSourceEdge <- public abstract void org.graphstream.stream.Source.addAttributeSink(org.graphstream.stream.AttributeSink)
 FileSourceEdge <- public abstract void org.graphstream.stream.Source.addElementSink(org.graphstream.stream.ElementSink)
 FileSourceEdge <- public abstract void org.graphstream.stream.Source.addSink(org.graphstream.stream.Sink)
 FileSourceEdge <- public java.lang.Iterable<org.graphstream.stream.AttributeSink> org.graphstream.stream.SourceBase.attributeSinks()
 FileSourceEdge <- public void org.graphstream.stream.file.FileSourceEdge.begin(java.io.InputStream) throws java.io.IOException
 FileSourceEdge <- public void org.graphstream.stream.file.FileSourceEdge.begin(java.io.Reader) throws java.io.IOException
 FileSourceEdge <- public void org.graphstream.stream.file.FileSourceEdge.begin(java.lang.String) throws java.io.IOException
 FileSourceEdge <- public void org.graphstream.stream.file.FileSourceEdge.begin(java.net.URL) throws java.io.IOException
 FileSourceEdge <- public abstract void org.graphstream.stream.Source.clearAttributeSinks()
 FileSourceEdge <- public abstract void org.graphstream.stream.Source.clearElementSinks()
 FileSourceEdge <- public abstract void org.graphstream.stream.Source.clearSinks()
 FileSourceEdge <- public java.lang.Iterable<org.graphstream.stream.ElementSink> org.graphstream.stream.SourceBase.elementSinks()
 FileSourceEdge <- public void org.graphstream.stream.file.FileSourceEdge.end() throws java.io.IOException
 FileSourceEdge <- public boolean org.graphstream.stream.file.FileSourceEdge.nextEvents() throws java.io.IOException
 FileSourceEdge <- public boolean org.graphstream.stream.file.FileSourceEdge.nextStep() throws java.io.IOException
 FileSourceEdge <- public void org.graphstream.stream.file.FileSourceBase.readAll(java.io.InputStream) throws java.io.IOException
 FileSourceEdge <- public void org.graphstream.stream.file.FileSourceBase.readAll(java.io.Reader) throws java.io.IOException
 FileSourceEdge <- public void org.graphstream.stream.file.FileSourceBase.readAll(java.lang.String) throws java.io.IOException
 FileSourceEdge <- public void org.graphstream.stream.file.FileSourceBase.readAll(java.net.URL) throws java.io.IOException
 FileSourceEdge <- public abstract void org.graphstream.stream.Source.removeAttributeSink(org.graphstream.stream.AttributeSink)
 FileSourceEdge <- public abstract void org.graphstream.stream.Source.removeElementSink(org.graphstream.stream.ElementSink)
 FileSourceEdge <- public abstract void org.graphstream.stream.Source.removeSink(org.graphstream.stream.Sink)
 FileSourceEdge <- public void org.graphstream.stream.SourceBase.sendAttributeChangedEvent(java.lang.String,long,java.lang.String,org.graphstream.stream.SourceBase$ElementType,java.lang.String,org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent,java.lang.Object,java.lang.Object)
 FileSourceEdge <- public void org.graphstream.stream.SourceBase.sendAttributeChangedEvent(java.lang.String,java.lang.String,org.graphstream.stream.SourceBase$ElementType,java.lang.String,org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent,java.lang.Object,java.lang.Object)
 FileSourceEdge <- public void org.graphstream.stream.SourceBase.sendEdgeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,boolean)
 FileSourceEdge <- public void org.graphstream.stream.SourceBase.sendEdgeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)
 FileSourceEdge <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 FileSourceEdge <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
 FileSourceEdge <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceEdge <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeChanged(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceEdge <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 FileSourceEdge <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeRemoved(java.lang.String,java.lang.String,java.lang.String)
 FileSourceEdge <- public void org.graphstream.stream.SourceBase.sendEdgeRemoved(java.lang.String,long,java.lang.String)
 FileSourceEdge <- public void org.graphstream.stream.SourceBase.sendEdgeRemoved(java.lang.String,java.lang.String)
 FileSourceEdge <- public void org.graphstream.stream.SourceBase.sendGraphAttributeAdded(java.lang.String,long,java.lang.String,java.lang.Object)
 FileSourceEdge <- public void org.graphstream.stream.SourceBase.sendGraphAttributeAdded(java.lang.String,java.lang.String,java.lang.Object)
 FileSourceEdge <- public void org.graphstream.stream.SourceBase.sendGraphAttributeChanged(java.lang.String,long,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceEdge <- public void org.graphstream.stream.SourceBase.sendGraphAttributeChanged(java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceEdge <- public void org.graphstream.stream.SourceBase.sendGraphAttributeRemoved(java.lang.String,long,java.lang.String)
 FileSourceEdge <- public void org.graphstream.stream.SourceBase.sendGraphAttributeRemoved(java.lang.String,java.lang.String)
 FileSourceEdge <- public void org.graphstream.stream.SourceBase.sendGraphCleared(java.lang.String)
 FileSourceEdge <- public void org.graphstream.stream.SourceBase.sendGraphCleared(java.lang.String,long)
 FileSourceEdge <- public void org.graphstream.stream.SourceBase.sendNodeAdded(java.lang.String,long,java.lang.String)
 FileSourceEdge <- public void org.graphstream.stream.SourceBase.sendNodeAdded(java.lang.String,java.lang.String)
 FileSourceEdge <- public void org.graphstream.stream.SourceBase.sendNodeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 FileSourceEdge <- public void org.graphstream.stream.SourceBase.sendNodeAttributeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
 FileSourceEdge <- public void org.graphstream.stream.SourceBase.sendNodeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceEdge <- public void org.graphstream.stream.SourceBase.sendNodeAttributeChanged(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceEdge <- public void org.graphstream.stream.SourceBase.sendNodeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 FileSourceEdge <- public void org.graphstream.stream.SourceBase.sendNodeAttributeRemoved(java.lang.String,java.lang.String,java.lang.String)
 FileSourceEdge <- public void org.graphstream.stream.SourceBase.sendNodeRemoved(java.lang.String,long,java.lang.String)
 FileSourceEdge <- public void org.graphstream.stream.SourceBase.sendNodeRemoved(java.lang.String,java.lang.String)
 FileSourceEdge <- public void org.graphstream.stream.SourceBase.sendStepBegins(java.lang.String,double)
 FileSourceEdge <- public void org.graphstream.stream.SourceBase.sendStepBegins(java.lang.String,long,double)
 Modifiers for FileSourceDGS1And2: 55
 FileSourceDGS1And2 <- public void org.graphstream.stream.file.FileSourceBase.addAttributeClass(java.lang.String,java.lang.String)
 FileSourceDGS1And2 <- public abstract void org.graphstream.stream.Source.addAttributeSink(org.graphstream.stream.AttributeSink)
 FileSourceDGS1And2 <- public abstract void org.graphstream.stream.Source.addElementSink(org.graphstream.stream.ElementSink)
 FileSourceDGS1And2 <- public abstract void org.graphstream.stream.Source.addSink(org.graphstream.stream.Sink)
 FileSourceDGS1And2 <- public java.lang.Iterable<org.graphstream.stream.AttributeSink> org.graphstream.stream.SourceBase.attributeSinks()
 FileSourceDGS1And2 <- public void org.graphstream.stream.file.FileSourceDGS1And2.begin(java.io.InputStream) throws java.io.IOException
 FileSourceDGS1And2 <- public void org.graphstream.stream.file.FileSourceDGS1And2.begin(java.io.Reader) throws java.io.IOException
 FileSourceDGS1And2 <- public void org.graphstream.stream.file.FileSourceDGS1And2.begin(java.lang.String) throws java.io.IOException
 FileSourceDGS1And2 <- public void org.graphstream.stream.file.FileSourceDGS1And2.begin(java.net.URL) throws java.io.IOException
 FileSourceDGS1And2 <- public abstract void org.graphstream.stream.Source.clearAttributeSinks()
 FileSourceDGS1And2 <- public abstract void org.graphstream.stream.Source.clearElementSinks()
 FileSourceDGS1And2 <- public abstract void org.graphstream.stream.Source.clearSinks()
 FileSourceDGS1And2 <- public java.lang.Iterable<org.graphstream.stream.ElementSink> org.graphstream.stream.SourceBase.elementSinks()
 FileSourceDGS1And2 <- public void org.graphstream.stream.file.FileSourceBase.end() throws java.io.IOException
 FileSourceDGS1And2 <- public boolean org.graphstream.stream.file.FileSourceDGS1And2.nextEvents() throws java.io.IOException
 FileSourceDGS1And2 <- public boolean org.graphstream.stream.file.FileSourceDGS1And2.nextStep() throws java.io.IOException
 FileSourceDGS1And2 <- public void org.graphstream.stream.file.FileSourceBase.readAll(java.io.InputStream) throws java.io.IOException
 FileSourceDGS1And2 <- public void org.graphstream.stream.file.FileSourceBase.readAll(java.io.Reader) throws java.io.IOException
 FileSourceDGS1And2 <- public void org.graphstream.stream.file.FileSourceBase.readAll(java.lang.String) throws java.io.IOException
 FileSourceDGS1And2 <- public void org.graphstream.stream.file.FileSourceBase.readAll(java.net.URL) throws java.io.IOException
 FileSourceDGS1And2 <- public abstract void org.graphstream.stream.Source.removeAttributeSink(org.graphstream.stream.AttributeSink)
 FileSourceDGS1And2 <- public abstract void org.graphstream.stream.Source.removeElementSink(org.graphstream.stream.ElementSink)
 FileSourceDGS1And2 <- public abstract void org.graphstream.stream.Source.removeSink(org.graphstream.stream.Sink)
 FileSourceDGS1And2 <- public void org.graphstream.stream.SourceBase.sendAttributeChangedEvent(java.lang.String,long,java.lang.String,org.graphstream.stream.SourceBase$ElementType,java.lang.String,org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent,java.lang.Object,java.lang.Object)
 FileSourceDGS1And2 <- public void org.graphstream.stream.SourceBase.sendAttributeChangedEvent(java.lang.String,java.lang.String,org.graphstream.stream.SourceBase$ElementType,java.lang.String,org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent,java.lang.Object,java.lang.Object)
 FileSourceDGS1And2 <- public void org.graphstream.stream.SourceBase.sendEdgeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,boolean)
 FileSourceDGS1And2 <- public void org.graphstream.stream.SourceBase.sendEdgeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)
 FileSourceDGS1And2 <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 FileSourceDGS1And2 <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
 FileSourceDGS1And2 <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceDGS1And2 <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeChanged(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceDGS1And2 <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 FileSourceDGS1And2 <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeRemoved(java.lang.String,java.lang.String,java.lang.String)
 FileSourceDGS1And2 <- public void org.graphstream.stream.SourceBase.sendEdgeRemoved(java.lang.String,long,java.lang.String)
 FileSourceDGS1And2 <- public void org.graphstream.stream.SourceBase.sendEdgeRemoved(java.lang.String,java.lang.String)
 FileSourceDGS1And2 <- public void org.graphstream.stream.SourceBase.sendGraphAttributeAdded(java.lang.String,long,java.lang.String,java.lang.Object)
 FileSourceDGS1And2 <- public void org.graphstream.stream.SourceBase.sendGraphAttributeAdded(java.lang.String,java.lang.String,java.lang.Object)
 FileSourceDGS1And2 <- public void org.graphstream.stream.SourceBase.sendGraphAttributeChanged(java.lang.String,long,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceDGS1And2 <- public void org.graphstream.stream.SourceBase.sendGraphAttributeChanged(java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceDGS1And2 <- public void org.graphstream.stream.SourceBase.sendGraphAttributeRemoved(java.lang.String,long,java.lang.String)
 FileSourceDGS1And2 <- public void org.graphstream.stream.SourceBase.sendGraphAttributeRemoved(java.lang.String,java.lang.String)
 FileSourceDGS1And2 <- public void org.graphstream.stream.SourceBase.sendGraphCleared(java.lang.String)
 FileSourceDGS1And2 <- public void org.graphstream.stream.SourceBase.sendGraphCleared(java.lang.String,long)
 FileSourceDGS1And2 <- public void org.graphstream.stream.SourceBase.sendNodeAdded(java.lang.String,long,java.lang.String)
 FileSourceDGS1And2 <- public void org.graphstream.stream.SourceBase.sendNodeAdded(java.lang.String,java.lang.String)
 FileSourceDGS1And2 <- public void org.graphstream.stream.SourceBase.sendNodeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 FileSourceDGS1And2 <- public void org.graphstream.stream.SourceBase.sendNodeAttributeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
 FileSourceDGS1And2 <- public void org.graphstream.stream.SourceBase.sendNodeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceDGS1And2 <- public void org.graphstream.stream.SourceBase.sendNodeAttributeChanged(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSourceDGS1And2 <- public void org.graphstream.stream.SourceBase.sendNodeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 FileSourceDGS1And2 <- public void org.graphstream.stream.SourceBase.sendNodeAttributeRemoved(java.lang.String,java.lang.String,java.lang.String)
 FileSourceDGS1And2 <- public void org.graphstream.stream.SourceBase.sendNodeRemoved(java.lang.String,long,java.lang.String)
 FileSourceDGS1And2 <- public void org.graphstream.stream.SourceBase.sendNodeRemoved(java.lang.String,java.lang.String)
 FileSourceDGS1And2 <- public void org.graphstream.stream.SourceBase.sendStepBegins(java.lang.String,double)
 FileSourceDGS1And2 <- public void org.graphstream.stream.SourceBase.sendStepBegins(java.lang.String,long,double)
 Modifiers for FileSinkImages: 46
 FileSinkImages <- public void org.graphstream.stream.file.FileSinkImages.addLogo(java.lang.String,int,int)
 FileSinkImages <- public void org.graphstream.stream.file.FileSinkImages.begin(java.io.OutputStream) throws java.io.IOException
 FileSinkImages <- public void org.graphstream.stream.file.FileSinkImages.begin(java.io.Writer) throws java.io.IOException
 FileSinkImages <- public void org.graphstream.stream.file.FileSinkImages.begin(java.lang.String) throws java.io.IOException
 FileSinkImages <- public void org.graphstream.stream.file.FileSinkImages.edgeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,boolean)
 FileSinkImages <- public void org.graphstream.stream.file.FileSinkImages.edgeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 FileSinkImages <- public void org.graphstream.stream.file.FileSinkImages.edgeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSinkImages <- public void org.graphstream.stream.file.FileSinkImages.edgeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 FileSinkImages <- public void org.graphstream.stream.file.FileSinkImages.edgeRemoved(java.lang.String,long,java.lang.String)
 FileSinkImages <- public void org.graphstream.stream.file.FileSinkImages.end() throws java.io.IOException
 FileSinkImages <- public void org.graphstream.stream.file.FileSinkImages.flush() throws java.io.IOException
 FileSinkImages <- public org.graphstream.ui.geom.Point3 org.graphstream.stream.file.FileSinkImages.getViewCenter()
 FileSinkImages <- public double org.graphstream.stream.file.FileSinkImages.getViewPercent()
 FileSinkImages <- public void org.graphstream.stream.file.FileSinkImages.graphAttributeAdded(java.lang.String,long,java.lang.String,java.lang.Object)
 FileSinkImages <- public void org.graphstream.stream.file.FileSinkImages.graphAttributeChanged(java.lang.String,long,java.lang.String,java.lang.Object,java.lang.Object)
 FileSinkImages <- public void org.graphstream.stream.file.FileSinkImages.graphAttributeRemoved(java.lang.String,long,java.lang.String)
 FileSinkImages <- public void org.graphstream.stream.file.FileSinkImages.graphCleared(java.lang.String,long)
 FileSinkImages <- public void org.graphstream.stream.file.FileSinkImages.nodeAdded(java.lang.String,long,java.lang.String)
 FileSinkImages <- public void org.graphstream.stream.file.FileSinkImages.nodeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 FileSinkImages <- public void org.graphstream.stream.file.FileSinkImages.nodeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSinkImages <- public void org.graphstream.stream.file.FileSinkImages.nodeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 FileSinkImages <- public void org.graphstream.stream.file.FileSinkImages.nodeRemoved(java.lang.String,long,java.lang.String)
 FileSinkImages <- public void org.graphstream.stream.file.FileSinkImages.outputNewImage()
 FileSinkImages <- public synchronized void org.graphstream.stream.file.FileSinkImages.outputNewImage(java.lang.String)
 FileSinkImages <- public void org.graphstream.stream.file.FileSinkImages.setAutofit(boolean)
 FileSinkImages <- public void org.graphstream.stream.file.FileSinkImages.setClearImageBeforeOutputEnabled(boolean)
 FileSinkImages <- public synchronized void org.graphstream.stream.file.FileSinkImages.setLayoutPolicy(org.graphstream.stream.file.FileSinkImages$LayoutPolicy)
 FileSinkImages <- public void org.graphstream.stream.file.FileSinkImages.setLayoutStabilizationLimit(double)
 FileSinkImages <- public void org.graphstream.stream.file.FileSinkImages.setLayoutStepAfterStabilization(int)
 FileSinkImages <- public void org.graphstream.stream.file.FileSinkImages.setLayoutStepPerFrame(int)
 FileSinkImages <- public void org.graphstream.stream.file.FileSinkImages.setOutputPolicy(org.graphstream.stream.file.FileSinkImages$OutputPolicy)
 FileSinkImages <- public void org.graphstream.stream.file.FileSinkImages.setOutputRunnerDelay(long)
 FileSinkImages <- public synchronized void org.graphstream.stream.file.FileSinkImages.setOutputRunnerEnabled(boolean)
 FileSinkImages <- public void org.graphstream.stream.file.FileSinkImages.setQuality(org.graphstream.stream.file.FileSinkImages$Quality)
 FileSinkImages <- public void org.graphstream.stream.file.FileSinkImages.setRenderer(org.graphstream.stream.file.FileSinkImages$RendererType)
 FileSinkImages <- public void org.graphstream.stream.file.FileSinkImages.setResolution(int,int)
 FileSinkImages <- public void org.graphstream.stream.file.FileSinkImages.setResolution(org.graphstream.stream.file.FileSinkImages$Resolution)
 FileSinkImages <- public void org.graphstream.stream.file.FileSinkImages.setStyleSheet(java.lang.String)
 FileSinkImages <- public void org.graphstream.stream.file.FileSinkImages.setViewCenter(double,double)
 FileSinkImages <- public void org.graphstream.stream.file.FileSinkImages.setViewPercent(double)
 FileSinkImages <- public void org.graphstream.stream.file.FileSinkImages.stabilizeLayout(double)
 FileSinkImages <- public void org.graphstream.stream.file.FileSinkImages.stepBegins(java.lang.String,long,double)
 FileSinkImages <- public static void org.graphstream.stream.file.FileSinkImages.usage()
 FileSinkImages <- public void org.graphstream.stream.file.FileSinkImages.writeAll(org.graphstream.graph.Graph,java.io.OutputStream) throws java.io.IOException
 FileSinkImages <- public void org.graphstream.stream.file.FileSinkImages.writeAll(org.graphstream.graph.Graph,java.io.Writer) throws java.io.IOException
 FileSinkImages <- public synchronized void org.graphstream.stream.file.FileSinkImages.writeAll(org.graphstream.graph.Graph,java.lang.String) throws java.io.IOException
 Modifiers for FileSinkSVG2: 23
 FileSinkSVG2 <- public void org.graphstream.stream.file.FileSinkSVG2.begin(java.io.OutputStream) throws java.io.IOException
 FileSinkSVG2 <- public void org.graphstream.stream.file.FileSinkSVG2.begin(java.io.Writer) throws java.io.IOException
 FileSinkSVG2 <- public void org.graphstream.stream.file.FileSinkSVG2.begin(java.lang.String) throws java.io.IOException
 FileSinkSVG2 <- public void org.graphstream.stream.file.FileSinkSVG2.edgeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,boolean)
 FileSinkSVG2 <- public void org.graphstream.stream.file.FileSinkSVG2.edgeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 FileSinkSVG2 <- public void org.graphstream.stream.file.FileSinkSVG2.edgeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSinkSVG2 <- public void org.graphstream.stream.file.FileSinkSVG2.edgeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 FileSinkSVG2 <- public void org.graphstream.stream.file.FileSinkSVG2.edgeRemoved(java.lang.String,long,java.lang.String)
 FileSinkSVG2 <- public void org.graphstream.stream.file.FileSinkSVG2.end() throws java.io.IOException
 FileSinkSVG2 <- public void org.graphstream.stream.file.FileSinkSVG2.flush() throws java.io.IOException
 FileSinkSVG2 <- public void org.graphstream.stream.file.FileSinkSVG2.graphAttributeAdded(java.lang.String,long,java.lang.String,java.lang.Object)
 FileSinkSVG2 <- public void org.graphstream.stream.file.FileSinkSVG2.graphAttributeChanged(java.lang.String,long,java.lang.String,java.lang.Object,java.lang.Object)
 FileSinkSVG2 <- public void org.graphstream.stream.file.FileSinkSVG2.graphAttributeRemoved(java.lang.String,long,java.lang.String)
 FileSinkSVG2 <- public void org.graphstream.stream.file.FileSinkSVG2.graphCleared(java.lang.String,long)
 FileSinkSVG2 <- public void org.graphstream.stream.file.FileSinkSVG2.nodeAdded(java.lang.String,long,java.lang.String)
 FileSinkSVG2 <- public void org.graphstream.stream.file.FileSinkSVG2.nodeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 FileSinkSVG2 <- public void org.graphstream.stream.file.FileSinkSVG2.nodeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSinkSVG2 <- public void org.graphstream.stream.file.FileSinkSVG2.nodeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 FileSinkSVG2 <- public void org.graphstream.stream.file.FileSinkSVG2.nodeRemoved(java.lang.String,long,java.lang.String)
 FileSinkSVG2 <- public void org.graphstream.stream.file.FileSinkSVG2.stepBegins(java.lang.String,long,double)
 FileSinkSVG2 <- public void org.graphstream.stream.file.FileSinkSVG2.writeAll(org.graphstream.graph.Graph,java.io.OutputStream) throws java.io.IOException
 FileSinkSVG2 <- public void org.graphstream.stream.file.FileSinkSVG2.writeAll(org.graphstream.graph.Graph,java.io.Writer) throws java.io.IOException
 FileSinkSVG2 <- public void org.graphstream.stream.file.FileSinkSVG2.writeAll(org.graphstream.graph.Graph,java.lang.String) throws java.io.IOException
 Modifiers for FileSinkSVG: 23
 FileSinkSVG <- public void org.graphstream.stream.file.FileSinkBase.begin(java.io.OutputStream) throws java.io.IOException
 FileSinkSVG <- public void org.graphstream.stream.file.FileSinkBase.begin(java.io.Writer) throws java.io.IOException
 FileSinkSVG <- public void org.graphstream.stream.file.FileSinkBase.begin(java.lang.String) throws java.io.IOException
 FileSinkSVG <- public void org.graphstream.stream.file.FileSinkSVG.edgeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,boolean)
 FileSinkSVG <- public void org.graphstream.stream.file.FileSinkSVG.edgeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 FileSinkSVG <- public void org.graphstream.stream.file.FileSinkSVG.edgeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSinkSVG <- public void org.graphstream.stream.file.FileSinkSVG.edgeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 FileSinkSVG <- public void org.graphstream.stream.file.FileSinkSVG.edgeRemoved(java.lang.String,long,java.lang.String)
 FileSinkSVG <- public void org.graphstream.stream.file.FileSinkSVG.end() throws java.io.IOException
 FileSinkSVG <- public void org.graphstream.stream.file.FileSinkBase.flush() throws java.io.IOException
 FileSinkSVG <- public void org.graphstream.stream.file.FileSinkSVG.graphAttributeAdded(java.lang.String,long,java.lang.String,java.lang.Object)
 FileSinkSVG <- public void org.graphstream.stream.file.FileSinkSVG.graphAttributeChanged(java.lang.String,long,java.lang.String,java.lang.Object,java.lang.Object)
 FileSinkSVG <- public void org.graphstream.stream.file.FileSinkSVG.graphAttributeRemoved(java.lang.String,long,java.lang.String)
 FileSinkSVG <- public void org.graphstream.stream.file.FileSinkSVG.graphCleared(java.lang.String,long)
 FileSinkSVG <- public void org.graphstream.stream.file.FileSinkSVG.nodeAdded(java.lang.String,long,java.lang.String)
 FileSinkSVG <- public void org.graphstream.stream.file.FileSinkSVG.nodeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 FileSinkSVG <- public void org.graphstream.stream.file.FileSinkSVG.nodeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSinkSVG <- public void org.graphstream.stream.file.FileSinkSVG.nodeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 FileSinkSVG <- public void org.graphstream.stream.file.FileSinkSVG.nodeRemoved(java.lang.String,long,java.lang.String)
 FileSinkSVG <- public void org.graphstream.stream.file.FileSinkSVG.stepBegins(java.lang.String,long,double)
 FileSinkSVG <- public void org.graphstream.stream.file.FileSinkBase.writeAll(org.graphstream.graph.Graph,java.io.OutputStream) throws java.io.IOException
 FileSinkSVG <- public void org.graphstream.stream.file.FileSinkBase.writeAll(org.graphstream.graph.Graph,java.io.Writer) throws java.io.IOException
 FileSinkSVG <- public void org.graphstream.stream.file.FileSinkBase.writeAll(org.graphstream.graph.Graph,java.lang.String) throws java.io.IOException
 Modifiers for FileSinkGEXF: 23
 FileSinkGEXF <- public void org.graphstream.stream.file.FileSinkBase.begin(java.io.OutputStream) throws java.io.IOException
 FileSinkGEXF <- public void org.graphstream.stream.file.FileSinkBase.begin(java.io.Writer) throws java.io.IOException
 FileSinkGEXF <- public void org.graphstream.stream.file.FileSinkBase.begin(java.lang.String) throws java.io.IOException
 FileSinkGEXF <- public void org.graphstream.stream.file.FileSinkGEXF.edgeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,boolean)
 FileSinkGEXF <- public void org.graphstream.stream.file.FileSinkGEXF.edgeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 FileSinkGEXF <- public void org.graphstream.stream.file.FileSinkGEXF.edgeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSinkGEXF <- public void org.graphstream.stream.file.FileSinkGEXF.edgeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 FileSinkGEXF <- public void org.graphstream.stream.file.FileSinkGEXF.edgeRemoved(java.lang.String,long,java.lang.String)
 FileSinkGEXF <- public void org.graphstream.stream.file.FileSinkBase.end() throws java.io.IOException
 FileSinkGEXF <- public void org.graphstream.stream.file.FileSinkBase.flush() throws java.io.IOException
 FileSinkGEXF <- public void org.graphstream.stream.file.FileSinkGEXF.graphAttributeAdded(java.lang.String,long,java.lang.String,java.lang.Object)
 FileSinkGEXF <- public void org.graphstream.stream.file.FileSinkGEXF.graphAttributeChanged(java.lang.String,long,java.lang.String,java.lang.Object,java.lang.Object)
 FileSinkGEXF <- public void org.graphstream.stream.file.FileSinkGEXF.graphAttributeRemoved(java.lang.String,long,java.lang.String)
 FileSinkGEXF <- public void org.graphstream.stream.file.FileSinkGEXF.graphCleared(java.lang.String,long)
 FileSinkGEXF <- public void org.graphstream.stream.file.FileSinkGEXF.nodeAdded(java.lang.String,long,java.lang.String)
 FileSinkGEXF <- public void org.graphstream.stream.file.FileSinkGEXF.nodeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 FileSinkGEXF <- public void org.graphstream.stream.file.FileSinkGEXF.nodeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSinkGEXF <- public void org.graphstream.stream.file.FileSinkGEXF.nodeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 FileSinkGEXF <- public void org.graphstream.stream.file.FileSinkGEXF.nodeRemoved(java.lang.String,long,java.lang.String)
 FileSinkGEXF <- public void org.graphstream.stream.file.FileSinkGEXF.stepBegins(java.lang.String,long,double)
 FileSinkGEXF <- public void org.graphstream.stream.file.FileSinkBase.writeAll(org.graphstream.graph.Graph,java.io.OutputStream) throws java.io.IOException
 FileSinkGEXF <- public void org.graphstream.stream.file.FileSinkBase.writeAll(org.graphstream.graph.Graph,java.io.Writer) throws java.io.IOException
 FileSinkGEXF <- public void org.graphstream.stream.file.FileSinkBase.writeAll(org.graphstream.graph.Graph,java.lang.String) throws java.io.IOException
 Modifiers for FileSinkDGS: 23
 FileSinkDGS <- public void org.graphstream.stream.file.FileSinkBase.begin(java.io.OutputStream) throws java.io.IOException
 FileSinkDGS <- public void org.graphstream.stream.file.FileSinkBase.begin(java.io.Writer) throws java.io.IOException
 FileSinkDGS <- public void org.graphstream.stream.file.FileSinkBase.begin(java.lang.String) throws java.io.IOException
 FileSinkDGS <- public void org.graphstream.stream.file.FileSinkDGS.edgeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,boolean)
 FileSinkDGS <- public void org.graphstream.stream.file.FileSinkDGS.edgeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 FileSinkDGS <- public void org.graphstream.stream.file.FileSinkDGS.edgeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSinkDGS <- public void org.graphstream.stream.file.FileSinkDGS.edgeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 FileSinkDGS <- public void org.graphstream.stream.file.FileSinkDGS.edgeRemoved(java.lang.String,long,java.lang.String)
 FileSinkDGS <- public void org.graphstream.stream.file.FileSinkBase.end() throws java.io.IOException
 FileSinkDGS <- public void org.graphstream.stream.file.FileSinkBase.flush() throws java.io.IOException
 FileSinkDGS <- public void org.graphstream.stream.file.FileSinkDGS.graphAttributeAdded(java.lang.String,long,java.lang.String,java.lang.Object)
 FileSinkDGS <- public void org.graphstream.stream.file.FileSinkDGS.graphAttributeChanged(java.lang.String,long,java.lang.String,java.lang.Object,java.lang.Object)
 FileSinkDGS <- public void org.graphstream.stream.file.FileSinkDGS.graphAttributeRemoved(java.lang.String,long,java.lang.String)
 FileSinkDGS <- public void org.graphstream.stream.file.FileSinkDGS.graphCleared(java.lang.String,long)
 FileSinkDGS <- public void org.graphstream.stream.file.FileSinkDGS.nodeAdded(java.lang.String,long,java.lang.String)
 FileSinkDGS <- public void org.graphstream.stream.file.FileSinkDGS.nodeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 FileSinkDGS <- public void org.graphstream.stream.file.FileSinkDGS.nodeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSinkDGS <- public void org.graphstream.stream.file.FileSinkDGS.nodeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 FileSinkDGS <- public void org.graphstream.stream.file.FileSinkDGS.nodeRemoved(java.lang.String,long,java.lang.String)
 FileSinkDGS <- public void org.graphstream.stream.file.FileSinkDGS.stepBegins(java.lang.String,long,double)
 FileSinkDGS <- public void org.graphstream.stream.file.FileSinkBase.writeAll(org.graphstream.graph.Graph,java.io.OutputStream) throws java.io.IOException
 FileSinkDGS <- public void org.graphstream.stream.file.FileSinkBase.writeAll(org.graphstream.graph.Graph,java.io.Writer) throws java.io.IOException
 FileSinkDGS <- public void org.graphstream.stream.file.FileSinkBase.writeAll(org.graphstream.graph.Graph,java.lang.String) throws java.io.IOException
 Modifiers for FileSinkGML: 23
 FileSinkGML <- public void org.graphstream.stream.file.FileSinkBase.begin(java.io.OutputStream) throws java.io.IOException
 FileSinkGML <- public void org.graphstream.stream.file.FileSinkBase.begin(java.io.Writer) throws java.io.IOException
 FileSinkGML <- public void org.graphstream.stream.file.FileSinkBase.begin(java.lang.String) throws java.io.IOException
 FileSinkGML <- public void org.graphstream.stream.file.FileSinkGML.edgeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,boolean)
 FileSinkGML <- public void org.graphstream.stream.file.FileSinkGML.edgeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 FileSinkGML <- public void org.graphstream.stream.file.FileSinkGML.edgeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSinkGML <- public void org.graphstream.stream.file.FileSinkGML.edgeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 FileSinkGML <- public void org.graphstream.stream.file.FileSinkGML.edgeRemoved(java.lang.String,long,java.lang.String)
 FileSinkGML <- public void org.graphstream.stream.file.FileSinkBase.end() throws java.io.IOException
 FileSinkGML <- public void org.graphstream.stream.file.FileSinkBase.flush() throws java.io.IOException
 FileSinkGML <- public void org.graphstream.stream.file.FileSinkGML.graphAttributeAdded(java.lang.String,long,java.lang.String,java.lang.Object)
 FileSinkGML <- public void org.graphstream.stream.file.FileSinkGML.graphAttributeChanged(java.lang.String,long,java.lang.String,java.lang.Object,java.lang.Object)
 FileSinkGML <- public void org.graphstream.stream.file.FileSinkGML.graphAttributeRemoved(java.lang.String,long,java.lang.String)
 FileSinkGML <- public void org.graphstream.stream.file.FileSinkGML.graphCleared(java.lang.String,long)
 FileSinkGML <- public void org.graphstream.stream.file.FileSinkGML.nodeAdded(java.lang.String,long,java.lang.String)
 FileSinkGML <- public void org.graphstream.stream.file.FileSinkGML.nodeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 FileSinkGML <- public void org.graphstream.stream.file.FileSinkGML.nodeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSinkGML <- public void org.graphstream.stream.file.FileSinkGML.nodeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 FileSinkGML <- public void org.graphstream.stream.file.FileSinkGML.nodeRemoved(java.lang.String,long,java.lang.String)
 FileSinkGML <- public void org.graphstream.stream.file.FileSinkGML.stepBegins(java.lang.String,long,double)
 FileSinkGML <- public void org.graphstream.stream.file.FileSinkBase.writeAll(org.graphstream.graph.Graph,java.io.OutputStream) throws java.io.IOException
 FileSinkGML <- public void org.graphstream.stream.file.FileSinkBase.writeAll(org.graphstream.graph.Graph,java.io.Writer) throws java.io.IOException
 FileSinkGML <- public void org.graphstream.stream.file.FileSinkBase.writeAll(org.graphstream.graph.Graph,java.lang.String) throws java.io.IOException
 Modifiers for FileSinkDOT: 25
 FileSinkDOT <- public void org.graphstream.stream.file.FileSinkBase.begin(java.io.OutputStream) throws java.io.IOException
 FileSinkDOT <- public void org.graphstream.stream.file.FileSinkBase.begin(java.io.Writer) throws java.io.IOException
 FileSinkDOT <- public void org.graphstream.stream.file.FileSinkBase.begin(java.lang.String) throws java.io.IOException
 FileSinkDOT <- public void org.graphstream.stream.file.FileSinkDOT.edgeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,boolean)
 FileSinkDOT <- public void org.graphstream.stream.file.FileSinkDOT.edgeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 FileSinkDOT <- public void org.graphstream.stream.file.FileSinkDOT.edgeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSinkDOT <- public void org.graphstream.stream.file.FileSinkDOT.edgeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 FileSinkDOT <- public void org.graphstream.stream.file.FileSinkDOT.edgeRemoved(java.lang.String,long,java.lang.String)
 FileSinkDOT <- public void org.graphstream.stream.file.FileSinkBase.end() throws java.io.IOException
 FileSinkDOT <- public void org.graphstream.stream.file.FileSinkBase.flush() throws java.io.IOException
 FileSinkDOT <- public void org.graphstream.stream.file.FileSinkDOT.graphAttributeAdded(java.lang.String,long,java.lang.String,java.lang.Object)
 FileSinkDOT <- public void org.graphstream.stream.file.FileSinkDOT.graphAttributeChanged(java.lang.String,long,java.lang.String,java.lang.Object,java.lang.Object)
 FileSinkDOT <- public void org.graphstream.stream.file.FileSinkDOT.graphAttributeRemoved(java.lang.String,long,java.lang.String)
 FileSinkDOT <- public void org.graphstream.stream.file.FileSinkDOT.graphCleared(java.lang.String,long)
 FileSinkDOT <- public boolean org.graphstream.stream.file.FileSinkDOT.isDirected()
 FileSinkDOT <- public void org.graphstream.stream.file.FileSinkDOT.nodeAdded(java.lang.String,long,java.lang.String)
 FileSinkDOT <- public void org.graphstream.stream.file.FileSinkDOT.nodeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 FileSinkDOT <- public void org.graphstream.stream.file.FileSinkDOT.nodeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSinkDOT <- public void org.graphstream.stream.file.FileSinkDOT.nodeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 FileSinkDOT <- public void org.graphstream.stream.file.FileSinkDOT.nodeRemoved(java.lang.String,long,java.lang.String)
 FileSinkDOT <- public void org.graphstream.stream.file.FileSinkDOT.setDirected(boolean)
 FileSinkDOT <- public void org.graphstream.stream.file.FileSinkDOT.stepBegins(java.lang.String,long,double)
 FileSinkDOT <- public void org.graphstream.stream.file.FileSinkBase.writeAll(org.graphstream.graph.Graph,java.io.OutputStream) throws java.io.IOException
 FileSinkDOT <- public void org.graphstream.stream.file.FileSinkBase.writeAll(org.graphstream.graph.Graph,java.io.Writer) throws java.io.IOException
 FileSinkDOT <- public void org.graphstream.stream.file.FileSinkBase.writeAll(org.graphstream.graph.Graph,java.lang.String) throws java.io.IOException
 Modifiers for FileSinkGraphML: 23
 FileSinkGraphML <- public void org.graphstream.stream.file.FileSinkBase.begin(java.io.OutputStream) throws java.io.IOException
 FileSinkGraphML <- public void org.graphstream.stream.file.FileSinkBase.begin(java.io.Writer) throws java.io.IOException
 FileSinkGraphML <- public void org.graphstream.stream.file.FileSinkBase.begin(java.lang.String) throws java.io.IOException
 FileSinkGraphML <- public void org.graphstream.stream.file.FileSinkGraphML.edgeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,boolean)
 FileSinkGraphML <- public void org.graphstream.stream.file.FileSinkGraphML.edgeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 FileSinkGraphML <- public void org.graphstream.stream.file.FileSinkGraphML.edgeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSinkGraphML <- public void org.graphstream.stream.file.FileSinkGraphML.edgeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 FileSinkGraphML <- public void org.graphstream.stream.file.FileSinkGraphML.edgeRemoved(java.lang.String,long,java.lang.String)
 FileSinkGraphML <- public void org.graphstream.stream.file.FileSinkBase.end() throws java.io.IOException
 FileSinkGraphML <- public void org.graphstream.stream.file.FileSinkBase.flush() throws java.io.IOException
 FileSinkGraphML <- public void org.graphstream.stream.file.FileSinkGraphML.graphAttributeAdded(java.lang.String,long,java.lang.String,java.lang.Object)
 FileSinkGraphML <- public void org.graphstream.stream.file.FileSinkGraphML.graphAttributeChanged(java.lang.String,long,java.lang.String,java.lang.Object,java.lang.Object)
 FileSinkGraphML <- public void org.graphstream.stream.file.FileSinkGraphML.graphAttributeRemoved(java.lang.String,long,java.lang.String)
 FileSinkGraphML <- public void org.graphstream.stream.file.FileSinkGraphML.graphCleared(java.lang.String,long)
 FileSinkGraphML <- public void org.graphstream.stream.file.FileSinkGraphML.nodeAdded(java.lang.String,long,java.lang.String)
 FileSinkGraphML <- public void org.graphstream.stream.file.FileSinkGraphML.nodeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 FileSinkGraphML <- public void org.graphstream.stream.file.FileSinkGraphML.nodeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSinkGraphML <- public void org.graphstream.stream.file.FileSinkGraphML.nodeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 FileSinkGraphML <- public void org.graphstream.stream.file.FileSinkGraphML.nodeRemoved(java.lang.String,long,java.lang.String)
 FileSinkGraphML <- public void org.graphstream.stream.file.FileSinkGraphML.stepBegins(java.lang.String,long,double)
 FileSinkGraphML <- public void org.graphstream.stream.file.FileSinkBase.writeAll(org.graphstream.graph.Graph,java.io.OutputStream) throws java.io.IOException
 FileSinkGraphML <- public void org.graphstream.stream.file.FileSinkBase.writeAll(org.graphstream.graph.Graph,java.io.Writer) throws java.io.IOException
 FileSinkGraphML <- public void org.graphstream.stream.file.FileSinkBase.writeAll(org.graphstream.graph.Graph,java.lang.String) throws java.io.IOException
 Modifiers for FileSinkTikZ: 30
 FileSinkTikZ <- public void org.graphstream.stream.file.FileSinkBase.begin(java.io.OutputStream) throws java.io.IOException
 FileSinkTikZ <- public void org.graphstream.stream.file.FileSinkBase.begin(java.io.Writer) throws java.io.IOException
 FileSinkTikZ <- public void org.graphstream.stream.file.FileSinkBase.begin(java.lang.String) throws java.io.IOException
 FileSinkTikZ <- public void org.graphstream.stream.file.FileSinkTikZ.edgeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,boolean)
 FileSinkTikZ <- public void org.graphstream.stream.file.FileSinkTikZ.edgeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 FileSinkTikZ <- public void org.graphstream.stream.file.FileSinkTikZ.edgeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSinkTikZ <- public void org.graphstream.stream.file.FileSinkTikZ.edgeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 FileSinkTikZ <- public void org.graphstream.stream.file.FileSinkTikZ.edgeRemoved(java.lang.String,long,java.lang.String)
 FileSinkTikZ <- public void org.graphstream.stream.file.FileSinkBase.end() throws java.io.IOException
 FileSinkTikZ <- public void org.graphstream.stream.file.FileSinkBase.flush() throws java.io.IOException
 FileSinkTikZ <- public double org.graphstream.stream.file.FileSinkTikZ.getHeight()
 FileSinkTikZ <- public double org.graphstream.stream.file.FileSinkTikZ.getWidth()
 FileSinkTikZ <- public void org.graphstream.stream.file.FileSinkTikZ.graphAttributeAdded(java.lang.String,long,java.lang.String,java.lang.Object)
 FileSinkTikZ <- public void org.graphstream.stream.file.FileSinkTikZ.graphAttributeChanged(java.lang.String,long,java.lang.String,java.lang.Object,java.lang.Object)
 FileSinkTikZ <- public void org.graphstream.stream.file.FileSinkTikZ.graphAttributeRemoved(java.lang.String,long,java.lang.String)
 FileSinkTikZ <- public void org.graphstream.stream.file.FileSinkTikZ.graphCleared(java.lang.String,long)
 FileSinkTikZ <- public void org.graphstream.stream.file.FileSinkTikZ.nodeAdded(java.lang.String,long,java.lang.String)
 FileSinkTikZ <- public void org.graphstream.stream.file.FileSinkTikZ.nodeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 FileSinkTikZ <- public void org.graphstream.stream.file.FileSinkTikZ.nodeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSinkTikZ <- public void org.graphstream.stream.file.FileSinkTikZ.nodeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 FileSinkTikZ <- public void org.graphstream.stream.file.FileSinkTikZ.nodeRemoved(java.lang.String,long,java.lang.String)
 FileSinkTikZ <- public void org.graphstream.stream.file.FileSinkTikZ.setCSS(java.lang.String)
 FileSinkTikZ <- public void org.graphstream.stream.file.FileSinkTikZ.setDisplaySize(double,double)
 FileSinkTikZ <- public void org.graphstream.stream.file.FileSinkTikZ.setHeight(double)
 FileSinkTikZ <- public void org.graphstream.stream.file.FileSinkTikZ.setLayout(boolean)
 FileSinkTikZ <- public void org.graphstream.stream.file.FileSinkTikZ.setWidth(double)
 FileSinkTikZ <- public void org.graphstream.stream.file.FileSinkTikZ.stepBegins(java.lang.String,long,double)
 FileSinkTikZ <- public void org.graphstream.stream.file.FileSinkBase.writeAll(org.graphstream.graph.Graph,java.io.OutputStream) throws java.io.IOException
 FileSinkTikZ <- public void org.graphstream.stream.file.FileSinkBase.writeAll(org.graphstream.graph.Graph,java.io.Writer) throws java.io.IOException
 FileSinkTikZ <- public void org.graphstream.stream.file.FileSinkBase.writeAll(org.graphstream.graph.Graph,java.lang.String) throws java.io.IOException
 Modifiers for FileSinkDynamicGML: 23
 FileSinkDynamicGML <- public void org.graphstream.stream.file.FileSinkBase.begin(java.io.OutputStream) throws java.io.IOException
 FileSinkDynamicGML <- public void org.graphstream.stream.file.FileSinkBase.begin(java.io.Writer) throws java.io.IOException
 FileSinkDynamicGML <- public void org.graphstream.stream.file.FileSinkBase.begin(java.lang.String) throws java.io.IOException
 FileSinkDynamicGML <- public void org.graphstream.stream.file.FileSinkDynamicGML.edgeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,boolean)
 FileSinkDynamicGML <- public void org.graphstream.stream.file.FileSinkDynamicGML.edgeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 FileSinkDynamicGML <- public void org.graphstream.stream.file.FileSinkDynamicGML.edgeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSinkDynamicGML <- public void org.graphstream.stream.file.FileSinkDynamicGML.edgeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 FileSinkDynamicGML <- public void org.graphstream.stream.file.FileSinkDynamicGML.edgeRemoved(java.lang.String,long,java.lang.String)
 FileSinkDynamicGML <- public void org.graphstream.stream.file.FileSinkBase.end() throws java.io.IOException
 FileSinkDynamicGML <- public void org.graphstream.stream.file.FileSinkBase.flush() throws java.io.IOException
 FileSinkDynamicGML <- public void org.graphstream.stream.file.FileSinkDynamicGML.graphAttributeAdded(java.lang.String,long,java.lang.String,java.lang.Object)
 FileSinkDynamicGML <- public void org.graphstream.stream.file.FileSinkDynamicGML.graphAttributeChanged(java.lang.String,long,java.lang.String,java.lang.Object,java.lang.Object)
 FileSinkDynamicGML <- public void org.graphstream.stream.file.FileSinkDynamicGML.graphAttributeRemoved(java.lang.String,long,java.lang.String)
 FileSinkDynamicGML <- public void org.graphstream.stream.file.FileSinkDynamicGML.graphCleared(java.lang.String,long)
 FileSinkDynamicGML <- public void org.graphstream.stream.file.FileSinkDynamicGML.nodeAdded(java.lang.String,long,java.lang.String)
 FileSinkDynamicGML <- public void org.graphstream.stream.file.FileSinkDynamicGML.nodeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 FileSinkDynamicGML <- public void org.graphstream.stream.file.FileSinkDynamicGML.nodeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 FileSinkDynamicGML <- public void org.graphstream.stream.file.FileSinkDynamicGML.nodeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 FileSinkDynamicGML <- public void org.graphstream.stream.file.FileSinkDynamicGML.nodeRemoved(java.lang.String,long,java.lang.String)
 FileSinkDynamicGML <- public void org.graphstream.stream.file.FileSinkDynamicGML.stepBegins(java.lang.String,long,double)
 FileSinkDynamicGML <- public void org.graphstream.stream.file.FileSinkBase.writeAll(org.graphstream.graph.Graph,java.io.OutputStream) throws java.io.IOException
 FileSinkDynamicGML <- public void org.graphstream.stream.file.FileSinkBase.writeAll(org.graphstream.graph.Graph,java.io.Writer) throws java.io.IOException
 FileSinkDynamicGML <- public void org.graphstream.stream.file.FileSinkBase.writeAll(org.graphstream.graph.Graph,java.lang.String) throws java.io.IOException
 Modifiers for SourceBase.ElementType: 2
 SourceBase.ElementType <- public static org.graphstream.stream.SourceBase$ElementType org.graphstream.stream.SourceBase$ElementType.valueOf(java.lang.String)
 SourceBase.ElementType <- public static org.graphstream.stream.SourceBase$ElementType[] org.graphstream.stream.SourceBase$ElementType.values()
 Modifiers for PipedInputStream: 10
 PipedInputStream <- public synchronized int java.io.PipedInputStream.available() throws java.io.IOException
 PipedInputStream <- public void java.io.PipedInputStream.close() throws java.io.IOException
 PipedInputStream <- public void java.io.PipedInputStream.connect(java.io.PipedOutputStream) throws java.io.IOException
 PipedInputStream <- public synchronized void java.io.InputStream.mark(int)
 PipedInputStream <- public boolean java.io.InputStream.markSupported()
 PipedInputStream <- public synchronized int java.io.PipedInputStream.read() throws java.io.IOException
 PipedInputStream <- public int java.io.InputStream.read(byte[]) throws java.io.IOException
 PipedInputStream <- public synchronized int java.io.PipedInputStream.read(byte[],int,int) throws java.io.IOException
 PipedInputStream <- public synchronized void java.io.InputStream.reset() throws java.io.IOException
 PipedInputStream <- public long java.io.InputStream.skip(long) throws java.io.IOException
 Modifiers for SequenceInputStream: 9
 SequenceInputStream <- public int java.io.SequenceInputStream.available() throws java.io.IOException
 SequenceInputStream <- public void java.io.SequenceInputStream.close() throws java.io.IOException
 SequenceInputStream <- public synchronized void java.io.InputStream.mark(int)
 SequenceInputStream <- public boolean java.io.InputStream.markSupported()
 SequenceInputStream <- public int java.io.SequenceInputStream.read() throws java.io.IOException
 SequenceInputStream <- public int java.io.InputStream.read(byte[]) throws java.io.IOException
 SequenceInputStream <- public int java.io.SequenceInputStream.read(byte[],int,int) throws java.io.IOException
 SequenceInputStream <- public synchronized void java.io.InputStream.reset() throws java.io.IOException
 SequenceInputStream <- public long java.io.InputStream.skip(long) throws java.io.IOException
 Modifiers for ObjectInputStream: 28
 ObjectInputStream <- public int java.io.ObjectInputStream.available() throws java.io.IOException
 ObjectInputStream <- public void java.io.ObjectInputStream.close() throws java.io.IOException
 ObjectInputStream <- public void java.io.ObjectInputStream.defaultReadObject() throws java.io.IOException,java.lang.ClassNotFoundException
 ObjectInputStream <- public synchronized void java.io.InputStream.mark(int)
 ObjectInputStream <- public boolean java.io.InputStream.markSupported()
 ObjectInputStream <- public int java.io.ObjectInputStream.read() throws java.io.IOException
 ObjectInputStream <- public abstract int java.io.ObjectInput.read(byte[]) throws java.io.IOException
 ObjectInputStream <- public int java.io.ObjectInputStream.read(byte[],int,int) throws java.io.IOException
 ObjectInputStream <- public boolean java.io.ObjectInputStream.readBoolean() throws java.io.IOException
 ObjectInputStream <- public byte java.io.ObjectInputStream.readByte() throws java.io.IOException
 ObjectInputStream <- public char java.io.ObjectInputStream.readChar() throws java.io.IOException
 ObjectInputStream <- public double java.io.ObjectInputStream.readDouble() throws java.io.IOException
 ObjectInputStream <- public java.io.ObjectInputStream$GetField java.io.ObjectInputStream.readFields() throws java.io.IOException,java.lang.ClassNotFoundException
 ObjectInputStream <- public float java.io.ObjectInputStream.readFloat() throws java.io.IOException
 ObjectInputStream <- public void java.io.ObjectInputStream.readFully(byte[]) throws java.io.IOException
 ObjectInputStream <- public void java.io.ObjectInputStream.readFully(byte[],int,int) throws java.io.IOException
 ObjectInputStream <- public int java.io.ObjectInputStream.readInt() throws java.io.IOException
 ObjectInputStream <- public long java.io.ObjectInputStream.readLong() throws java.io.IOException
 ObjectInputStream <- public final java.lang.Object java.io.ObjectInputStream.readObject() throws java.io.IOException,java.lang.ClassNotFoundException
 ObjectInputStream <- public short java.io.ObjectInputStream.readShort() throws java.io.IOException
 ObjectInputStream <- public java.lang.String java.io.ObjectInputStream.readUTF() throws java.io.IOException
 ObjectInputStream <- public java.lang.Object java.io.ObjectInputStream.readUnshared() throws java.io.IOException,java.lang.ClassNotFoundException
 ObjectInputStream <- public int java.io.ObjectInputStream.readUnsignedByte() throws java.io.IOException
 ObjectInputStream <- public int java.io.ObjectInputStream.readUnsignedShort() throws java.io.IOException
 ObjectInputStream <- public void java.io.ObjectInputStream.registerValidation(java.io.ObjectInputValidation,int) throws java.io.NotActiveException,java.io.InvalidObjectException
 ObjectInputStream <- public synchronized void java.io.InputStream.reset() throws java.io.IOException
 ObjectInputStream <- public abstract long java.io.ObjectInput.skip(long) throws java.io.IOException
 ObjectInputStream <- public int java.io.ObjectInputStream.skipBytes(int) throws java.io.IOException
 Modifiers for ByteArrayInputStream: 9
 ByteArrayInputStream <- public synchronized int java.io.ByteArrayInputStream.available()
 ByteArrayInputStream <- public void java.io.ByteArrayInputStream.close() throws java.io.IOException
 ByteArrayInputStream <- public void java.io.ByteArrayInputStream.mark(int)
 ByteArrayInputStream <- public boolean java.io.ByteArrayInputStream.markSupported()
 ByteArrayInputStream <- public synchronized int java.io.ByteArrayInputStream.read()
 ByteArrayInputStream <- public int java.io.InputStream.read(byte[]) throws java.io.IOException
 ByteArrayInputStream <- public synchronized int java.io.ByteArrayInputStream.read(byte[],int,int)
 ByteArrayInputStream <- public synchronized void java.io.ByteArrayInputStream.reset()
 ByteArrayInputStream <- public synchronized long java.io.ByteArrayInputStream.skip(long)
 Modifiers for FilterInputStream: 9
 FilterInputStream <- public int java.io.FilterInputStream.available() throws java.io.IOException
 FilterInputStream <- public void java.io.FilterInputStream.close() throws java.io.IOException
 FilterInputStream <- public synchronized void java.io.FilterInputStream.mark(int)
 FilterInputStream <- public boolean java.io.FilterInputStream.markSupported()
 FilterInputStream <- public int java.io.FilterInputStream.read() throws java.io.IOException
 FilterInputStream <- public int java.io.FilterInputStream.read(byte[]) throws java.io.IOException
 FilterInputStream <- public int java.io.FilterInputStream.read(byte[],int,int) throws java.io.IOException
 FilterInputStream <- public synchronized void java.io.FilterInputStream.reset() throws java.io.IOException
 FilterInputStream <- public long java.io.FilterInputStream.skip(long) throws java.io.IOException
 Modifiers for FileInputStream: 11
 FileInputStream <- public native int java.io.FileInputStream.available() throws java.io.IOException
 FileInputStream <- public void java.io.FileInputStream.close() throws java.io.IOException
 FileInputStream <- public java.nio.channels.FileChannel java.io.FileInputStream.getChannel()
 FileInputStream <- public final java.io.FileDescriptor java.io.FileInputStream.getFD() throws java.io.IOException
 FileInputStream <- public synchronized void java.io.InputStream.mark(int)
 FileInputStream <- public boolean java.io.InputStream.markSupported()
 FileInputStream <- public int java.io.FileInputStream.read() throws java.io.IOException
 FileInputStream <- public int java.io.FileInputStream.read(byte[]) throws java.io.IOException
 FileInputStream <- public int java.io.FileInputStream.read(byte[],int,int) throws java.io.IOException
 FileInputStream <- public synchronized void java.io.InputStream.reset() throws java.io.IOException
 FileInputStream <- public native long java.io.FileInputStream.skip(long) throws java.io.IOException
 Modifiers for PushbackInputStream: 12
 PushbackInputStream <- public int java.io.PushbackInputStream.available() throws java.io.IOException
 PushbackInputStream <- public synchronized void java.io.PushbackInputStream.close() throws java.io.IOException
 PushbackInputStream <- public synchronized void java.io.PushbackInputStream.mark(int)
 PushbackInputStream <- public boolean java.io.PushbackInputStream.markSupported()
 PushbackInputStream <- public int java.io.PushbackInputStream.read() throws java.io.IOException
 PushbackInputStream <- public int java.io.FilterInputStream.read(byte[]) throws java.io.IOException
 PushbackInputStream <- public int java.io.PushbackInputStream.read(byte[],int,int) throws java.io.IOException
 PushbackInputStream <- public synchronized void java.io.PushbackInputStream.reset() throws java.io.IOException
 PushbackInputStream <- public long java.io.PushbackInputStream.skip(long) throws java.io.IOException
 PushbackInputStream <- public void java.io.PushbackInputStream.unread(int) throws java.io.IOException
 PushbackInputStream <- public void java.io.PushbackInputStream.unread(byte[]) throws java.io.IOException
 PushbackInputStream <- public void java.io.PushbackInputStream.unread(byte[],int,int) throws java.io.IOException
 Modifiers for DataInputStream: 24
 DataInputStream <- public int java.io.FilterInputStream.available() throws java.io.IOException
 DataInputStream <- public void java.io.FilterInputStream.close() throws java.io.IOException
 DataInputStream <- public synchronized void java.io.FilterInputStream.mark(int)
 DataInputStream <- public boolean java.io.FilterInputStream.markSupported()
 DataInputStream <- public int java.io.FilterInputStream.read() throws java.io.IOException
 DataInputStream <- public final int java.io.DataInputStream.read(byte[]) throws java.io.IOException
 DataInputStream <- public final int java.io.DataInputStream.read(byte[],int,int) throws java.io.IOException
 DataInputStream <- public final boolean java.io.DataInputStream.readBoolean() throws java.io.IOException
 DataInputStream <- public final byte java.io.DataInputStream.readByte() throws java.io.IOException
 DataInputStream <- public final char java.io.DataInputStream.readChar() throws java.io.IOException
 DataInputStream <- public final double java.io.DataInputStream.readDouble() throws java.io.IOException
 DataInputStream <- public final float java.io.DataInputStream.readFloat() throws java.io.IOException
 DataInputStream <- public final void java.io.DataInputStream.readFully(byte[]) throws java.io.IOException
 DataInputStream <- public final void java.io.DataInputStream.readFully(byte[],int,int) throws java.io.IOException
 DataInputStream <- public final int java.io.DataInputStream.readInt() throws java.io.IOException
 DataInputStream <- public final long java.io.DataInputStream.readLong() throws java.io.IOException
 DataInputStream <- public final short java.io.DataInputStream.readShort() throws java.io.IOException
 DataInputStream <- public final java.lang.String java.io.DataInputStream.readUTF() throws java.io.IOException
 DataInputStream <- public static final java.lang.String java.io.DataInputStream.readUTF(java.io.DataInput) throws java.io.IOException
 DataInputStream <- public final int java.io.DataInputStream.readUnsignedByte() throws java.io.IOException
 DataInputStream <- public final int java.io.DataInputStream.readUnsignedShort() throws java.io.IOException
 DataInputStream <- public synchronized void java.io.FilterInputStream.reset() throws java.io.IOException
 DataInputStream <- public long java.io.FilterInputStream.skip(long) throws java.io.IOException
 DataInputStream <- public final int java.io.DataInputStream.skipBytes(int) throws java.io.IOException
 Modifiers for BufferedInputStream: 9
 BufferedInputStream <- public synchronized int java.io.BufferedInputStream.available() throws java.io.IOException
 BufferedInputStream <- public void java.io.BufferedInputStream.close() throws java.io.IOException
 BufferedInputStream <- public synchronized void java.io.BufferedInputStream.mark(int)
 BufferedInputStream <- public boolean java.io.BufferedInputStream.markSupported()
 BufferedInputStream <- public synchronized int java.io.BufferedInputStream.read() throws java.io.IOException
 BufferedInputStream <- public int java.io.FilterInputStream.read(byte[]) throws java.io.IOException
 BufferedInputStream <- public synchronized int java.io.BufferedInputStream.read(byte[],int,int) throws java.io.IOException
 BufferedInputStream <- public synchronized void java.io.BufferedInputStream.reset() throws java.io.IOException
 BufferedInputStream <- public synchronized long java.io.BufferedInputStream.skip(long) throws java.io.IOException
 Modifiers for CharArrayReader: 10
 CharArrayReader <- public void java.io.CharArrayReader.close()
 CharArrayReader <- public void java.io.CharArrayReader.mark(int) throws java.io.IOException
 CharArrayReader <- public boolean java.io.CharArrayReader.markSupported()
 CharArrayReader <- public int java.io.CharArrayReader.read() throws java.io.IOException
 CharArrayReader <- public int java.io.Reader.read(java.nio.CharBuffer) throws java.io.IOException
 CharArrayReader <- public int java.io.Reader.read(char[]) throws java.io.IOException
 CharArrayReader <- public int java.io.CharArrayReader.read(char[],int,int) throws java.io.IOException
 CharArrayReader <- public boolean java.io.CharArrayReader.ready() throws java.io.IOException
 CharArrayReader <- public void java.io.CharArrayReader.reset() throws java.io.IOException
 CharArrayReader <- public long java.io.CharArrayReader.skip(long) throws java.io.IOException
 Modifiers for PipedReader: 11
 PipedReader <- public void java.io.PipedReader.close() throws java.io.IOException
 PipedReader <- public void java.io.PipedReader.connect(java.io.PipedWriter) throws java.io.IOException
 PipedReader <- public void java.io.Reader.mark(int) throws java.io.IOException
 PipedReader <- public boolean java.io.Reader.markSupported()
 PipedReader <- public synchronized int java.io.PipedReader.read() throws java.io.IOException
 PipedReader <- public int java.io.Reader.read(java.nio.CharBuffer) throws java.io.IOException
 PipedReader <- public int java.io.Reader.read(char[]) throws java.io.IOException
 PipedReader <- public synchronized int java.io.PipedReader.read(char[],int,int) throws java.io.IOException
 PipedReader <- public synchronized boolean java.io.PipedReader.ready() throws java.io.IOException
 PipedReader <- public void java.io.Reader.reset() throws java.io.IOException
 PipedReader <- public long java.io.Reader.skip(long) throws java.io.IOException
 Modifiers for StringReader: 10
 StringReader <- public void java.io.StringReader.close()
 StringReader <- public void java.io.StringReader.mark(int) throws java.io.IOException
 StringReader <- public boolean java.io.StringReader.markSupported()
 StringReader <- public int java.io.StringReader.read() throws java.io.IOException
 StringReader <- public int java.io.Reader.read(java.nio.CharBuffer) throws java.io.IOException
 StringReader <- public int java.io.Reader.read(char[]) throws java.io.IOException
 StringReader <- public int java.io.StringReader.read(char[],int,int) throws java.io.IOException
 StringReader <- public boolean java.io.StringReader.ready() throws java.io.IOException
 StringReader <- public void java.io.StringReader.reset() throws java.io.IOException
 StringReader <- public long java.io.StringReader.skip(long) throws java.io.IOException
 Modifiers for InputStreamReader: 11
 InputStreamReader <- public void java.io.InputStreamReader.close() throws java.io.IOException
 InputStreamReader <- public java.lang.String java.io.InputStreamReader.getEncoding()
 InputStreamReader <- public void java.io.Reader.mark(int) throws java.io.IOException
 InputStreamReader <- public boolean java.io.Reader.markSupported()
 InputStreamReader <- public int java.io.InputStreamReader.read() throws java.io.IOException
 InputStreamReader <- public int java.io.Reader.read(java.nio.CharBuffer) throws java.io.IOException
 InputStreamReader <- public int java.io.Reader.read(char[]) throws java.io.IOException
 InputStreamReader <- public int java.io.InputStreamReader.read(char[],int,int) throws java.io.IOException
 InputStreamReader <- public boolean java.io.InputStreamReader.ready() throws java.io.IOException
 InputStreamReader <- public void java.io.Reader.reset() throws java.io.IOException
 InputStreamReader <- public long java.io.Reader.skip(long) throws java.io.IOException
 Modifiers for BufferedReader: 11
 BufferedReader <- public void java.io.BufferedReader.close() throws java.io.IOException
 BufferedReader <- public void java.io.BufferedReader.mark(int) throws java.io.IOException
 BufferedReader <- public boolean java.io.BufferedReader.markSupported()
 BufferedReader <- public int java.io.BufferedReader.read() throws java.io.IOException
 BufferedReader <- public int java.io.Reader.read(java.nio.CharBuffer) throws java.io.IOException
 BufferedReader <- public int java.io.Reader.read(char[]) throws java.io.IOException
 BufferedReader <- public int java.io.BufferedReader.read(char[],int,int) throws java.io.IOException
 BufferedReader <- public java.lang.String java.io.BufferedReader.readLine() throws java.io.IOException
 BufferedReader <- public boolean java.io.BufferedReader.ready() throws java.io.IOException
 BufferedReader <- public void java.io.BufferedReader.reset() throws java.io.IOException
 BufferedReader <- public long java.io.BufferedReader.skip(long) throws java.io.IOException
 Modifiers for PushbackReader: 13
 PushbackReader <- public void java.io.PushbackReader.close() throws java.io.IOException
 PushbackReader <- public void java.io.PushbackReader.mark(int) throws java.io.IOException
 PushbackReader <- public boolean java.io.PushbackReader.markSupported()
 PushbackReader <- public int java.io.PushbackReader.read() throws java.io.IOException
 PushbackReader <- public int java.io.Reader.read(java.nio.CharBuffer) throws java.io.IOException
 PushbackReader <- public int java.io.Reader.read(char[]) throws java.io.IOException
 PushbackReader <- public int java.io.PushbackReader.read(char[],int,int) throws java.io.IOException
 PushbackReader <- public boolean java.io.PushbackReader.ready() throws java.io.IOException
 PushbackReader <- public void java.io.PushbackReader.reset() throws java.io.IOException
 PushbackReader <- public long java.io.PushbackReader.skip(long) throws java.io.IOException
 PushbackReader <- public void java.io.PushbackReader.unread(int) throws java.io.IOException
 PushbackReader <- public void java.io.PushbackReader.unread(char[]) throws java.io.IOException
 PushbackReader <- public void java.io.PushbackReader.unread(char[],int,int) throws java.io.IOException
 Modifiers for FileReader: 11
 FileReader <- public void java.io.InputStreamReader.close() throws java.io.IOException
 FileReader <- public java.lang.String java.io.InputStreamReader.getEncoding()
 FileReader <- public void java.io.Reader.mark(int) throws java.io.IOException
 FileReader <- public boolean java.io.Reader.markSupported()
 FileReader <- public int java.io.InputStreamReader.read() throws java.io.IOException
 FileReader <- public int java.io.Reader.read(java.nio.CharBuffer) throws java.io.IOException
 FileReader <- public int java.io.Reader.read(char[]) throws java.io.IOException
 FileReader <- public int java.io.InputStreamReader.read(char[],int,int) throws java.io.IOException
 FileReader <- public boolean java.io.InputStreamReader.ready() throws java.io.IOException
 FileReader <- public void java.io.Reader.reset() throws java.io.IOException
 FileReader <- public long java.io.Reader.skip(long) throws java.io.IOException
 Modifiers for LineNumberReader: 13
 LineNumberReader <- public void java.io.BufferedReader.close() throws java.io.IOException
 LineNumberReader <- public int java.io.LineNumberReader.getLineNumber()
 LineNumberReader <- public void java.io.LineNumberReader.mark(int) throws java.io.IOException
 LineNumberReader <- public boolean java.io.BufferedReader.markSupported()
 LineNumberReader <- public int java.io.LineNumberReader.read() throws java.io.IOException
 LineNumberReader <- public int java.io.Reader.read(java.nio.CharBuffer) throws java.io.IOException
 LineNumberReader <- public int java.io.Reader.read(char[]) throws java.io.IOException
 LineNumberReader <- public int java.io.LineNumberReader.read(char[],int,int) throws java.io.IOException
 LineNumberReader <- public java.lang.String java.io.LineNumberReader.readLine() throws java.io.IOException
 LineNumberReader <- public boolean java.io.BufferedReader.ready() throws java.io.IOException
 LineNumberReader <- public void java.io.LineNumberReader.reset() throws java.io.IOException
 LineNumberReader <- public void java.io.LineNumberReader.setLineNumber(int)
 LineNumberReader <- public long java.io.LineNumberReader.skip(long) throws java.io.IOException
 Modifiers for URL: 21
 URL <- public boolean java.net.URL.equals(java.lang.Object)
 URL <- public java.lang.String java.net.URL.getAuthority()
 URL <- public final java.lang.Object java.net.URL.getContent() throws java.io.IOException
 URL <- public final java.lang.Object java.net.URL.getContent(java.lang.Class[]) throws java.io.IOException
 URL <- public int java.net.URL.getDefaultPort()
 URL <- public java.lang.String java.net.URL.getFile()
 URL <- public java.lang.String java.net.URL.getHost()
 URL <- public java.lang.String java.net.URL.getPath()
 URL <- public int java.net.URL.getPort()
 URL <- public java.lang.String java.net.URL.getProtocol()
 URL <- public java.lang.String java.net.URL.getQuery()
 URL <- public java.lang.String java.net.URL.getRef()
 URL <- public java.lang.String java.net.URL.getUserInfo()
 URL <- public java.net.URLConnection java.net.URL.openConnection() throws java.io.IOException
 URL <- public java.net.URLConnection java.net.URL.openConnection(java.net.Proxy) throws java.io.IOException
 URL <- public final java.io.InputStream java.net.URL.openStream() throws java.io.IOException
 URL <- public boolean java.net.URL.sameFile(java.net.URL)
 URL <- public static void java.net.URL.setURLStreamHandlerFactory(java.net.URLStreamHandlerFactory)
 URL <- public java.lang.String java.net.URL.toExternalForm()
 URL <- public java.lang.String java.net.URL.toString()
 URL <- public java.net.URI java.net.URL.toURI() throws java.net.URISyntaxException
 Modifiers for FileSinkImages.OutputType: 2
 FileSinkImages.OutputType <- public static org.graphstream.stream.file.FileSinkImages$OutputType org.graphstream.stream.file.FileSinkImages$OutputType.valueOf(java.lang.String)
 FileSinkImages.OutputType <- public static org.graphstream.stream.file.FileSinkImages$OutputType[] org.graphstream.stream.file.FileSinkImages$OutputType.values()
 Modifiers for FileSinkImages.Resolutions: 5
 FileSinkImages.Resolutions <- public int org.graphstream.stream.file.FileSinkImages$Resolutions.getHeight()
 FileSinkImages.Resolutions <- public int org.graphstream.stream.file.FileSinkImages$Resolutions.getWidth()
 FileSinkImages.Resolutions <- public java.lang.String org.graphstream.stream.file.FileSinkImages$Resolutions.toString()
 FileSinkImages.Resolutions <- public static org.graphstream.stream.file.FileSinkImages$Resolutions org.graphstream.stream.file.FileSinkImages$Resolutions.valueOf(java.lang.String)
 FileSinkImages.Resolutions <- public static org.graphstream.stream.file.FileSinkImages$Resolutions[] org.graphstream.stream.file.FileSinkImages$Resolutions.values()
 Modifiers for FileSinkImages.CustomResolution: 3
 FileSinkImages.CustomResolution <- public int org.graphstream.stream.file.FileSinkImages$CustomResolution.getHeight()
 FileSinkImages.CustomResolution <- public int org.graphstream.stream.file.FileSinkImages$CustomResolution.getWidth()
 FileSinkImages.CustomResolution <- public java.lang.String org.graphstream.stream.file.FileSinkImages$CustomResolution.toString()
 Modifiers for FileSinkImages.OutputPolicy: 2
 FileSinkImages.OutputPolicy <- public static org.graphstream.stream.file.FileSinkImages$OutputPolicy org.graphstream.stream.file.FileSinkImages$OutputPolicy.valueOf(java.lang.String)
 FileSinkImages.OutputPolicy <- public static org.graphstream.stream.file.FileSinkImages$OutputPolicy[] org.graphstream.stream.file.FileSinkImages$OutputPolicy.values()
 Modifiers for PipedOutputStream: 6
 PipedOutputStream <- public void java.io.PipedOutputStream.close() throws java.io.IOException
 PipedOutputStream <- public synchronized void java.io.PipedOutputStream.connect(java.io.PipedInputStream) throws java.io.IOException
 PipedOutputStream <- public synchronized void java.io.PipedOutputStream.flush() throws java.io.IOException
 PipedOutputStream <- public void java.io.PipedOutputStream.write(int) throws java.io.IOException
 PipedOutputStream <- public void java.io.OutputStream.write(byte[]) throws java.io.IOException
 PipedOutputStream <- public void java.io.PipedOutputStream.write(byte[],int,int) throws java.io.IOException
 Modifiers for ObjectOutputStream: 23
 ObjectOutputStream <- public void java.io.ObjectOutputStream.close() throws java.io.IOException
 ObjectOutputStream <- public void java.io.ObjectOutputStream.defaultWriteObject() throws java.io.IOException
 ObjectOutputStream <- public void java.io.ObjectOutputStream.flush() throws java.io.IOException
 ObjectOutputStream <- public java.io.ObjectOutputStream$PutField java.io.ObjectOutputStream.putFields() throws java.io.IOException
 ObjectOutputStream <- public void java.io.ObjectOutputStream.reset() throws java.io.IOException
 ObjectOutputStream <- public void java.io.ObjectOutputStream.useProtocolVersion(int) throws java.io.IOException
 ObjectOutputStream <- public void java.io.ObjectOutputStream.write(int) throws java.io.IOException
 ObjectOutputStream <- public void java.io.ObjectOutputStream.write(byte[]) throws java.io.IOException
 ObjectOutputStream <- public void java.io.ObjectOutputStream.write(byte[],int,int) throws java.io.IOException
 ObjectOutputStream <- public void java.io.ObjectOutputStream.writeBoolean(boolean) throws java.io.IOException
 ObjectOutputStream <- public void java.io.ObjectOutputStream.writeByte(int) throws java.io.IOException
 ObjectOutputStream <- public void java.io.ObjectOutputStream.writeBytes(java.lang.String) throws java.io.IOException
 ObjectOutputStream <- public void java.io.ObjectOutputStream.writeChar(int) throws java.io.IOException
 ObjectOutputStream <- public void java.io.ObjectOutputStream.writeChars(java.lang.String) throws java.io.IOException
 ObjectOutputStream <- public void java.io.ObjectOutputStream.writeDouble(double) throws java.io.IOException
 ObjectOutputStream <- public void java.io.ObjectOutputStream.writeFields() throws java.io.IOException
 ObjectOutputStream <- public void java.io.ObjectOutputStream.writeFloat(float) throws java.io.IOException
 ObjectOutputStream <- public void java.io.ObjectOutputStream.writeInt(int) throws java.io.IOException
 ObjectOutputStream <- public void java.io.ObjectOutputStream.writeLong(long) throws java.io.IOException
 ObjectOutputStream <- public final void java.io.ObjectOutputStream.writeObject(java.lang.Object) throws java.io.IOException
 ObjectOutputStream <- public void java.io.ObjectOutputStream.writeShort(int) throws java.io.IOException
 ObjectOutputStream <- public void java.io.ObjectOutputStream.writeUTF(java.lang.String) throws java.io.IOException
 ObjectOutputStream <- public void java.io.ObjectOutputStream.writeUnshared(java.lang.Object) throws java.io.IOException
 Modifiers for ByteArrayOutputStream: 11
 ByteArrayOutputStream <- public void java.io.ByteArrayOutputStream.close() throws java.io.IOException
 ByteArrayOutputStream <- public void java.io.OutputStream.flush() throws java.io.IOException
 ByteArrayOutputStream <- public synchronized void java.io.ByteArrayOutputStream.reset()
 ByteArrayOutputStream <- public synchronized int java.io.ByteArrayOutputStream.size()
 ByteArrayOutputStream <- public synchronized byte[] java.io.ByteArrayOutputStream.toByteArray()
 ByteArrayOutputStream <- public synchronized java.lang.String java.io.ByteArrayOutputStream.toString()
 ByteArrayOutputStream <- public synchronized java.lang.String java.io.ByteArrayOutputStream.toString(java.lang.String) throws java.io.UnsupportedEncodingException
 ByteArrayOutputStream <- public synchronized void java.io.ByteArrayOutputStream.write(int)
 ByteArrayOutputStream <- public void java.io.OutputStream.write(byte[]) throws java.io.IOException
 ByteArrayOutputStream <- public synchronized void java.io.ByteArrayOutputStream.write(byte[],int,int)
 ByteArrayOutputStream <- public synchronized void java.io.ByteArrayOutputStream.writeTo(java.io.OutputStream) throws java.io.IOException
 Modifiers for FilterOutputStream: 5
 FilterOutputStream <- public void java.io.FilterOutputStream.close() throws java.io.IOException
 FilterOutputStream <- public void java.io.FilterOutputStream.flush() throws java.io.IOException
 FilterOutputStream <- public void java.io.FilterOutputStream.write(int) throws java.io.IOException
 FilterOutputStream <- public void java.io.FilterOutputStream.write(byte[]) throws java.io.IOException
 FilterOutputStream <- public void java.io.FilterOutputStream.write(byte[],int,int) throws java.io.IOException
 Modifiers for FileOutputStream: 7
 FileOutputStream <- public void java.io.FileOutputStream.close() throws java.io.IOException
 FileOutputStream <- public void java.io.OutputStream.flush() throws java.io.IOException
 FileOutputStream <- public java.nio.channels.FileChannel java.io.FileOutputStream.getChannel()
 FileOutputStream <- public final java.io.FileDescriptor java.io.FileOutputStream.getFD() throws java.io.IOException
 FileOutputStream <- public void java.io.FileOutputStream.write(int) throws java.io.IOException
 FileOutputStream <- public void java.io.FileOutputStream.write(byte[]) throws java.io.IOException
 FileOutputStream <- public void java.io.FileOutputStream.write(byte[],int,int) throws java.io.IOException
 Modifiers for DataOutputStream: 17
 DataOutputStream <- public void java.io.FilterOutputStream.close() throws java.io.IOException
 DataOutputStream <- public void java.io.DataOutputStream.flush() throws java.io.IOException
 DataOutputStream <- public final int java.io.DataOutputStream.size()
 DataOutputStream <- public synchronized void java.io.DataOutputStream.write(int) throws java.io.IOException
 DataOutputStream <- public abstract void java.io.DataOutput.write(byte[]) throws java.io.IOException
 DataOutputStream <- public synchronized void java.io.DataOutputStream.write(byte[],int,int) throws java.io.IOException
 DataOutputStream <- public final void java.io.DataOutputStream.writeBoolean(boolean) throws java.io.IOException
 DataOutputStream <- public final void java.io.DataOutputStream.writeByte(int) throws java.io.IOException
 DataOutputStream <- public final void java.io.DataOutputStream.writeBytes(java.lang.String) throws java.io.IOException
 DataOutputStream <- public final void java.io.DataOutputStream.writeChar(int) throws java.io.IOException
 DataOutputStream <- public final void java.io.DataOutputStream.writeChars(java.lang.String) throws java.io.IOException
 DataOutputStream <- public final void java.io.DataOutputStream.writeDouble(double) throws java.io.IOException
 DataOutputStream <- public final void java.io.DataOutputStream.writeFloat(float) throws java.io.IOException
 DataOutputStream <- public final void java.io.DataOutputStream.writeInt(int) throws java.io.IOException
 DataOutputStream <- public final void java.io.DataOutputStream.writeLong(long) throws java.io.IOException
 DataOutputStream <- public final void java.io.DataOutputStream.writeShort(int) throws java.io.IOException
 DataOutputStream <- public final void java.io.DataOutputStream.writeUTF(java.lang.String) throws java.io.IOException
 Modifiers for BufferedOutputStream: 5
 BufferedOutputStream <- public void java.io.FilterOutputStream.close() throws java.io.IOException
 BufferedOutputStream <- public synchronized void java.io.BufferedOutputStream.flush() throws java.io.IOException
 BufferedOutputStream <- public synchronized void java.io.BufferedOutputStream.write(int) throws java.io.IOException
 BufferedOutputStream <- public void java.io.FilterOutputStream.write(byte[]) throws java.io.IOException
 BufferedOutputStream <- public synchronized void java.io.BufferedOutputStream.write(byte[],int,int) throws java.io.IOException
 Modifiers for PrintStream: 32
 PrintStream <- public java.io.PrintStream java.io.PrintStream.append(char)
 PrintStream <- public java.io.PrintStream java.io.PrintStream.append(java.lang.CharSequence)
 PrintStream <- public java.io.PrintStream java.io.PrintStream.append(java.lang.CharSequence,int,int)
 PrintStream <- public boolean java.io.PrintStream.checkError()
 PrintStream <- public void java.io.PrintStream.close()
 PrintStream <- public void java.io.PrintStream.flush()
 PrintStream <- public java.io.PrintStream java.io.PrintStream.format(java.lang.String,java.lang.Object...)
 PrintStream <- public java.io.PrintStream java.io.PrintStream.format(java.util.Locale,java.lang.String,java.lang.Object...)
 PrintStream <- public void java.io.PrintStream.print(char)
 PrintStream <- public void java.io.PrintStream.print(double)
 PrintStream <- public void java.io.PrintStream.print(float)
 PrintStream <- public void java.io.PrintStream.print(int)
 PrintStream <- public void java.io.PrintStream.print(long)
 PrintStream <- public void java.io.PrintStream.print(java.lang.Object)
 PrintStream <- public void java.io.PrintStream.print(java.lang.String)
 PrintStream <- public void java.io.PrintStream.print(boolean)
 PrintStream <- public void java.io.PrintStream.print(char[])
 PrintStream <- public java.io.PrintStream java.io.PrintStream.printf(java.lang.String,java.lang.Object...)
 PrintStream <- public java.io.PrintStream java.io.PrintStream.printf(java.util.Locale,java.lang.String,java.lang.Object...)
 PrintStream <- public void java.io.PrintStream.println()
 PrintStream <- public void java.io.PrintStream.println(char)
 PrintStream <- public void java.io.PrintStream.println(double)
 PrintStream <- public void java.io.PrintStream.println(float)
 PrintStream <- public void java.io.PrintStream.println(int)
 PrintStream <- public void java.io.PrintStream.println(long)
 PrintStream <- public void java.io.PrintStream.println(java.lang.Object)
 PrintStream <- public void java.io.PrintStream.println(java.lang.String)
 PrintStream <- public void java.io.PrintStream.println(boolean)
 PrintStream <- public void java.io.PrintStream.println(char[])
 PrintStream <- public void java.io.PrintStream.write(int)
 PrintStream <- public void java.io.FilterOutputStream.write(byte[]) throws java.io.IOException
 PrintStream <- public void java.io.PrintStream.write(byte[],int,int)
 Modifiers for PipedWriter: 11
 PipedWriter <- public java.io.Writer java.io.Writer.append(char) throws java.io.IOException
 PipedWriter <- public java.io.Writer java.io.Writer.append(java.lang.CharSequence) throws java.io.IOException
 PipedWriter <- public java.io.Writer java.io.Writer.append(java.lang.CharSequence,int,int) throws java.io.IOException
 PipedWriter <- public void java.io.PipedWriter.close() throws java.io.IOException
 PipedWriter <- public synchronized void java.io.PipedWriter.connect(java.io.PipedReader) throws java.io.IOException
 PipedWriter <- public synchronized void java.io.PipedWriter.flush() throws java.io.IOException
 PipedWriter <- public void java.io.PipedWriter.write(int) throws java.io.IOException
 PipedWriter <- public void java.io.Writer.write(java.lang.String) throws java.io.IOException
 PipedWriter <- public void java.io.Writer.write(java.lang.String,int,int) throws java.io.IOException
 PipedWriter <- public void java.io.Writer.write(char[]) throws java.io.IOException
 PipedWriter <- public void java.io.PipedWriter.write(char[],int,int) throws java.io.IOException
 Modifiers for StringWriter: 12
 StringWriter <- public java.io.StringWriter java.io.StringWriter.append(char)
 StringWriter <- public java.io.StringWriter java.io.StringWriter.append(java.lang.CharSequence)
 StringWriter <- public java.io.StringWriter java.io.StringWriter.append(java.lang.CharSequence,int,int)
 StringWriter <- public void java.io.StringWriter.close() throws java.io.IOException
 StringWriter <- public void java.io.StringWriter.flush()
 StringWriter <- public java.lang.StringBuffer java.io.StringWriter.getBuffer()
 StringWriter <- public java.lang.String java.io.StringWriter.toString()
 StringWriter <- public void java.io.StringWriter.write(int)
 StringWriter <- public void java.io.StringWriter.write(java.lang.String)
 StringWriter <- public void java.io.StringWriter.write(java.lang.String,int,int)
 StringWriter <- public void java.io.Writer.write(char[]) throws java.io.IOException
 StringWriter <- public void java.io.StringWriter.write(char[],int,int)
 Modifiers for CharArrayWriter: 15
 CharArrayWriter <- public java.io.CharArrayWriter java.io.CharArrayWriter.append(char)
 CharArrayWriter <- public java.io.CharArrayWriter java.io.CharArrayWriter.append(java.lang.CharSequence)
 CharArrayWriter <- public java.io.CharArrayWriter java.io.CharArrayWriter.append(java.lang.CharSequence,int,int)
 CharArrayWriter <- public void java.io.CharArrayWriter.close()
 CharArrayWriter <- public void java.io.CharArrayWriter.flush()
 CharArrayWriter <- public void java.io.CharArrayWriter.reset()
 CharArrayWriter <- public int java.io.CharArrayWriter.size()
 CharArrayWriter <- public char[] java.io.CharArrayWriter.toCharArray()
 CharArrayWriter <- public java.lang.String java.io.CharArrayWriter.toString()
 CharArrayWriter <- public void java.io.CharArrayWriter.write(int)
 CharArrayWriter <- public void java.io.Writer.write(java.lang.String) throws java.io.IOException
 CharArrayWriter <- public void java.io.CharArrayWriter.write(java.lang.String,int,int)
 CharArrayWriter <- public void java.io.Writer.write(char[]) throws java.io.IOException
 CharArrayWriter <- public void java.io.CharArrayWriter.write(char[],int,int)
 CharArrayWriter <- public void java.io.CharArrayWriter.writeTo(java.io.Writer) throws java.io.IOException
 Modifiers for PrintWriter: 34
 PrintWriter <- public java.io.PrintWriter java.io.PrintWriter.append(char)
 PrintWriter <- public java.io.PrintWriter java.io.PrintWriter.append(java.lang.CharSequence)
 PrintWriter <- public java.io.PrintWriter java.io.PrintWriter.append(java.lang.CharSequence,int,int)
 PrintWriter <- public boolean java.io.PrintWriter.checkError()
 PrintWriter <- public void java.io.PrintWriter.close()
 PrintWriter <- public void java.io.PrintWriter.flush()
 PrintWriter <- public java.io.PrintWriter java.io.PrintWriter.format(java.lang.String,java.lang.Object...)
 PrintWriter <- public java.io.PrintWriter java.io.PrintWriter.format(java.util.Locale,java.lang.String,java.lang.Object...)
 PrintWriter <- public void java.io.PrintWriter.print(char)
 PrintWriter <- public void java.io.PrintWriter.print(double)
 PrintWriter <- public void java.io.PrintWriter.print(float)
 PrintWriter <- public void java.io.PrintWriter.print(int)
 PrintWriter <- public void java.io.PrintWriter.print(long)
 PrintWriter <- public void java.io.PrintWriter.print(java.lang.Object)
 PrintWriter <- public void java.io.PrintWriter.print(java.lang.String)
 PrintWriter <- public void java.io.PrintWriter.print(boolean)
 PrintWriter <- public void java.io.PrintWriter.print(char[])
 PrintWriter <- public java.io.PrintWriter java.io.PrintWriter.printf(java.lang.String,java.lang.Object...)
 PrintWriter <- public java.io.PrintWriter java.io.PrintWriter.printf(java.util.Locale,java.lang.String,java.lang.Object...)
 PrintWriter <- public void java.io.PrintWriter.println()
 PrintWriter <- public void java.io.PrintWriter.println(char)
 PrintWriter <- public void java.io.PrintWriter.println(double)
 PrintWriter <- public void java.io.PrintWriter.println(float)
 PrintWriter <- public void java.io.PrintWriter.println(int)
 PrintWriter <- public void java.io.PrintWriter.println(long)
 PrintWriter <- public void java.io.PrintWriter.println(java.lang.Object)
 PrintWriter <- public void java.io.PrintWriter.println(java.lang.String)
 PrintWriter <- public void java.io.PrintWriter.println(boolean)
 PrintWriter <- public void java.io.PrintWriter.println(char[])
 PrintWriter <- public void java.io.PrintWriter.write(int)
 PrintWriter <- public void java.io.PrintWriter.write(java.lang.String)
 PrintWriter <- public void java.io.PrintWriter.write(java.lang.String,int,int)
 PrintWriter <- public void java.io.PrintWriter.write(char[])
 PrintWriter <- public void java.io.PrintWriter.write(char[],int,int)
 Modifiers for BufferedWriter: 11
 BufferedWriter <- public java.io.Writer java.io.Writer.append(char) throws java.io.IOException
 BufferedWriter <- public java.io.Writer java.io.Writer.append(java.lang.CharSequence) throws java.io.IOException
 BufferedWriter <- public java.io.Writer java.io.Writer.append(java.lang.CharSequence,int,int) throws java.io.IOException
 BufferedWriter <- public void java.io.BufferedWriter.close() throws java.io.IOException
 BufferedWriter <- public void java.io.BufferedWriter.flush() throws java.io.IOException
 BufferedWriter <- public void java.io.BufferedWriter.newLine() throws java.io.IOException
 BufferedWriter <- public void java.io.BufferedWriter.write(int) throws java.io.IOException
 BufferedWriter <- public void java.io.Writer.write(java.lang.String) throws java.io.IOException
 BufferedWriter <- public void java.io.BufferedWriter.write(java.lang.String,int,int) throws java.io.IOException
 BufferedWriter <- public void java.io.Writer.write(char[]) throws java.io.IOException
 BufferedWriter <- public void java.io.BufferedWriter.write(char[],int,int) throws java.io.IOException
 Modifiers for OutputStreamWriter: 11
 OutputStreamWriter <- public java.io.Writer java.io.Writer.append(char) throws java.io.IOException
 OutputStreamWriter <- public java.io.Writer java.io.Writer.append(java.lang.CharSequence) throws java.io.IOException
 OutputStreamWriter <- public java.io.Writer java.io.Writer.append(java.lang.CharSequence,int,int) throws java.io.IOException
 OutputStreamWriter <- public void java.io.OutputStreamWriter.close() throws java.io.IOException
 OutputStreamWriter <- public void java.io.OutputStreamWriter.flush() throws java.io.IOException
 OutputStreamWriter <- public java.lang.String java.io.OutputStreamWriter.getEncoding()
 OutputStreamWriter <- public void java.io.OutputStreamWriter.write(int) throws java.io.IOException
 OutputStreamWriter <- public void java.io.Writer.write(java.lang.String) throws java.io.IOException
 OutputStreamWriter <- public void java.io.OutputStreamWriter.write(java.lang.String,int,int) throws java.io.IOException
 OutputStreamWriter <- public void java.io.Writer.write(char[]) throws java.io.IOException
 OutputStreamWriter <- public void java.io.OutputStreamWriter.write(char[],int,int) throws java.io.IOException
 Modifiers for FileWriter: 11
 FileWriter <- public java.io.Writer java.io.Writer.append(char) throws java.io.IOException
 FileWriter <- public java.io.Writer java.io.Writer.append(java.lang.CharSequence) throws java.io.IOException
 FileWriter <- public java.io.Writer java.io.Writer.append(java.lang.CharSequence,int,int) throws java.io.IOException
 FileWriter <- public void java.io.OutputStreamWriter.close() throws java.io.IOException
 FileWriter <- public void java.io.OutputStreamWriter.flush() throws java.io.IOException
 FileWriter <- public java.lang.String java.io.OutputStreamWriter.getEncoding()
 FileWriter <- public void java.io.OutputStreamWriter.write(int) throws java.io.IOException
 FileWriter <- public void java.io.Writer.write(java.lang.String) throws java.io.IOException
 FileWriter <- public void java.io.OutputStreamWriter.write(java.lang.String,int,int) throws java.io.IOException
 FileWriter <- public void java.io.Writer.write(char[]) throws java.io.IOException
 FileWriter <- public void java.io.OutputStreamWriter.write(char[],int,int) throws java.io.IOException
 Modifiers for FileSinkImages.LayoutPolicy: 2
 FileSinkImages.LayoutPolicy <- public static org.graphstream.stream.file.FileSinkImages$LayoutPolicy org.graphstream.stream.file.FileSinkImages$LayoutPolicy.valueOf(java.lang.String)
 FileSinkImages.LayoutPolicy <- public static org.graphstream.stream.file.FileSinkImages$LayoutPolicy[] org.graphstream.stream.file.FileSinkImages$LayoutPolicy.values()
 Modifiers for FileSinkImages.Quality: 2
 FileSinkImages.Quality <- public static org.graphstream.stream.file.FileSinkImages$Quality org.graphstream.stream.file.FileSinkImages$Quality.valueOf(java.lang.String)
 FileSinkImages.Quality <- public static org.graphstream.stream.file.FileSinkImages$Quality[] org.graphstream.stream.file.FileSinkImages$Quality.values()
 Modifiers for FileSinkImages.RendererType: 2
 FileSinkImages.RendererType <- public static org.graphstream.stream.file.FileSinkImages$RendererType org.graphstream.stream.file.FileSinkImages$RendererType.valueOf(java.lang.String)
 FileSinkImages.RendererType <- public static org.graphstream.stream.file.FileSinkImages$RendererType[] org.graphstream.stream.file.FileSinkImages$RendererType.values()
 Modifiers for StringTokenizer: 6
 StringTokenizer <- public int java.util.StringTokenizer.countTokens()
 StringTokenizer <- public boolean java.util.StringTokenizer.hasMoreElements()
 StringTokenizer <- public boolean java.util.StringTokenizer.hasMoreTokens()
 StringTokenizer <- public java.lang.Object java.util.StringTokenizer.nextElement()
 StringTokenizer <- public java.lang.String java.util.StringTokenizer.nextToken()
 StringTokenizer <- public java.lang.String java.util.StringTokenizer.nextToken(java.lang.String)
 Modifiers for File: 48
 File <- public boolean java.io.File.canExecute()
 File <- public boolean java.io.File.canRead()
 File <- public boolean java.io.File.canWrite()
 File <- public int java.io.File.compareTo(java.io.File)
 File <- public boolean java.io.File.createNewFile() throws java.io.IOException
 File <- public static java.io.File java.io.File.createTempFile(java.lang.String,java.lang.String) throws java.io.IOException
 File <- public static java.io.File java.io.File.createTempFile(java.lang.String,java.lang.String,java.io.File) throws java.io.IOException
 File <- public boolean java.io.File.delete()
 File <- public void java.io.File.deleteOnExit()
 File <- public boolean java.io.File.equals(java.lang.Object)
 File <- public boolean java.io.File.exists()
 File <- public java.io.File java.io.File.getAbsoluteFile()
 File <- public java.lang.String java.io.File.getAbsolutePath()
 File <- public java.io.File java.io.File.getCanonicalFile() throws java.io.IOException
 File <- public java.lang.String java.io.File.getCanonicalPath() throws java.io.IOException
 File <- public long java.io.File.getFreeSpace()
 File <- public java.lang.String java.io.File.getName()
 File <- public java.lang.String java.io.File.getParent()
 File <- public java.io.File java.io.File.getParentFile()
 File <- public java.lang.String java.io.File.getPath()
 File <- public long java.io.File.getTotalSpace()
 File <- public long java.io.File.getUsableSpace()
 File <- public boolean java.io.File.isAbsolute()
 File <- public boolean java.io.File.isDirectory()
 File <- public boolean java.io.File.isFile()
 File <- public boolean java.io.File.isHidden()
 File <- public long java.io.File.lastModified()
 File <- public long java.io.File.length()
 File <- public java.lang.String[] java.io.File.list()
 File <- public java.lang.String[] java.io.File.list(java.io.FilenameFilter)
 File <- public java.io.File[] java.io.File.listFiles()
 File <- public java.io.File[] java.io.File.listFiles(java.io.FileFilter)
 File <- public java.io.File[] java.io.File.listFiles(java.io.FilenameFilter)
 File <- public static java.io.File[] java.io.File.listRoots()
 File <- public boolean java.io.File.mkdir()
 File <- public boolean java.io.File.mkdirs()
 File <- public boolean java.io.File.renameTo(java.io.File)
 File <- public boolean java.io.File.setExecutable(boolean)
 File <- public boolean java.io.File.setExecutable(boolean,boolean)
 File <- public boolean java.io.File.setLastModified(long)
 File <- public boolean java.io.File.setReadOnly()
 File <- public boolean java.io.File.setReadable(boolean)
 File <- public boolean java.io.File.setReadable(boolean,boolean)
 File <- public boolean java.io.File.setWritable(boolean)
 File <- public boolean java.io.File.setWritable(boolean,boolean)
 File <- public java.nio.file.Path java.io.File.toPath()
 File <- public java.lang.String java.io.File.toString()
 File <- public java.net.URI java.io.File.toURI()
 Modifiers for FileDescriptor: 2
 FileDescriptor <- public native void java.io.FileDescriptor.sync() throws java.io.SyncFailedException
 FileDescriptor <- public boolean java.io.FileDescriptor.valid()
 Modifiers for RandomAccessFile: 39
 RandomAccessFile <- public void java.io.RandomAccessFile.close() throws java.io.IOException
 RandomAccessFile <- public final java.nio.channels.FileChannel java.io.RandomAccessFile.getChannel()
 RandomAccessFile <- public final java.io.FileDescriptor java.io.RandomAccessFile.getFD() throws java.io.IOException
 RandomAccessFile <- public native long java.io.RandomAccessFile.getFilePointer() throws java.io.IOException
 RandomAccessFile <- public native long java.io.RandomAccessFile.length() throws java.io.IOException
 RandomAccessFile <- public int java.io.RandomAccessFile.read() throws java.io.IOException
 RandomAccessFile <- public int java.io.RandomAccessFile.read(byte[]) throws java.io.IOException
 RandomAccessFile <- public int java.io.RandomAccessFile.read(byte[],int,int) throws java.io.IOException
 RandomAccessFile <- public final boolean java.io.RandomAccessFile.readBoolean() throws java.io.IOException
 RandomAccessFile <- public final byte java.io.RandomAccessFile.readByte() throws java.io.IOException
 RandomAccessFile <- public final char java.io.RandomAccessFile.readChar() throws java.io.IOException
 RandomAccessFile <- public final double java.io.RandomAccessFile.readDouble() throws java.io.IOException
 RandomAccessFile <- public final float java.io.RandomAccessFile.readFloat() throws java.io.IOException
 RandomAccessFile <- public final void java.io.RandomAccessFile.readFully(byte[]) throws java.io.IOException
 RandomAccessFile <- public final void java.io.RandomAccessFile.readFully(byte[],int,int) throws java.io.IOException
 RandomAccessFile <- public final int java.io.RandomAccessFile.readInt() throws java.io.IOException
 RandomAccessFile <- public final java.lang.String java.io.RandomAccessFile.readLine() throws java.io.IOException
 RandomAccessFile <- public final long java.io.RandomAccessFile.readLong() throws java.io.IOException
 RandomAccessFile <- public final short java.io.RandomAccessFile.readShort() throws java.io.IOException
 RandomAccessFile <- public final java.lang.String java.io.RandomAccessFile.readUTF() throws java.io.IOException
 RandomAccessFile <- public final int java.io.RandomAccessFile.readUnsignedByte() throws java.io.IOException
 RandomAccessFile <- public final int java.io.RandomAccessFile.readUnsignedShort() throws java.io.IOException
 RandomAccessFile <- public native void java.io.RandomAccessFile.seek(long) throws java.io.IOException
 RandomAccessFile <- public native void java.io.RandomAccessFile.setLength(long) throws java.io.IOException
 RandomAccessFile <- public int java.io.RandomAccessFile.skipBytes(int) throws java.io.IOException
 RandomAccessFile <- public void java.io.RandomAccessFile.write(int) throws java.io.IOException
 RandomAccessFile <- public void java.io.RandomAccessFile.write(byte[]) throws java.io.IOException
 RandomAccessFile <- public void java.io.RandomAccessFile.write(byte[],int,int) throws java.io.IOException
 RandomAccessFile <- public final void java.io.RandomAccessFile.writeBoolean(boolean) throws java.io.IOException
 RandomAccessFile <- public final void java.io.RandomAccessFile.writeByte(int) throws java.io.IOException
 RandomAccessFile <- public final void java.io.RandomAccessFile.writeBytes(java.lang.String) throws java.io.IOException
 RandomAccessFile <- public final void java.io.RandomAccessFile.writeChar(int) throws java.io.IOException
 RandomAccessFile <- public final void java.io.RandomAccessFile.writeChars(java.lang.String) throws java.io.IOException
 RandomAccessFile <- public final void java.io.RandomAccessFile.writeDouble(double) throws java.io.IOException
 RandomAccessFile <- public final void java.io.RandomAccessFile.writeFloat(float) throws java.io.IOException
 RandomAccessFile <- public final void java.io.RandomAccessFile.writeInt(int) throws java.io.IOException
 RandomAccessFile <- public final void java.io.RandomAccessFile.writeLong(long) throws java.io.IOException
 RandomAccessFile <- public final void java.io.RandomAccessFile.writeShort(int) throws java.io.IOException
 RandomAccessFile <- public final void java.io.RandomAccessFile.writeUTF(java.lang.String) throws java.io.IOException
 Modifiers for Proxy: 4
 Proxy <- public java.net.SocketAddress java.net.Proxy.address()
 Proxy <- public final boolean java.net.Proxy.equals(java.lang.Object)
 Proxy <- public java.lang.String java.net.Proxy.toString()
 Proxy <- public java.net.Proxy$Type java.net.Proxy.type()
 Modifiers for Segment: 16
 Segment <- public char javax.swing.text.Segment.charAt(int)
 Segment <- public java.lang.Object javax.swing.text.Segment.clone()
 Segment <- public char javax.swing.text.Segment.current()
 Segment <- public char javax.swing.text.Segment.first()
 Segment <- public int javax.swing.text.Segment.getBeginIndex()
 Segment <- public int javax.swing.text.Segment.getEndIndex()
 Segment <- public int javax.swing.text.Segment.getIndex()
 Segment <- public boolean javax.swing.text.Segment.isPartialReturn()
 Segment <- public char javax.swing.text.Segment.last()
 Segment <- public int javax.swing.text.Segment.length()
 Segment <- public char javax.swing.text.Segment.next()
 Segment <- public char javax.swing.text.Segment.previous()
 Segment <- public char javax.swing.text.Segment.setIndex(int)
 Segment <- public void javax.swing.text.Segment.setPartialReturn(boolean)
 Segment <- public java.lang.CharSequence javax.swing.text.Segment.subSequence(int,int)
 Segment <- public java.lang.String javax.swing.text.Segment.toString()
 Modifiers for Locale: 32
 Locale <- public java.lang.Object java.util.Locale.clone()
 Locale <- public boolean java.util.Locale.equals(java.lang.Object)
 Locale <- public static java.util.Locale java.util.Locale.forLanguageTag(java.lang.String)
 Locale <- public java.lang.String java.util.Locale.getCountry()
 Locale <- public static java.util.Locale java.util.Locale.getDefault()
 Locale <- public static java.util.Locale java.util.Locale.getDefault(java.util.Locale$Category)
 Locale <- public final java.lang.String java.util.Locale.getDisplayCountry()
 Locale <- public java.lang.String java.util.Locale.getDisplayCountry(java.util.Locale)
 Locale <- public final java.lang.String java.util.Locale.getDisplayLanguage()
 Locale <- public java.lang.String java.util.Locale.getDisplayLanguage(java.util.Locale)
 Locale <- public final java.lang.String java.util.Locale.getDisplayName()
 Locale <- public java.lang.String java.util.Locale.getDisplayName(java.util.Locale)
 Locale <- public java.lang.String java.util.Locale.getDisplayScript()
 Locale <- public java.lang.String java.util.Locale.getDisplayScript(java.util.Locale)
 Locale <- public final java.lang.String java.util.Locale.getDisplayVariant()
 Locale <- public java.lang.String java.util.Locale.getDisplayVariant(java.util.Locale)
 Locale <- public java.lang.String java.util.Locale.getExtension(char)
 Locale <- public java.util.Set<java.lang.Character> java.util.Locale.getExtensionKeys()
 Locale <- public java.lang.String java.util.Locale.getISO3Country() throws java.util.MissingResourceException
 Locale <- public java.lang.String java.util.Locale.getISO3Language() throws java.util.MissingResourceException
 Locale <- public static java.lang.String[] java.util.Locale.getISOCountries()
 Locale <- public static java.lang.String[] java.util.Locale.getISOLanguages()
 Locale <- public java.lang.String java.util.Locale.getLanguage()
 Locale <- public java.lang.String java.util.Locale.getScript()
 Locale <- public java.util.Set<java.lang.String> java.util.Locale.getUnicodeLocaleAttributes()
 Locale <- public java.util.Set<java.lang.String> java.util.Locale.getUnicodeLocaleKeys()
 Locale <- public java.lang.String java.util.Locale.getUnicodeLocaleType(java.lang.String)
 Locale <- public java.lang.String java.util.Locale.getVariant()
 Locale <- public static synchronized void java.util.Locale.setDefault(java.util.Locale$Category,java.util.Locale)
 Locale <- public static synchronized void java.util.Locale.setDefault(java.util.Locale)
 Locale <- public java.lang.String java.util.Locale.toLanguageTag()
 Locale <- public final java.lang.String java.util.Locale.toString()
 Modifiers for URI: 28
 URI <- public int java.net.URI.compareTo(java.net.URI)
 URI <- public static java.net.URI java.net.URI.create(java.lang.String)
 URI <- public boolean java.net.URI.equals(java.lang.Object)
 URI <- public java.lang.String java.net.URI.getAuthority()
 URI <- public java.lang.String java.net.URI.getFragment()
 URI <- public java.lang.String java.net.URI.getHost()
 URI <- public java.lang.String java.net.URI.getPath()
 URI <- public int java.net.URI.getPort()
 URI <- public java.lang.String java.net.URI.getQuery()
 URI <- public java.lang.String java.net.URI.getRawAuthority()
 URI <- public java.lang.String java.net.URI.getRawFragment()
 URI <- public java.lang.String java.net.URI.getRawPath()
 URI <- public java.lang.String java.net.URI.getRawQuery()
 URI <- public java.lang.String java.net.URI.getRawSchemeSpecificPart()
 URI <- public java.lang.String java.net.URI.getRawUserInfo()
 URI <- public java.lang.String java.net.URI.getScheme()
 URI <- public java.lang.String java.net.URI.getSchemeSpecificPart()
 URI <- public java.lang.String java.net.URI.getUserInfo()
 URI <- public boolean java.net.URI.isAbsolute()
 URI <- public boolean java.net.URI.isOpaque()
 URI <- public java.net.URI java.net.URI.normalize()
 URI <- public java.net.URI java.net.URI.parseServerAuthority() throws java.net.URISyntaxException
 URI <- public java.net.URI java.net.URI.relativize(java.net.URI)
 URI <- public java.net.URI java.net.URI.resolve(java.lang.String)
 URI <- public java.net.URI java.net.URI.resolve(java.net.URI)
 URI <- public java.lang.String java.net.URI.toASCIIString()
 URI <- public java.lang.String java.net.URI.toString()
 URI <- public java.net.URL java.net.URI.toURL() throws java.net.MalformedURLException
 Modifiers for AwkFilenameFilter: 4
 AwkFilenameFilter <- public boolean org.apache.oro.io.RegexFilenameFilter.accept(java.io.File)
 AwkFilenameFilter <- public boolean org.apache.oro.io.RegexFilenameFilter.accept(java.io.File,java.lang.String)
 AwkFilenameFilter <- public void org.apache.oro.io.RegexFilenameFilter.setFilterExpression(java.lang.String) throws org.apache.oro.text.MalformedCachePatternException
 AwkFilenameFilter <- public void org.apache.oro.io.RegexFilenameFilter.setFilterExpression(java.lang.String,int) throws org.apache.oro.text.MalformedCachePatternException
 Modifiers for GlobFilenameFilter: 4
 GlobFilenameFilter <- public boolean org.apache.oro.io.RegexFilenameFilter.accept(java.io.File)
 GlobFilenameFilter <- public boolean org.apache.oro.io.RegexFilenameFilter.accept(java.io.File,java.lang.String)
 GlobFilenameFilter <- public void org.apache.oro.io.RegexFilenameFilter.setFilterExpression(java.lang.String) throws org.apache.oro.text.MalformedCachePatternException
 GlobFilenameFilter <- public void org.apache.oro.io.RegexFilenameFilter.setFilterExpression(java.lang.String,int) throws org.apache.oro.text.MalformedCachePatternException
 Modifiers for Perl5FilenameFilter: 4
 Perl5FilenameFilter <- public boolean org.apache.oro.io.RegexFilenameFilter.accept(java.io.File)
 Perl5FilenameFilter <- public boolean org.apache.oro.io.RegexFilenameFilter.accept(java.io.File,java.lang.String)
 Perl5FilenameFilter <- public void org.apache.oro.io.RegexFilenameFilter.setFilterExpression(java.lang.String) throws org.apache.oro.text.MalformedCachePatternException
 Perl5FilenameFilter <- public void org.apache.oro.io.RegexFilenameFilter.setFilterExpression(java.lang.String,int) throws org.apache.oro.text.MalformedCachePatternException
 Modifiers for Proxy.Type: 2
 Proxy.Type <- public static java.net.Proxy$Type java.net.Proxy$Type.valueOf(java.lang.String)
 Proxy.Type <- public static java.net.Proxy$Type[] java.net.Proxy$Type.values()
 Modifiers for InetSocketAddress: 8
 InetSocketAddress <- public static java.net.InetSocketAddress java.net.InetSocketAddress.createUnresolved(java.lang.String,int)
 InetSocketAddress <- public final boolean java.net.InetSocketAddress.equals(java.lang.Object)
 InetSocketAddress <- public final java.net.InetAddress java.net.InetSocketAddress.getAddress()
 InetSocketAddress <- public final java.lang.String java.net.InetSocketAddress.getHostName()
 InetSocketAddress <- public final java.lang.String java.net.InetSocketAddress.getHostString()
 InetSocketAddress <- public final int java.net.InetSocketAddress.getPort()
 InetSocketAddress <- public final boolean java.net.InetSocketAddress.isUnresolved()
 InetSocketAddress <- public java.lang.String java.net.InetSocketAddress.toString()
 Modifiers for Locale.Category: 2
 Locale.Category <- public static java.util.Locale$Category java.util.Locale$Category.valueOf(java.lang.String)
 Locale.Category <- public static java.util.Locale$Category[] java.util.Locale$Category.values()
 Modifiers for InetAddress: 24
 InetAddress <- public boolean java.net.InetAddress.equals(java.lang.Object)
 InetAddress <- public byte[] java.net.InetAddress.getAddress()
 InetAddress <- public static java.net.InetAddress[] java.net.InetAddress.getAllByName(java.lang.String) throws java.net.UnknownHostException
 InetAddress <- public static java.net.InetAddress java.net.InetAddress.getByAddress(java.lang.String,byte[]) throws java.net.UnknownHostException
 InetAddress <- public static java.net.InetAddress java.net.InetAddress.getByAddress(byte[]) throws java.net.UnknownHostException
 InetAddress <- public static java.net.InetAddress java.net.InetAddress.getByName(java.lang.String) throws java.net.UnknownHostException
 InetAddress <- public java.lang.String java.net.InetAddress.getCanonicalHostName()
 InetAddress <- public java.lang.String java.net.InetAddress.getHostAddress()
 InetAddress <- public java.lang.String java.net.InetAddress.getHostName()
 InetAddress <- public static java.net.InetAddress java.net.InetAddress.getLocalHost() throws java.net.UnknownHostException
 InetAddress <- public static java.net.InetAddress java.net.InetAddress.getLoopbackAddress()
 InetAddress <- public boolean java.net.InetAddress.isAnyLocalAddress()
 InetAddress <- public boolean java.net.InetAddress.isLinkLocalAddress()
 InetAddress <- public boolean java.net.InetAddress.isLoopbackAddress()
 InetAddress <- public boolean java.net.InetAddress.isMCGlobal()
 InetAddress <- public boolean java.net.InetAddress.isMCLinkLocal()
 InetAddress <- public boolean java.net.InetAddress.isMCNodeLocal()
 InetAddress <- public boolean java.net.InetAddress.isMCOrgLocal()
 InetAddress <- public boolean java.net.InetAddress.isMCSiteLocal()
 InetAddress <- public boolean java.net.InetAddress.isMulticastAddress()
 InetAddress <- public boolean java.net.InetAddress.isReachable(int) throws java.io.IOException
 InetAddress <- public boolean java.net.InetAddress.isReachable(java.net.NetworkInterface,int,int) throws java.io.IOException
 InetAddress <- public boolean java.net.InetAddress.isSiteLocalAddress()
 InetAddress <- public java.lang.String java.net.InetAddress.toString()
 Modifiers for NetworkInterface: 20
 NetworkInterface <- public boolean java.net.NetworkInterface.equals(java.lang.Object)
 NetworkInterface <- public static java.net.NetworkInterface java.net.NetworkInterface.getByIndex(int) throws java.net.SocketException
 NetworkInterface <- public static java.net.NetworkInterface java.net.NetworkInterface.getByInetAddress(java.net.InetAddress) throws java.net.SocketException
 NetworkInterface <- public static java.net.NetworkInterface java.net.NetworkInterface.getByName(java.lang.String) throws java.net.SocketException
 NetworkInterface <- public java.lang.String java.net.NetworkInterface.getDisplayName()
 NetworkInterface <- public byte[] java.net.NetworkInterface.getHardwareAddress() throws java.net.SocketException
 NetworkInterface <- public int java.net.NetworkInterface.getIndex()
 NetworkInterface <- public java.util.Enumeration<java.net.InetAddress> java.net.NetworkInterface.getInetAddresses()
 NetworkInterface <- public java.util.List<java.net.InterfaceAddress> java.net.NetworkInterface.getInterfaceAddresses()
 NetworkInterface <- public int java.net.NetworkInterface.getMTU() throws java.net.SocketException
 NetworkInterface <- public java.lang.String java.net.NetworkInterface.getName()
 NetworkInterface <- public static java.util.Enumeration<java.net.NetworkInterface> java.net.NetworkInterface.getNetworkInterfaces() throws java.net.SocketException
 NetworkInterface <- public java.net.NetworkInterface java.net.NetworkInterface.getParent()
 NetworkInterface <- public java.util.Enumeration<java.net.NetworkInterface> java.net.NetworkInterface.getSubInterfaces()
 NetworkInterface <- public boolean java.net.NetworkInterface.isLoopback() throws java.net.SocketException
 NetworkInterface <- public boolean java.net.NetworkInterface.isPointToPoint() throws java.net.SocketException
 NetworkInterface <- public boolean java.net.NetworkInterface.isUp() throws java.net.SocketException
 NetworkInterface <- public boolean java.net.NetworkInterface.isVirtual()
 NetworkInterface <- public boolean java.net.NetworkInterface.supportsMulticast() throws java.net.SocketException
 NetworkInterface <- public java.lang.String java.net.NetworkInterface.toString()
Test calls
 public org.graphstream.graph.implementations.MultiNode_Stub()
 public void org.graphstream.graph.implementations.MultiNode_Stub.addAttribute(java.lang.String,java.lang.Object...)
 public void org.graphstream.graph.implementations.MultiNode_Stub.addAttributes(java.util.Map)
 public void org.graphstream.graph.implementations.MultiNode_Stub.changeAttribute(java.lang.String,java.lang.Object...)
 public void org.graphstream.graph.implementations.MultiNode_Stub.clearAttributes()
 public int org.graphstream.graph.implementations.MultiNode_Stub.collectionSize(java.util.Collection)
 public java.lang.Object[] org.graphstream.graph.implementations.MultiNode_Stub.getArray(java.lang.String)
 public java.lang.Object org.graphstream.graph.implementations.MultiNode_Stub.getAttribute(java.lang.String,java.lang.Class)
 public int org.graphstream.graph.implementations.MultiNode_Stub.getAttributeCount()
 public java.util.Collection org.graphstream.graph.implementations.MultiNode_Stub.getAttributeKeySet()
 public int org.graphstream.graph.implementations.MultiNode_Stub.getDegree()
 public java.lang.Iterable org.graphstream.graph.implementations.MultiNode_Stub.getEachAttributeKey()
 public java.lang.Iterable org.graphstream.graph.implementations.MultiNode_Stub.getEachEdge()
 public java.lang.Iterable org.graphstream.graph.implementations.MultiNode_Stub.getEachEnteringEdge()
 public java.lang.Iterable org.graphstream.graph.implementations.MultiNode_Stub.getEachLeavingEdge()
 public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdge(int)
 public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeBetween(int)
 public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeBetween(java.lang.String)
 public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeBetween(org.graphstream.graph.Node)
 public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeFrom(int)
 public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeFrom(java.lang.String)
 public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeFrom(org.graphstream.graph.Node)
 public java.util.Collection org.graphstream.graph.implementations.MultiNode_Stub.getEdgeSet()
 public java.util.Collection org.graphstream.graph.implementations.MultiNode_Stub.getEdgeSetBetween(int)
 public java.util.Collection org.graphstream.graph.implementations.MultiNode_Stub.getEdgeSetBetween(java.lang.String)
 public java.util.Collection org.graphstream.graph.implementations.MultiNode_Stub.getEdgeSetBetween(org.graphstream.graph.Node)
 public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeToward(int)
 public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeToward(java.lang.String)
 public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeToward(org.graphstream.graph.Node)
 public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEnteringEdge(int)
 public java.util.Collection org.graphstream.graph.implementations.MultiNode_Stub.getEnteringEdgeSet()
 public java.lang.Object org.graphstream.graph.implementations.MultiNode_Stub.getFirstAttributeOf(java.lang.Class,java.lang.String...)
 public java.lang.Object org.graphstream.graph.implementations.MultiNode_Stub.getFirstAttributeOf(java.lang.String...)
 public org.graphstream.graph.Graph org.graphstream.graph.implementations.MultiNode_Stub.getGraph()
 public java.util.HashMap org.graphstream.graph.implementations.MultiNode_Stub.getHash(java.lang.String)
 public java.lang.String org.graphstream.graph.implementations.MultiNode_Stub.getId()
 public int org.graphstream.graph.implementations.MultiNode_Stub.getInDegree()
 public int org.graphstream.graph.implementations.MultiNode_Stub.getIndex()
 public java.lang.CharSequence org.graphstream.graph.implementations.MultiNode_Stub.getLabel(java.lang.String)
 public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getLeavingEdge(int)
 public java.util.Collection org.graphstream.graph.implementations.MultiNode_Stub.getLeavingEdgeSet()
 public double org.graphstream.graph.implementations.MultiNode_Stub.getNumber(java.lang.String)
 public int org.graphstream.graph.implementations.MultiNode_Stub.getOutDegree()
 public java.util.ArrayList org.graphstream.graph.implementations.MultiNode_Stub.getVector(java.lang.String)
 public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasArray(java.lang.String)
 public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasAttribute(java.lang.String)
 public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasAttribute(java.lang.String,java.lang.Class)
 public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasEdgeBetween(int)
 public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasEdgeBetween(java.lang.String)
 public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasEdgeBetween(org.graphstream.graph.Node)
 public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasEdgeFrom(int)
 public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasEdgeFrom(java.lang.String)
 public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasEdgeFrom(org.graphstream.graph.Node)
 public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasEdgeToward(int)
 public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasEdgeToward(java.lang.String)
 public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasEdgeToward(org.graphstream.graph.Node)
 public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasHash(java.lang.String)
 public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasLabel(java.lang.String)
 public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasNumber(java.lang.String)
 public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasVector(java.lang.String)
 public boolean org.graphstream.graph.implementations.MultiNode_Stub.isEnteringEdge(org.graphstream.graph.Edge)
 public boolean org.graphstream.graph.implementations.MultiNode_Stub.isIncidentEdge(org.graphstream.graph.Edge)
 public boolean org.graphstream.graph.implementations.MultiNode_Stub.isLeavingEdge(org.graphstream.graph.Edge)
 public void org.graphstream.graph.implementations.MultiNode_Stub.method_under_test()
 public void org.graphstream.graph.implementations.MultiNode_Stub.removeAttribute(java.lang.String)
 public void org.graphstream.graph.implementations.MultiNode_Stub.setAttribute(java.lang.String,java.lang.Object...)
 public void org.graphstream.graph.implementations.MultiNode_Stub.set_results(java.lang.Object)
