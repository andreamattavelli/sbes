[MASTER] 16:52:25.950 [pool-1-thread-1] DEBUG TestClusterGenerator - Analyzed classes:
org.graphstream.graph.implementations.MultiNode_Stub
java.lang.Object
org.graphstream.graph.implementations.AbstractEdge
org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent
org.graphstream.stream.SinkAdapter
org.graphstream.stream.Timeline
org.graphstream.stream.PipeBase
org.graphstream.stream.PipeAdapter
org.graphstream.stream.AttributePipe
org.graphstream.stream.SourceBase$ElementType
Generators:
 Generators for org.graphstream.graph.implementations.MultiNode_Stub: 1
  org.graphstream.graph.implementations.MultiNode_Stub <- public org.graphstream.graph.implementations.MultiNode_Stub() 
 Generators for java.lang.Object[]: 2
  java.lang.Object[] <- public java.lang.Object[] org.graphstream.graph.implementations.MultiNode_Stub.getArray(java.lang.String) 
  java.lang.Object[] <- public abstract java.lang.Object[] org.graphstream.graph.Element.getArray(java.lang.String) 
 Generators for java.util.Collection<E>: 8
  java.util.Collection<E> <- public java.util.Collection org.graphstream.graph.implementations.MultiNode_Stub.getAttributeKeySet() 
  java.util.Collection<E> <- public java.util.Collection org.graphstream.graph.implementations.MultiNode_Stub.getEdgeSet() 
  java.util.Collection<E> <- public java.util.Collection org.graphstream.graph.implementations.MultiNode_Stub.getEdgeSetBetween(int) 
  java.util.Collection<E> <- public java.util.Collection org.graphstream.graph.implementations.MultiNode_Stub.getEdgeSetBetween(java.lang.String) 
  java.util.Collection<E> <- public java.util.Collection org.graphstream.graph.implementations.MultiNode_Stub.getEdgeSetBetween(org.graphstream.graph.Node) 
  java.util.Collection<E> <- public java.util.Collection org.graphstream.graph.implementations.MultiNode_Stub.getEnteringEdgeSet() 
  java.util.Collection<E> <- public java.util.Collection org.graphstream.graph.implementations.MultiNode_Stub.getLeavingEdgeSet() 
  java.util.Collection<E> <- public java.util.Collection<java.lang.String> org.graphstream.graph.implementations.AbstractElement.getAttributeKeySet() 
 Generators for java.lang.Iterable<E>: 20
  java.lang.Iterable<T> <- public java.lang.Iterable org.graphstream.graph.implementations.MultiNode_Stub.getEachAttributeKey() 
  java.lang.Iterable<T> <- public java.lang.Iterable org.graphstream.graph.implementations.MultiNode_Stub.getEachEdge() 
  java.lang.Iterable<T> <- public java.lang.Iterable org.graphstream.graph.implementations.MultiNode_Stub.getEachEnteringEdge() 
  java.lang.Iterable<T> <- public java.lang.Iterable org.graphstream.graph.implementations.MultiNode_Stub.getEachLeavingEdge() 
  java.lang.Iterable<T> <- public abstract java.lang.Iterable<java.lang.String> org.graphstream.graph.Element.getAttributeKeySet() 
  java.lang.Iterable<T> <- public java.lang.Iterable<java.lang.String> org.graphstream.graph.implementations.AbstractElement.getEachAttributeKey() 
  java.lang.Iterable<T> <- public java.lang.Iterable<org.graphstream.stream.AttributeSink> org.graphstream.graph.implementations.AbstractGraph.attributeSinks() 
  java.lang.Iterable<T> <- public java.lang.Iterable<org.graphstream.stream.ElementSink> org.graphstream.graph.implementations.AbstractGraph.elementSinks() 
  java.lang.Iterable<T> <- public java.lang.Iterable<org.graphstream.stream.AttributeSink> org.graphstream.graph.implementations.AbstractGraph.attributeSinks() 
  java.lang.Iterable<T> <- public java.lang.Iterable<org.graphstream.stream.ElementSink> org.graphstream.graph.implementations.AbstractGraph.elementSinks() 
  java.lang.Iterable<T> <- public java.lang.Iterable<org.graphstream.stream.AttributeSink> org.graphstream.graph.implementations.AbstractGraph.attributeSinks() 
  java.lang.Iterable<T> <- public java.lang.Iterable<org.graphstream.stream.ElementSink> org.graphstream.graph.implementations.AbstractGraph.elementSinks() 
  java.lang.Iterable<T> <- public java.lang.Iterable<org.graphstream.stream.AttributeSink> org.graphstream.graph.implementations.AbstractGraph.attributeSinks() 
  java.lang.Iterable<T> <- public java.lang.Iterable<org.graphstream.stream.ElementSink> org.graphstream.graph.implementations.AbstractGraph.elementSinks() 
  java.lang.Iterable<T> <- public java.lang.Iterable<org.graphstream.stream.AttributeSink> org.graphstream.stream.SourceBase.attributeSinks() 
  java.lang.Iterable<T> <- public java.lang.Iterable<org.graphstream.stream.ElementSink> org.graphstream.stream.SourceBase.elementSinks() 
  java.lang.Iterable<T> <- public java.lang.Iterable<org.graphstream.stream.AttributeSink> org.graphstream.stream.SourceBase.attributeSinks() 
  java.lang.Iterable<T> <- public java.lang.Iterable<org.graphstream.stream.ElementSink> org.graphstream.stream.SourceBase.elementSinks() 
  java.lang.Iterable<T> <- public java.lang.Iterable<org.graphstream.stream.AttributeSink> org.graphstream.stream.SourceBase.attributeSinks() 
  java.lang.Iterable<T> <- public java.lang.Iterable<org.graphstream.stream.ElementSink> org.graphstream.stream.SourceBase.elementSinks() 
 Generators for org.graphstream.graph.Edge: 12
  org.graphstream.graph.Edge <- public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdge(int) 
  org.graphstream.graph.Edge <- public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeBetween(int) 
  org.graphstream.graph.Edge <- public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeBetween(java.lang.String) 
  org.graphstream.graph.Edge <- public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeBetween(org.graphstream.graph.Node) 
  org.graphstream.graph.Edge <- public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeFrom(int) 
  org.graphstream.graph.Edge <- public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeFrom(java.lang.String) 
  org.graphstream.graph.Edge <- public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeFrom(org.graphstream.graph.Node) 
  org.graphstream.graph.Edge <- public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeToward(int) 
  org.graphstream.graph.Edge <- public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeToward(java.lang.String) 
  org.graphstream.graph.Edge <- public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeToward(org.graphstream.graph.Node) 
  org.graphstream.graph.Edge <- public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEnteringEdge(int) 
  org.graphstream.graph.Edge <- public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getLeavingEdge(int) 
 Generators for org.graphstream.graph.Graph: 1
  org.graphstream.graph.Graph <- public org.graphstream.graph.Graph org.graphstream.graph.implementations.MultiNode_Stub.getGraph() 
 Generators for java.util.HashMap<K, V>: 6
  java.util.HashMap<K, V> <- public java.util.HashMap org.graphstream.graph.implementations.MultiNode_Stub.getHash(java.lang.String) 
  java.util.HashMap<K, V> <- public java.util.HashMap() 
  java.util.HashMap<K, V> <- public java.util.HashMap(int) 
  java.util.HashMap<K, V> <- public java.util.HashMap(int,float) 
  java.util.HashMap<K, V> <- public java.util.HashMap(java.util.Map<? extends K, ? extends V>) 
  java.util.HashMap<K, V> <- public abstract java.util.HashMap<K, V> org.graphstream.graph.Element.getHash(java.lang.String) 
 Generators for java.lang.String: 5
  java.lang.String <- public java.lang.String org.graphstream.graph.implementations.MultiNode_Stub.getId() 
  java.lang.String <- public static final java.lang.String org.graphstream.graph.implementations.MultiNode_Stub.ELEMENT_0_0 
  java.lang.String <- public abstract java.lang.String org.graphstream.graph.Element.getId() 
  java.lang.String <- protected java.lang.String org.graphstream.graph.implementations.AbstractEdge.myGraphId() 
  java.lang.String <- public java.lang.String org.graphstream.graph.implementations.AbstractEdge.toString() 
 Generators for java.lang.CharSequence: 2
  java.lang.CharSequence <- public java.lang.CharSequence org.graphstream.graph.implementations.MultiNode_Stub.getLabel(java.lang.String) 
  java.lang.CharSequence <- public abstract java.lang.CharSequence org.graphstream.graph.Element.getLabel(java.lang.String) 
 Generators for java.util.ArrayList<E>: 2
  java.util.ArrayList<E> <- public java.util.ArrayList org.graphstream.graph.implementations.MultiNode_Stub.getVector(java.lang.String) 
  java.util.ArrayList<E> <- public abstract java.util.ArrayList<? extends java.lang.Number> org.graphstream.graph.Element.getVector(java.lang.String) 
 Generators for java.lang.Object: 1
  java.lang.Object <- public java.lang.Object() 
 Generators for java.util.LinkedList<E>: 2
  java.util.LinkedList<E> <- public java.util.LinkedList() 
  java.util.LinkedList<E> <- public java.util.LinkedList(java.util.Collection<? extends E>) 
 Generators for java.util.Iterator<E>: 2
  java.util.Iterator<E> <- public java.util.Iterator<E> java.util.LinkedList.descendingIterator() 
  java.util.Iterator<E> <- public abstract java.util.Iterator<java.lang.String> org.graphstream.graph.Element.getAttributeKeyIterator() 
 Generators for org.graphstream.graph.implementations.AdjacencyListNode: 1
  org.graphstream.graph.implementations.AdjacencyListNode <- protected org.graphstream.graph.implementations.AdjacencyListNode(org.graphstream.graph.implementations.AbstractGraph,java.lang.String) 
 Generators for org.graphstream.graph.implementations.SingleNode: 1
  org.graphstream.graph.implementations.SingleNode <- protected org.graphstream.graph.implementations.SingleNode(org.graphstream.graph.implementations.AbstractGraph,java.lang.String) 
 Generators for org.graphstream.graph.implementations.MultiNode: 1
  org.graphstream.graph.implementations.MultiNode <- public org.graphstream.graph.implementations.MultiNode(org.graphstream.graph.implementations.AbstractGraph,java.lang.String) 
 Generators for org.graphstream.graph.implementations.AbstractEdge: 1
  org.graphstream.graph.implementations.AbstractEdge <- protected org.graphstream.graph.implementations.AbstractEdge(java.lang.String,org.graphstream.graph.implementations.AbstractNode,org.graphstream.graph.implementations.AbstractNode,boolean) 
 Generators for org.graphstream.graph.implementations.AdjacencyListGraph: 3
  org.graphstream.graph.implementations.AdjacencyListGraph <- public org.graphstream.graph.implementations.AdjacencyListGraph(java.lang.String) 
  org.graphstream.graph.implementations.AdjacencyListGraph <- public org.graphstream.graph.implementations.AdjacencyListGraph(java.lang.String,boolean,boolean) 
  org.graphstream.graph.implementations.AdjacencyListGraph <- public org.graphstream.graph.implementations.AdjacencyListGraph(java.lang.String,boolean,boolean,int,int) 
 Generators for org.graphstream.ui.swingViewer.Viewer: 8
  org.graphstream.ui.swingViewer.Viewer <- public org.graphstream.ui.swingViewer.Viewer org.graphstream.graph.implementations.AbstractGraph.display() 
  org.graphstream.ui.swingViewer.Viewer <- public org.graphstream.ui.swingViewer.Viewer org.graphstream.graph.implementations.AbstractGraph.display(boolean) 
  org.graphstream.ui.swingViewer.Viewer <- public org.graphstream.ui.swingViewer.Viewer org.graphstream.graph.implementations.AbstractGraph.display() 
  org.graphstream.ui.swingViewer.Viewer <- public org.graphstream.ui.swingViewer.Viewer org.graphstream.graph.implementations.AbstractGraph.display(boolean) 
  org.graphstream.ui.swingViewer.Viewer <- public org.graphstream.ui.swingViewer.Viewer org.graphstream.graph.implementations.AbstractGraph.display() 
  org.graphstream.ui.swingViewer.Viewer <- public org.graphstream.ui.swingViewer.Viewer org.graphstream.graph.implementations.AbstractGraph.display(boolean) 
  org.graphstream.ui.swingViewer.Viewer <- public org.graphstream.ui.swingViewer.Viewer org.graphstream.graph.implementations.AbstractGraph.display() 
  org.graphstream.ui.swingViewer.Viewer <- public org.graphstream.ui.swingViewer.Viewer org.graphstream.graph.implementations.AbstractGraph.display(boolean) 
 Generators for org.graphstream.graph.EdgeFactory<E>: 4
  org.graphstream.graph.EdgeFactory<E> <- public org.graphstream.graph.EdgeFactory<? extends org.graphstream.graph.Edge> org.graphstream.graph.implementations.AbstractGraph.edgeFactory() 
  org.graphstream.graph.EdgeFactory<E> <- public org.graphstream.graph.EdgeFactory<? extends org.graphstream.graph.Edge> org.graphstream.graph.implementations.AbstractGraph.edgeFactory() 
  org.graphstream.graph.EdgeFactory<E> <- public org.graphstream.graph.EdgeFactory<? extends org.graphstream.graph.Edge> org.graphstream.graph.implementations.AbstractGraph.edgeFactory() 
  org.graphstream.graph.EdgeFactory<E> <- public org.graphstream.graph.EdgeFactory<? extends org.graphstream.graph.Edge> org.graphstream.graph.implementations.AbstractGraph.edgeFactory() 
 Generators for org.graphstream.graph.implementations.SingleGraph: 3
  org.graphstream.graph.implementations.SingleGraph <- public org.graphstream.graph.implementations.SingleGraph(java.lang.String) 
  org.graphstream.graph.implementations.SingleGraph <- public org.graphstream.graph.implementations.SingleGraph(java.lang.String,boolean,boolean) 
  org.graphstream.graph.implementations.SingleGraph <- public org.graphstream.graph.implementations.SingleGraph(java.lang.String,boolean,boolean,int,int) 
 Generators for org.graphstream.graph.implementations.MultiGraph: 3
  org.graphstream.graph.implementations.MultiGraph <- public org.graphstream.graph.implementations.MultiGraph(java.lang.String) 
  org.graphstream.graph.implementations.MultiGraph <- public org.graphstream.graph.implementations.MultiGraph(java.lang.String,boolean,boolean) 
  org.graphstream.graph.implementations.MultiGraph <- public org.graphstream.graph.implementations.MultiGraph(java.lang.String,boolean,boolean,int,int) 
 Generators for org.graphstream.graph.implementations.DefaultGraph: 3
  org.graphstream.graph.implementations.DefaultGraph <- public org.graphstream.graph.implementations.DefaultGraph(java.lang.String) 
  org.graphstream.graph.implementations.DefaultGraph <- public org.graphstream.graph.implementations.DefaultGraph(java.lang.String,boolean,boolean) 
  org.graphstream.graph.implementations.DefaultGraph <- public org.graphstream.graph.implementations.DefaultGraph(java.lang.String,boolean,boolean,int,int) 
 Generators for org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent: 1
  org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent <- public static org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent.valueOf(java.lang.String) 
 Generators for org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent[]: 1
  org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent[] <- public static org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent[] org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent.values() 
 Generators for org.graphstream.stream.SinkAdapter: 1
  org.graphstream.stream.SinkAdapter <- public org.graphstream.stream.SinkAdapter() 
 Generators for org.graphstream.stream.Timeline: 1
  org.graphstream.stream.Timeline <- public org.graphstream.stream.Timeline() 
 Generators for org.graphstream.stream.PipeBase: 1
  org.graphstream.stream.PipeBase <- public org.graphstream.stream.PipeBase() 
 Generators for org.graphstream.stream.PipeAdapter: 1
  org.graphstream.stream.PipeAdapter <- public org.graphstream.stream.PipeAdapter() 
 Generators for org.graphstream.stream.AttributePipe: 1
  org.graphstream.stream.AttributePipe <- public org.graphstream.stream.AttributePipe() 
 Generators for org.graphstream.stream.AttributePredicate: 4
  org.graphstream.stream.AttributePredicate <- public org.graphstream.stream.AttributePredicate org.graphstream.stream.AttributePipe.getEdgeAttributeFilter() 
  org.graphstream.stream.AttributePredicate <- public org.graphstream.stream.AttributePredicate org.graphstream.stream.AttributePipe.getGlobalAttributeFilter() 
  org.graphstream.stream.AttributePredicate <- public org.graphstream.stream.AttributePredicate org.graphstream.stream.AttributePipe.getGraphAttributeFilter() 
  org.graphstream.stream.AttributePredicate <- public org.graphstream.stream.AttributePredicate org.graphstream.stream.AttributePipe.getNodeAttributeFilter() 
 Generators for org.graphstream.stream.SourceBase$ElementType: 1
  org.graphstream.stream.SourceBase$ElementType <- public static org.graphstream.stream.SourceBase$ElementType org.graphstream.stream.SourceBase$ElementType.valueOf(java.lang.String) 
 Generators for org.graphstream.stream.SourceBase$ElementType[]: 1
  org.graphstream.stream.SourceBase$ElementType[] <- public static org.graphstream.stream.SourceBase$ElementType[] org.graphstream.stream.SourceBase$ElementType.values() 
Modifiers:
 Modifiers for MultiNode_Stub: 66
 MultiNode_Stub <- public void org.graphstream.graph.implementations.MultiNode_Stub.addAttribute(java.lang.String,java.lang.Object...)
 MultiNode_Stub <- public void org.graphstream.graph.implementations.MultiNode_Stub.addAttributes(java.util.Map)
 MultiNode_Stub <- public void org.graphstream.graph.implementations.MultiNode_Stub.changeAttribute(java.lang.String,java.lang.Object...)
 MultiNode_Stub <- public void org.graphstream.graph.implementations.MultiNode_Stub.clearAttributes()
 MultiNode_Stub <- public int org.graphstream.graph.implementations.MultiNode_Stub.collectionSize(java.util.Collection)
 MultiNode_Stub <- public java.lang.Object[] org.graphstream.graph.implementations.MultiNode_Stub.getArray(java.lang.String)
 MultiNode_Stub <- public java.lang.Object org.graphstream.graph.implementations.MultiNode_Stub.getAttribute(java.lang.String,java.lang.Class)
 MultiNode_Stub <- public int org.graphstream.graph.implementations.MultiNode_Stub.getAttributeCount()
 MultiNode_Stub <- public java.util.Collection org.graphstream.graph.implementations.MultiNode_Stub.getAttributeKeySet()
 MultiNode_Stub <- public int org.graphstream.graph.implementations.MultiNode_Stub.getDegree()
 MultiNode_Stub <- public java.lang.Iterable org.graphstream.graph.implementations.MultiNode_Stub.getEachAttributeKey()
 MultiNode_Stub <- public java.lang.Iterable org.graphstream.graph.implementations.MultiNode_Stub.getEachEdge()
 MultiNode_Stub <- public java.lang.Iterable org.graphstream.graph.implementations.MultiNode_Stub.getEachEnteringEdge()
 MultiNode_Stub <- public java.lang.Iterable org.graphstream.graph.implementations.MultiNode_Stub.getEachLeavingEdge()
 MultiNode_Stub <- public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdge(int)
 MultiNode_Stub <- public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeBetween(int)
 MultiNode_Stub <- public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeBetween(java.lang.String)
 MultiNode_Stub <- public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeBetween(org.graphstream.graph.Node)
 MultiNode_Stub <- public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeFrom(int)
 MultiNode_Stub <- public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeFrom(java.lang.String)
 MultiNode_Stub <- public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeFrom(org.graphstream.graph.Node)
 MultiNode_Stub <- public java.util.Collection org.graphstream.graph.implementations.MultiNode_Stub.getEdgeSet()
 MultiNode_Stub <- public java.util.Collection org.graphstream.graph.implementations.MultiNode_Stub.getEdgeSetBetween(int)
 MultiNode_Stub <- public java.util.Collection org.graphstream.graph.implementations.MultiNode_Stub.getEdgeSetBetween(java.lang.String)
 MultiNode_Stub <- public java.util.Collection org.graphstream.graph.implementations.MultiNode_Stub.getEdgeSetBetween(org.graphstream.graph.Node)
 MultiNode_Stub <- public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeToward(int)
 MultiNode_Stub <- public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeToward(java.lang.String)
 MultiNode_Stub <- public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeToward(org.graphstream.graph.Node)
 MultiNode_Stub <- public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEnteringEdge(int)
 MultiNode_Stub <- public java.util.Collection org.graphstream.graph.implementations.MultiNode_Stub.getEnteringEdgeSet()
 MultiNode_Stub <- public java.lang.Object org.graphstream.graph.implementations.MultiNode_Stub.getFirstAttributeOf(java.lang.Class,java.lang.String...)
 MultiNode_Stub <- public java.lang.Object org.graphstream.graph.implementations.MultiNode_Stub.getFirstAttributeOf(java.lang.String...)
 MultiNode_Stub <- public org.graphstream.graph.Graph org.graphstream.graph.implementations.MultiNode_Stub.getGraph()
 MultiNode_Stub <- public java.util.HashMap org.graphstream.graph.implementations.MultiNode_Stub.getHash(java.lang.String)
 MultiNode_Stub <- public java.lang.String org.graphstream.graph.implementations.MultiNode_Stub.getId()
 MultiNode_Stub <- public int org.graphstream.graph.implementations.MultiNode_Stub.getInDegree()
 MultiNode_Stub <- public int org.graphstream.graph.implementations.MultiNode_Stub.getIndex()
 MultiNode_Stub <- public java.lang.CharSequence org.graphstream.graph.implementations.MultiNode_Stub.getLabel(java.lang.String)
 MultiNode_Stub <- public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getLeavingEdge(int)
 MultiNode_Stub <- public java.util.Collection org.graphstream.graph.implementations.MultiNode_Stub.getLeavingEdgeSet()
 MultiNode_Stub <- public double org.graphstream.graph.implementations.MultiNode_Stub.getNumber(java.lang.String)
 MultiNode_Stub <- public int org.graphstream.graph.implementations.MultiNode_Stub.getOutDegree()
 MultiNode_Stub <- public java.util.ArrayList org.graphstream.graph.implementations.MultiNode_Stub.getVector(java.lang.String)
 MultiNode_Stub <- public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasArray(java.lang.String)
 MultiNode_Stub <- public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasAttribute(java.lang.String)
 MultiNode_Stub <- public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasAttribute(java.lang.String,java.lang.Class)
 MultiNode_Stub <- public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasEdgeBetween(int)
 MultiNode_Stub <- public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasEdgeBetween(java.lang.String)
 MultiNode_Stub <- public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasEdgeBetween(org.graphstream.graph.Node)
 MultiNode_Stub <- public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasEdgeFrom(int)
 MultiNode_Stub <- public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasEdgeFrom(java.lang.String)
 MultiNode_Stub <- public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasEdgeFrom(org.graphstream.graph.Node)
 MultiNode_Stub <- public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasEdgeToward(int)
 MultiNode_Stub <- public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasEdgeToward(java.lang.String)
 MultiNode_Stub <- public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasEdgeToward(org.graphstream.graph.Node)
 MultiNode_Stub <- public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasHash(java.lang.String)
 MultiNode_Stub <- public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasLabel(java.lang.String)
 MultiNode_Stub <- public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasNumber(java.lang.String)
 MultiNode_Stub <- public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasVector(java.lang.String)
 MultiNode_Stub <- public boolean org.graphstream.graph.implementations.MultiNode_Stub.isEnteringEdge(org.graphstream.graph.Edge)
 MultiNode_Stub <- public boolean org.graphstream.graph.implementations.MultiNode_Stub.isIncidentEdge(org.graphstream.graph.Edge)
 MultiNode_Stub <- public boolean org.graphstream.graph.implementations.MultiNode_Stub.isLeavingEdge(org.graphstream.graph.Edge)
 MultiNode_Stub <- public void org.graphstream.graph.implementations.MultiNode_Stub.method_under_test()
 MultiNode_Stub <- public void org.graphstream.graph.implementations.MultiNode_Stub.removeAttribute(java.lang.String)
 MultiNode_Stub <- public void org.graphstream.graph.implementations.MultiNode_Stub.setAttribute(java.lang.String,java.lang.Object...)
 MultiNode_Stub <- public void org.graphstream.graph.implementations.MultiNode_Stub.set_results(java.lang.Object)
 Modifiers for HashMap: 2
 Modifiers for LinkedList: 13
 LinkedList <- public boolean java.util.LinkedList.add(E)
 Modifiers for AdjacencyListNode: 12
 AdjacencyListNode <- public abstract void org.graphstream.graph.Element.addAttribute(java.lang.String,java.lang.Object...)
 AdjacencyListNode <- protected void org.graphstream.graph.implementations.AbstractElement.addAttribute_(java.lang.String,long,java.lang.String,java.lang.Object...)
 AdjacencyListNode <- public abstract void org.graphstream.graph.Element.addAttributes(java.util.Map<java.lang.String, java.lang.Object>)
 AdjacencyListNode <- protected void org.graphstream.graph.implementations.AbstractElement.addAttributes_(java.lang.String,long,java.util.Map<java.lang.String, java.lang.Object>)
 AdjacencyListNode <- protected boolean org.graphstream.graph.implementations.AdjacencyListNode.addEdgeCallback(org.graphstream.graph.implementations.AbstractEdge)
 AdjacencyListNode <- protected void org.graphstream.graph.implementations.AbstractNode.attributeChanged(java.lang.String,long,java.lang.String,org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent,java.lang.Object,java.lang.Object)
 AdjacencyListNode <- public abstract void org.graphstream.graph.Element.changeAttribute(java.lang.String,java.lang.Object...)
 AdjacencyListNode <- protected void org.graphstream.graph.implementations.AbstractElement.changeAttribute_(java.lang.String,long,java.lang.String,java.lang.Object...)
 AdjacencyListNode <- public abstract void org.graphstream.graph.Element.clearAttributes()
 AdjacencyListNode <- protected void org.graphstream.graph.implementations.AbstractElement.clearAttributes_(java.lang.String,long)
 AdjacencyListNode <- protected void org.graphstream.graph.implementations.AdjacencyListNode.clearCallback()
 AdjacencyListNode <- protected char org.graphstream.graph.implementations.AdjacencyListNode.edgeType(org.graphstream.graph.implementations.AbstractEdge)
 Modifiers for SingleNode: 12
 SingleNode <- public abstract void org.graphstream.graph.Element.addAttribute(java.lang.String,java.lang.Object...)
 SingleNode <- protected void org.graphstream.graph.implementations.AbstractElement.addAttribute_(java.lang.String,long,java.lang.String,java.lang.Object...)
 SingleNode <- public abstract void org.graphstream.graph.Element.addAttributes(java.util.Map<java.lang.String, java.lang.Object>)
 SingleNode <- protected void org.graphstream.graph.implementations.AbstractElement.addAttributes_(java.lang.String,long,java.util.Map<java.lang.String, java.lang.Object>)
 SingleNode <- protected boolean org.graphstream.graph.implementations.SingleNode.addEdgeCallback(org.graphstream.graph.implementations.AbstractEdge)
 SingleNode <- protected void org.graphstream.graph.implementations.AbstractNode.attributeChanged(java.lang.String,long,java.lang.String,org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent,java.lang.Object,java.lang.Object)
 SingleNode <- public abstract void org.graphstream.graph.Element.changeAttribute(java.lang.String,java.lang.Object...)
 SingleNode <- protected void org.graphstream.graph.implementations.AbstractElement.changeAttribute_(java.lang.String,long,java.lang.String,java.lang.Object...)
 SingleNode <- public abstract void org.graphstream.graph.Element.clearAttributes()
 SingleNode <- protected void org.graphstream.graph.implementations.AbstractElement.clearAttributes_(java.lang.String,long)
 SingleNode <- protected void org.graphstream.graph.implementations.SingleNode.clearCallback()
 SingleNode <- protected char org.graphstream.graph.implementations.AdjacencyListNode.edgeType(org.graphstream.graph.implementations.AbstractEdge)
 Modifiers for MultiNode: 12
 MultiNode <- public abstract void org.graphstream.graph.Element.addAttribute(java.lang.String,java.lang.Object...)
 MultiNode <- protected void org.graphstream.graph.implementations.AbstractElement.addAttribute_(java.lang.String,long,java.lang.String,java.lang.Object...)
 MultiNode <- public abstract void org.graphstream.graph.Element.addAttributes(java.util.Map<java.lang.String, java.lang.Object>)
 MultiNode <- protected void org.graphstream.graph.implementations.AbstractElement.addAttributes_(java.lang.String,long,java.util.Map<java.lang.String, java.lang.Object>)
 MultiNode <- protected boolean org.graphstream.graph.implementations.MultiNode.addEdgeCallback(org.graphstream.graph.implementations.AbstractEdge)
 MultiNode <- protected void org.graphstream.graph.implementations.AbstractNode.attributeChanged(java.lang.String,long,java.lang.String,org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent,java.lang.Object,java.lang.Object)
 MultiNode <- public abstract void org.graphstream.graph.Element.changeAttribute(java.lang.String,java.lang.Object...)
 MultiNode <- protected void org.graphstream.graph.implementations.AbstractElement.changeAttribute_(java.lang.String,long,java.lang.String,java.lang.Object...)
 MultiNode <- public abstract void org.graphstream.graph.Element.clearAttributes()
 MultiNode <- protected void org.graphstream.graph.implementations.AbstractElement.clearAttributes_(java.lang.String,long)
 MultiNode <- protected void org.graphstream.graph.implementations.MultiNode.clearCallback()
 MultiNode <- protected char org.graphstream.graph.implementations.AdjacencyListNode.edgeType(org.graphstream.graph.implementations.AbstractEdge)
 Modifiers for AbstractEdge: 39
 AbstractEdge <- public abstract void org.graphstream.graph.Element.addAttribute(java.lang.String,java.lang.Object...)
 AbstractEdge <- protected void org.graphstream.graph.implementations.AbstractElement.addAttribute_(java.lang.String,long,java.lang.String,java.lang.Object...)
 AbstractEdge <- public abstract void org.graphstream.graph.Element.addAttributes(java.util.Map<java.lang.String, java.lang.Object>)
 AbstractEdge <- protected void org.graphstream.graph.implementations.AbstractElement.addAttributes_(java.lang.String,long,java.util.Map<java.lang.String, java.lang.Object>)
 AbstractEdge <- protected void org.graphstream.graph.implementations.AbstractEdge.attributeChanged(java.lang.String,long,java.lang.String,org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent,java.lang.Object,java.lang.Object)
 AbstractEdge <- public abstract void org.graphstream.graph.Element.changeAttribute(java.lang.String,java.lang.Object...)
 AbstractEdge <- protected void org.graphstream.graph.implementations.AbstractElement.changeAttribute_(java.lang.String,long,java.lang.String,java.lang.Object...)
 AbstractEdge <- public abstract void org.graphstream.graph.Element.clearAttributes()
 AbstractEdge <- protected void org.graphstream.graph.implementations.AbstractElement.clearAttributes_(java.lang.String,long)
 AbstractEdge <- public abstract java.lang.Object[] org.graphstream.graph.Element.getArray(java.lang.String)
 AbstractEdge <- public abstract int org.graphstream.graph.Element.getAttributeCount()
 AbstractEdge <- public abstract java.util.Iterator<java.lang.String> org.graphstream.graph.Element.getAttributeKeyIterator()
 AbstractEdge <- public abstract java.lang.Iterable<java.lang.String> org.graphstream.graph.Element.getAttributeKeySet()
 AbstractEdge <- public java.util.Collection<java.lang.String> org.graphstream.graph.implementations.AbstractElement.getAttributeKeySet()
 AbstractEdge <- public java.lang.Iterable<java.lang.String> org.graphstream.graph.implementations.AbstractElement.getEachAttributeKey()
 AbstractEdge <- public abstract java.util.HashMap<?, ?> org.graphstream.graph.Element.getHash(java.lang.String)
 AbstractEdge <- public abstract java.lang.String org.graphstream.graph.Element.getId()
 AbstractEdge <- public abstract int org.graphstream.graph.Element.getIndex()
 AbstractEdge <- public abstract java.lang.CharSequence org.graphstream.graph.Element.getLabel(java.lang.String)
 AbstractEdge <- public abstract double org.graphstream.graph.Element.getNumber(java.lang.String)
 AbstractEdge <- public abstract java.util.ArrayList<? extends java.lang.Number> org.graphstream.graph.Element.getVector(java.lang.String)
 AbstractEdge <- public abstract boolean org.graphstream.graph.Element.hasArray(java.lang.String)
 AbstractEdge <- public abstract boolean org.graphstream.graph.Element.hasAttribute(java.lang.String)
 AbstractEdge <- public abstract boolean org.graphstream.graph.Element.hasAttribute(java.lang.String,java.lang.Class<E>)
 AbstractEdge <- public abstract boolean org.graphstream.graph.Element.hasHash(java.lang.String)
 AbstractEdge <- public abstract boolean org.graphstream.graph.Element.hasLabel(java.lang.String)
 AbstractEdge <- public abstract boolean org.graphstream.graph.Element.hasNumber(java.lang.String)
 AbstractEdge <- public abstract boolean org.graphstream.graph.Element.hasVector(java.lang.String)
 AbstractEdge <- public boolean org.graphstream.graph.implementations.AbstractEdge.isDirected()
 AbstractEdge <- public boolean org.graphstream.graph.implementations.AbstractEdge.isLoop()
 AbstractEdge <- protected java.lang.String org.graphstream.graph.implementations.AbstractEdge.myGraphId()
 AbstractEdge <- protected long org.graphstream.graph.implementations.AbstractEdge.newEvent()
 AbstractEdge <- protected boolean org.graphstream.graph.implementations.AbstractEdge.nullAttributesAreErrors()
 AbstractEdge <- public abstract void org.graphstream.graph.Element.removeAttribute(java.lang.String)
 AbstractEdge <- protected void org.graphstream.graph.implementations.AbstractElement.removeAttribute_(java.lang.String,long,java.lang.String)
 AbstractEdge <- public abstract void org.graphstream.graph.Element.setAttribute(java.lang.String,java.lang.Object...)
 AbstractEdge <- protected void org.graphstream.graph.implementations.AbstractElement.setAttribute_(java.lang.String,long,java.lang.String,java.lang.Object...)
 AbstractEdge <- protected void org.graphstream.graph.implementations.AbstractElement.setIndex(int)
 AbstractEdge <- public java.lang.String org.graphstream.graph.implementations.AbstractEdge.toString()
 Modifiers for AdjacencyListGraph: 30
 AdjacencyListGraph <- public abstract void org.graphstream.graph.Element.addAttribute(java.lang.String,java.lang.Object...)
 AdjacencyListGraph <- public void org.graphstream.graph.implementations.AbstractGraph.addAttributeSink(org.graphstream.stream.AttributeSink)
 AdjacencyListGraph <- protected void org.graphstream.graph.implementations.AbstractElement.addAttribute_(java.lang.String,long,java.lang.String,java.lang.Object...)
 AdjacencyListGraph <- public abstract void org.graphstream.graph.Element.addAttributes(java.util.Map<java.lang.String, java.lang.Object>)
 AdjacencyListGraph <- protected void org.graphstream.graph.implementations.AbstractElement.addAttributes_(java.lang.String,long,java.util.Map<java.lang.String, java.lang.Object>)
 AdjacencyListGraph <- protected void org.graphstream.graph.implementations.AdjacencyListGraph.addEdgeCallback(org.graphstream.graph.implementations.AbstractEdge)
 AdjacencyListGraph <- public void org.graphstream.graph.implementations.AbstractGraph.addElementSink(org.graphstream.stream.ElementSink)
 AdjacencyListGraph <- protected void org.graphstream.graph.implementations.AdjacencyListGraph.addNodeCallback(org.graphstream.graph.implementations.AbstractNode)
 AdjacencyListGraph <- public void org.graphstream.graph.implementations.AbstractGraph.addSink(org.graphstream.stream.Sink)
 AdjacencyListGraph <- protected void org.graphstream.graph.implementations.AbstractGraph.attributeChanged(java.lang.String,long,java.lang.String,org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent,java.lang.Object,java.lang.Object)
 AdjacencyListGraph <- public java.lang.Iterable<org.graphstream.stream.AttributeSink> org.graphstream.graph.implementations.AbstractGraph.attributeSinks()
 AdjacencyListGraph <- public abstract void org.graphstream.graph.Element.changeAttribute(java.lang.String,java.lang.Object...)
 AdjacencyListGraph <- protected void org.graphstream.graph.implementations.AbstractElement.changeAttribute_(java.lang.String,long,java.lang.String,java.lang.Object...)
 AdjacencyListGraph <- public void org.graphstream.graph.implementations.AbstractGraph.clear()
 AdjacencyListGraph <- public void org.graphstream.graph.implementations.AbstractGraph.clearAttributeSinks()
 AdjacencyListGraph <- public abstract void org.graphstream.graph.Element.clearAttributes()
 AdjacencyListGraph <- protected void org.graphstream.graph.implementations.AbstractElement.clearAttributes_(java.lang.String,long)
 AdjacencyListGraph <- protected void org.graphstream.graph.implementations.AdjacencyListGraph.clearCallback()
 AdjacencyListGraph <- public void org.graphstream.graph.implementations.AbstractGraph.clearElementSinks()
 AdjacencyListGraph <- public void org.graphstream.graph.implementations.AbstractGraph.clearSinks()
 AdjacencyListGraph <- protected void org.graphstream.graph.implementations.AbstractGraph.clear_(java.lang.String,long)
 AdjacencyListGraph <- public org.graphstream.ui.swingViewer.Viewer org.graphstream.graph.implementations.AbstractGraph.display()
 AdjacencyListGraph <- public org.graphstream.ui.swingViewer.Viewer org.graphstream.graph.implementations.AbstractGraph.display(boolean)
 AdjacencyListGraph <- public void org.graphstream.graph.implementations.AbstractGraph.edgeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,boolean)
 AdjacencyListGraph <- public void org.graphstream.graph.implementations.AbstractGraph.edgeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 AdjacencyListGraph <- public void org.graphstream.graph.implementations.AbstractGraph.edgeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 AdjacencyListGraph <- public void org.graphstream.graph.implementations.AbstractGraph.edgeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 AdjacencyListGraph <- public org.graphstream.graph.EdgeFactory<? extends org.graphstream.graph.Edge> org.graphstream.graph.implementations.AbstractGraph.edgeFactory()
 AdjacencyListGraph <- public void org.graphstream.graph.implementations.AbstractGraph.edgeRemoved(java.lang.String,long,java.lang.String)
 AdjacencyListGraph <- public java.lang.Iterable<org.graphstream.stream.ElementSink> org.graphstream.graph.implementations.AbstractGraph.elementSinks()
 Modifiers for SingleGraph: 30
 SingleGraph <- public abstract void org.graphstream.graph.Element.addAttribute(java.lang.String,java.lang.Object...)
 SingleGraph <- public void org.graphstream.graph.implementations.AbstractGraph.addAttributeSink(org.graphstream.stream.AttributeSink)
 SingleGraph <- protected void org.graphstream.graph.implementations.AbstractElement.addAttribute_(java.lang.String,long,java.lang.String,java.lang.Object...)
 SingleGraph <- public abstract void org.graphstream.graph.Element.addAttributes(java.util.Map<java.lang.String, java.lang.Object>)
 SingleGraph <- protected void org.graphstream.graph.implementations.AbstractElement.addAttributes_(java.lang.String,long,java.util.Map<java.lang.String, java.lang.Object>)
 SingleGraph <- protected void org.graphstream.graph.implementations.AdjacencyListGraph.addEdgeCallback(org.graphstream.graph.implementations.AbstractEdge)
 SingleGraph <- public void org.graphstream.graph.implementations.AbstractGraph.addElementSink(org.graphstream.stream.ElementSink)
 SingleGraph <- protected void org.graphstream.graph.implementations.AdjacencyListGraph.addNodeCallback(org.graphstream.graph.implementations.AbstractNode)
 SingleGraph <- public void org.graphstream.graph.implementations.AbstractGraph.addSink(org.graphstream.stream.Sink)
 SingleGraph <- protected void org.graphstream.graph.implementations.AbstractGraph.attributeChanged(java.lang.String,long,java.lang.String,org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent,java.lang.Object,java.lang.Object)
 SingleGraph <- public java.lang.Iterable<org.graphstream.stream.AttributeSink> org.graphstream.graph.implementations.AbstractGraph.attributeSinks()
 SingleGraph <- public abstract void org.graphstream.graph.Element.changeAttribute(java.lang.String,java.lang.Object...)
 SingleGraph <- protected void org.graphstream.graph.implementations.AbstractElement.changeAttribute_(java.lang.String,long,java.lang.String,java.lang.Object...)
 SingleGraph <- public void org.graphstream.graph.implementations.AbstractGraph.clear()
 SingleGraph <- public void org.graphstream.graph.implementations.AbstractGraph.clearAttributeSinks()
 SingleGraph <- public abstract void org.graphstream.graph.Element.clearAttributes()
 SingleGraph <- protected void org.graphstream.graph.implementations.AbstractElement.clearAttributes_(java.lang.String,long)
 SingleGraph <- protected void org.graphstream.graph.implementations.AdjacencyListGraph.clearCallback()
 SingleGraph <- public void org.graphstream.graph.implementations.AbstractGraph.clearElementSinks()
 SingleGraph <- public void org.graphstream.graph.implementations.AbstractGraph.clearSinks()
 SingleGraph <- protected void org.graphstream.graph.implementations.AbstractGraph.clear_(java.lang.String,long)
 SingleGraph <- public org.graphstream.ui.swingViewer.Viewer org.graphstream.graph.implementations.AbstractGraph.display()
 SingleGraph <- public org.graphstream.ui.swingViewer.Viewer org.graphstream.graph.implementations.AbstractGraph.display(boolean)
 SingleGraph <- public void org.graphstream.graph.implementations.AbstractGraph.edgeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,boolean)
 SingleGraph <- public void org.graphstream.graph.implementations.AbstractGraph.edgeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 SingleGraph <- public void org.graphstream.graph.implementations.AbstractGraph.edgeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 SingleGraph <- public void org.graphstream.graph.implementations.AbstractGraph.edgeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 SingleGraph <- public org.graphstream.graph.EdgeFactory<? extends org.graphstream.graph.Edge> org.graphstream.graph.implementations.AbstractGraph.edgeFactory()
 SingleGraph <- public void org.graphstream.graph.implementations.AbstractGraph.edgeRemoved(java.lang.String,long,java.lang.String)
 SingleGraph <- public java.lang.Iterable<org.graphstream.stream.ElementSink> org.graphstream.graph.implementations.AbstractGraph.elementSinks()
 Modifiers for MultiGraph: 30
 MultiGraph <- public abstract void org.graphstream.graph.Element.addAttribute(java.lang.String,java.lang.Object...)
 MultiGraph <- public void org.graphstream.graph.implementations.AbstractGraph.addAttributeSink(org.graphstream.stream.AttributeSink)
 MultiGraph <- protected void org.graphstream.graph.implementations.AbstractElement.addAttribute_(java.lang.String,long,java.lang.String,java.lang.Object...)
 MultiGraph <- public abstract void org.graphstream.graph.Element.addAttributes(java.util.Map<java.lang.String, java.lang.Object>)
 MultiGraph <- protected void org.graphstream.graph.implementations.AbstractElement.addAttributes_(java.lang.String,long,java.util.Map<java.lang.String, java.lang.Object>)
 MultiGraph <- protected void org.graphstream.graph.implementations.AdjacencyListGraph.addEdgeCallback(org.graphstream.graph.implementations.AbstractEdge)
 MultiGraph <- public void org.graphstream.graph.implementations.AbstractGraph.addElementSink(org.graphstream.stream.ElementSink)
 MultiGraph <- protected void org.graphstream.graph.implementations.AdjacencyListGraph.addNodeCallback(org.graphstream.graph.implementations.AbstractNode)
 MultiGraph <- public void org.graphstream.graph.implementations.AbstractGraph.addSink(org.graphstream.stream.Sink)
 MultiGraph <- protected void org.graphstream.graph.implementations.AbstractGraph.attributeChanged(java.lang.String,long,java.lang.String,org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent,java.lang.Object,java.lang.Object)
 MultiGraph <- public java.lang.Iterable<org.graphstream.stream.AttributeSink> org.graphstream.graph.implementations.AbstractGraph.attributeSinks()
 MultiGraph <- public abstract void org.graphstream.graph.Element.changeAttribute(java.lang.String,java.lang.Object...)
 MultiGraph <- protected void org.graphstream.graph.implementations.AbstractElement.changeAttribute_(java.lang.String,long,java.lang.String,java.lang.Object...)
 MultiGraph <- public void org.graphstream.graph.implementations.AbstractGraph.clear()
 MultiGraph <- public void org.graphstream.graph.implementations.AbstractGraph.clearAttributeSinks()
 MultiGraph <- public abstract void org.graphstream.graph.Element.clearAttributes()
 MultiGraph <- protected void org.graphstream.graph.implementations.AbstractElement.clearAttributes_(java.lang.String,long)
 MultiGraph <- protected void org.graphstream.graph.implementations.AdjacencyListGraph.clearCallback()
 MultiGraph <- public void org.graphstream.graph.implementations.AbstractGraph.clearElementSinks()
 MultiGraph <- public void org.graphstream.graph.implementations.AbstractGraph.clearSinks()
 MultiGraph <- protected void org.graphstream.graph.implementations.AbstractGraph.clear_(java.lang.String,long)
 MultiGraph <- public org.graphstream.ui.swingViewer.Viewer org.graphstream.graph.implementations.AbstractGraph.display()
 MultiGraph <- public org.graphstream.ui.swingViewer.Viewer org.graphstream.graph.implementations.AbstractGraph.display(boolean)
 MultiGraph <- public void org.graphstream.graph.implementations.AbstractGraph.edgeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,boolean)
 MultiGraph <- public void org.graphstream.graph.implementations.AbstractGraph.edgeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 MultiGraph <- public void org.graphstream.graph.implementations.AbstractGraph.edgeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 MultiGraph <- public void org.graphstream.graph.implementations.AbstractGraph.edgeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 MultiGraph <- public org.graphstream.graph.EdgeFactory<? extends org.graphstream.graph.Edge> org.graphstream.graph.implementations.AbstractGraph.edgeFactory()
 MultiGraph <- public void org.graphstream.graph.implementations.AbstractGraph.edgeRemoved(java.lang.String,long,java.lang.String)
 MultiGraph <- public java.lang.Iterable<org.graphstream.stream.ElementSink> org.graphstream.graph.implementations.AbstractGraph.elementSinks()
 Modifiers for DefaultGraph: 30
 DefaultGraph <- public abstract void org.graphstream.graph.Element.addAttribute(java.lang.String,java.lang.Object...)
 DefaultGraph <- public void org.graphstream.graph.implementations.AbstractGraph.addAttributeSink(org.graphstream.stream.AttributeSink)
 DefaultGraph <- protected void org.graphstream.graph.implementations.AbstractElement.addAttribute_(java.lang.String,long,java.lang.String,java.lang.Object...)
 DefaultGraph <- public abstract void org.graphstream.graph.Element.addAttributes(java.util.Map<java.lang.String, java.lang.Object>)
 DefaultGraph <- protected void org.graphstream.graph.implementations.AbstractElement.addAttributes_(java.lang.String,long,java.util.Map<java.lang.String, java.lang.Object>)
 DefaultGraph <- protected void org.graphstream.graph.implementations.AdjacencyListGraph.addEdgeCallback(org.graphstream.graph.implementations.AbstractEdge)
 DefaultGraph <- public void org.graphstream.graph.implementations.AbstractGraph.addElementSink(org.graphstream.stream.ElementSink)
 DefaultGraph <- protected void org.graphstream.graph.implementations.AdjacencyListGraph.addNodeCallback(org.graphstream.graph.implementations.AbstractNode)
 DefaultGraph <- public void org.graphstream.graph.implementations.AbstractGraph.addSink(org.graphstream.stream.Sink)
 DefaultGraph <- protected void org.graphstream.graph.implementations.AbstractGraph.attributeChanged(java.lang.String,long,java.lang.String,org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent,java.lang.Object,java.lang.Object)
 DefaultGraph <- public java.lang.Iterable<org.graphstream.stream.AttributeSink> org.graphstream.graph.implementations.AbstractGraph.attributeSinks()
 DefaultGraph <- public abstract void org.graphstream.graph.Element.changeAttribute(java.lang.String,java.lang.Object...)
 DefaultGraph <- protected void org.graphstream.graph.implementations.AbstractElement.changeAttribute_(java.lang.String,long,java.lang.String,java.lang.Object...)
 DefaultGraph <- public void org.graphstream.graph.implementations.AbstractGraph.clear()
 DefaultGraph <- public void org.graphstream.graph.implementations.AbstractGraph.clearAttributeSinks()
 DefaultGraph <- public abstract void org.graphstream.graph.Element.clearAttributes()
 DefaultGraph <- protected void org.graphstream.graph.implementations.AbstractElement.clearAttributes_(java.lang.String,long)
 DefaultGraph <- protected void org.graphstream.graph.implementations.AdjacencyListGraph.clearCallback()
 DefaultGraph <- public void org.graphstream.graph.implementations.AbstractGraph.clearElementSinks()
 DefaultGraph <- public void org.graphstream.graph.implementations.AbstractGraph.clearSinks()
 DefaultGraph <- protected void org.graphstream.graph.implementations.AbstractGraph.clear_(java.lang.String,long)
 DefaultGraph <- public org.graphstream.ui.swingViewer.Viewer org.graphstream.graph.implementations.AbstractGraph.display()
 DefaultGraph <- public org.graphstream.ui.swingViewer.Viewer org.graphstream.graph.implementations.AbstractGraph.display(boolean)
 DefaultGraph <- public void org.graphstream.graph.implementations.AbstractGraph.edgeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,boolean)
 DefaultGraph <- public void org.graphstream.graph.implementations.AbstractGraph.edgeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 DefaultGraph <- public void org.graphstream.graph.implementations.AbstractGraph.edgeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 DefaultGraph <- public void org.graphstream.graph.implementations.AbstractGraph.edgeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 DefaultGraph <- public org.graphstream.graph.EdgeFactory<? extends org.graphstream.graph.Edge> org.graphstream.graph.implementations.AbstractGraph.edgeFactory()
 DefaultGraph <- public void org.graphstream.graph.implementations.AbstractGraph.edgeRemoved(java.lang.String,long,java.lang.String)
 DefaultGraph <- public java.lang.Iterable<org.graphstream.stream.ElementSink> org.graphstream.graph.implementations.AbstractGraph.elementSinks()
 Modifiers for AbstractElement.AttributeChangeEvent: 2
 AbstractElement.AttributeChangeEvent <- public static org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent.valueOf(java.lang.String)
 AbstractElement.AttributeChangeEvent <- public static org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent[] org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent.values()
 Modifiers for SinkAdapter: 15
 SinkAdapter <- public void org.graphstream.stream.SinkAdapter.edgeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,boolean)
 SinkAdapter <- public void org.graphstream.stream.SinkAdapter.edgeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 SinkAdapter <- public void org.graphstream.stream.SinkAdapter.edgeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 SinkAdapter <- public void org.graphstream.stream.SinkAdapter.edgeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 SinkAdapter <- public void org.graphstream.stream.SinkAdapter.edgeRemoved(java.lang.String,long,java.lang.String)
 SinkAdapter <- public void org.graphstream.stream.SinkAdapter.graphAttributeAdded(java.lang.String,long,java.lang.String,java.lang.Object)
 SinkAdapter <- public void org.graphstream.stream.SinkAdapter.graphAttributeChanged(java.lang.String,long,java.lang.String,java.lang.Object,java.lang.Object)
 SinkAdapter <- public void org.graphstream.stream.SinkAdapter.graphAttributeRemoved(java.lang.String,long,java.lang.String)
 SinkAdapter <- public void org.graphstream.stream.SinkAdapter.graphCleared(java.lang.String,long)
 SinkAdapter <- public void org.graphstream.stream.SinkAdapter.nodeAdded(java.lang.String,long,java.lang.String)
 SinkAdapter <- public void org.graphstream.stream.SinkAdapter.nodeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 SinkAdapter <- public void org.graphstream.stream.SinkAdapter.nodeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 SinkAdapter <- public void org.graphstream.stream.SinkAdapter.nodeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 SinkAdapter <- public void org.graphstream.stream.SinkAdapter.nodeRemoved(java.lang.String,long,java.lang.String)
 SinkAdapter <- public void org.graphstream.stream.SinkAdapter.stepBegins(java.lang.String,long,double)
 Modifiers for Timeline: 77
 Timeline <- public void org.graphstream.stream.SourceBase.addAttributeSink(org.graphstream.stream.AttributeSink)
 Timeline <- public void org.graphstream.stream.Timeline.addEdgeAt(long,java.lang.String,java.lang.String,java.lang.String,boolean)
 Timeline <- public void org.graphstream.stream.Timeline.addEdgeAttributeAt(long,java.lang.String,java.lang.String,java.lang.Object)
 Timeline <- public void org.graphstream.stream.SourceBase.addElementSink(org.graphstream.stream.ElementSink)
 Timeline <- public void org.graphstream.stream.Timeline.addGraphAttributeAt(long,java.lang.String,java.lang.Object)
 Timeline <- public void org.graphstream.stream.Timeline.addNodeAt(long,java.lang.String)
 Timeline <- public void org.graphstream.stream.Timeline.addNodeAttributeAt(long,java.lang.String,java.lang.String,java.lang.Object)
 Timeline <- public void org.graphstream.stream.SourceBase.addSink(org.graphstream.stream.Sink)
 Timeline <- public java.lang.Iterable<org.graphstream.stream.AttributeSink> org.graphstream.stream.SourceBase.attributeSinks()
 Timeline <- public void org.graphstream.stream.Timeline.changeEdgeAttributeAt(long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 Timeline <- public void org.graphstream.stream.Timeline.changeGraphAttributeAt(long,java.lang.String,java.lang.Object,java.lang.Object)
 Timeline <- public void org.graphstream.stream.Timeline.changeNodeAttributeAt(long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 Timeline <- public void org.graphstream.stream.SourceBase.clearAttributeSinks()
 Timeline <- public void org.graphstream.stream.SourceBase.clearElementSinks()
 Timeline <- public void org.graphstream.stream.Timeline.clearGraphAt(long)
 Timeline <- public void org.graphstream.stream.SourceBase.clearSinks()
 Timeline <- public void org.graphstream.stream.Timeline.edgeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,boolean)
 Timeline <- public void org.graphstream.stream.Timeline.edgeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 Timeline <- public void org.graphstream.stream.Timeline.edgeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 Timeline <- public void org.graphstream.stream.Timeline.edgeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 Timeline <- public void org.graphstream.stream.Timeline.edgeRemoved(java.lang.String,long,java.lang.String)
 Timeline <- public java.lang.Iterable<org.graphstream.stream.ElementSink> org.graphstream.stream.SourceBase.elementSinks()
 Timeline <- public void org.graphstream.stream.Timeline.graphAttributeAdded(java.lang.String,long,java.lang.String,java.lang.Object)
 Timeline <- public void org.graphstream.stream.Timeline.graphAttributeChanged(java.lang.String,long,java.lang.String,java.lang.Object,java.lang.Object)
 Timeline <- public void org.graphstream.stream.Timeline.graphAttributeRemoved(java.lang.String,long,java.lang.String)
 Timeline <- public void org.graphstream.stream.Timeline.graphCleared(java.lang.String,long)
 Timeline <- public boolean org.graphstream.stream.Timeline.next()
 Timeline <- public void org.graphstream.stream.Timeline.nodeAdded(java.lang.String,long,java.lang.String)
 Timeline <- public void org.graphstream.stream.Timeline.nodeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 Timeline <- public void org.graphstream.stream.Timeline.nodeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 Timeline <- public void org.graphstream.stream.Timeline.nodeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 Timeline <- public void org.graphstream.stream.Timeline.nodeRemoved(java.lang.String,long,java.lang.String)
 Timeline <- public void org.graphstream.stream.Timeline.play(long,long)
 Timeline <- public void org.graphstream.stream.Timeline.playAll()
 Timeline <- public void org.graphstream.stream.SourceBase.removeAttributeSink(org.graphstream.stream.AttributeSink)
 Timeline <- public void org.graphstream.stream.Timeline.removeEdgeAt(long,java.lang.String)
 Timeline <- public void org.graphstream.stream.Timeline.removeEdgeAttributeAt(long,java.lang.String,java.lang.String)
 Timeline <- public void org.graphstream.stream.SourceBase.removeElementSink(org.graphstream.stream.ElementSink)
 Timeline <- public void org.graphstream.stream.Timeline.removeGraphAttributeAt(long,java.lang.String)
 Timeline <- public void org.graphstream.stream.Timeline.removeNodeAt(long,java.lang.String)
 Timeline <- public void org.graphstream.stream.Timeline.removeNodeAttributeAt(long,java.lang.String,java.lang.String)
 Timeline <- public void org.graphstream.stream.SourceBase.removeSink(org.graphstream.stream.Sink)
 Timeline <- public void org.graphstream.stream.Timeline.reset()
 Timeline <- public void org.graphstream.stream.SourceBase.sendAttributeChangedEvent(java.lang.String,long,java.lang.String,org.graphstream.stream.SourceBase$ElementType,java.lang.String,org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent,java.lang.Object,java.lang.Object)
 Timeline <- public void org.graphstream.stream.SourceBase.sendAttributeChangedEvent(java.lang.String,java.lang.String,org.graphstream.stream.SourceBase$ElementType,java.lang.String,org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent,java.lang.Object,java.lang.Object)
 Timeline <- public void org.graphstream.stream.SourceBase.sendEdgeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,boolean)
 Timeline <- public void org.graphstream.stream.SourceBase.sendEdgeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)
 Timeline <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 Timeline <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
 Timeline <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 Timeline <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeChanged(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 Timeline <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 Timeline <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeRemoved(java.lang.String,java.lang.String,java.lang.String)
 Timeline <- public void org.graphstream.stream.SourceBase.sendEdgeRemoved(java.lang.String,long,java.lang.String)
 Timeline <- public void org.graphstream.stream.SourceBase.sendEdgeRemoved(java.lang.String,java.lang.String)
 Timeline <- public void org.graphstream.stream.SourceBase.sendGraphAttributeAdded(java.lang.String,long,java.lang.String,java.lang.Object)
 Timeline <- public void org.graphstream.stream.SourceBase.sendGraphAttributeAdded(java.lang.String,java.lang.String,java.lang.Object)
 Timeline <- public void org.graphstream.stream.SourceBase.sendGraphAttributeChanged(java.lang.String,long,java.lang.String,java.lang.Object,java.lang.Object)
 Timeline <- public void org.graphstream.stream.SourceBase.sendGraphAttributeChanged(java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 Timeline <- public void org.graphstream.stream.SourceBase.sendGraphAttributeRemoved(java.lang.String,long,java.lang.String)
 Timeline <- public void org.graphstream.stream.SourceBase.sendGraphAttributeRemoved(java.lang.String,java.lang.String)
 Timeline <- public void org.graphstream.stream.SourceBase.sendGraphCleared(java.lang.String)
 Timeline <- public void org.graphstream.stream.SourceBase.sendGraphCleared(java.lang.String,long)
 Timeline <- public void org.graphstream.stream.SourceBase.sendNodeAdded(java.lang.String,long,java.lang.String)
 Timeline <- public void org.graphstream.stream.SourceBase.sendNodeAdded(java.lang.String,java.lang.String)
 Timeline <- public void org.graphstream.stream.SourceBase.sendNodeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 Timeline <- public void org.graphstream.stream.SourceBase.sendNodeAttributeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
 Timeline <- public void org.graphstream.stream.SourceBase.sendNodeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 Timeline <- public void org.graphstream.stream.SourceBase.sendNodeAttributeChanged(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 Timeline <- public void org.graphstream.stream.SourceBase.sendNodeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 Timeline <- public void org.graphstream.stream.SourceBase.sendNodeAttributeRemoved(java.lang.String,java.lang.String,java.lang.String)
 Timeline <- public void org.graphstream.stream.SourceBase.sendNodeRemoved(java.lang.String,long,java.lang.String)
 Timeline <- public void org.graphstream.stream.SourceBase.sendNodeRemoved(java.lang.String,java.lang.String)
 Timeline <- public void org.graphstream.stream.SourceBase.sendStepBegins(java.lang.String,double)
 Timeline <- public void org.graphstream.stream.SourceBase.sendStepBegins(java.lang.String,long,double)
 Timeline <- public void org.graphstream.stream.Timeline.stepBegins(java.lang.String,long,double)
 Timeline <- public void org.graphstream.stream.Timeline.stepBeginsAt(long,double)
 Modifiers for PipeBase: 58
 PipeBase <- public abstract void org.graphstream.stream.Source.addAttributeSink(org.graphstream.stream.AttributeSink)
 PipeBase <- public abstract void org.graphstream.stream.Source.addElementSink(org.graphstream.stream.ElementSink)
 PipeBase <- public abstract void org.graphstream.stream.Source.addSink(org.graphstream.stream.Sink)
 PipeBase <- public java.lang.Iterable<org.graphstream.stream.AttributeSink> org.graphstream.stream.SourceBase.attributeSinks()
 PipeBase <- public abstract void org.graphstream.stream.Source.clearAttributeSinks()
 PipeBase <- public abstract void org.graphstream.stream.Source.clearElementSinks()
 PipeBase <- public abstract void org.graphstream.stream.Source.clearSinks()
 PipeBase <- public void org.graphstream.stream.PipeBase.edgeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,boolean)
 PipeBase <- public void org.graphstream.stream.PipeBase.edgeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 PipeBase <- public void org.graphstream.stream.PipeBase.edgeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 PipeBase <- public void org.graphstream.stream.PipeBase.edgeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 PipeBase <- public void org.graphstream.stream.PipeBase.edgeRemoved(java.lang.String,long,java.lang.String)
 PipeBase <- public java.lang.Iterable<org.graphstream.stream.ElementSink> org.graphstream.stream.SourceBase.elementSinks()
 PipeBase <- public void org.graphstream.stream.PipeBase.graphAttributeAdded(java.lang.String,long,java.lang.String,java.lang.Object)
 PipeBase <- public void org.graphstream.stream.PipeBase.graphAttributeChanged(java.lang.String,long,java.lang.String,java.lang.Object,java.lang.Object)
 PipeBase <- public void org.graphstream.stream.PipeBase.graphAttributeRemoved(java.lang.String,long,java.lang.String)
 PipeBase <- public void org.graphstream.stream.PipeBase.graphCleared(java.lang.String,long)
 PipeBase <- public void org.graphstream.stream.PipeBase.nodeAdded(java.lang.String,long,java.lang.String)
 PipeBase <- public void org.graphstream.stream.PipeBase.nodeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 PipeBase <- public void org.graphstream.stream.PipeBase.nodeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 PipeBase <- public void org.graphstream.stream.PipeBase.nodeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 PipeBase <- public void org.graphstream.stream.PipeBase.nodeRemoved(java.lang.String,long,java.lang.String)
 PipeBase <- public abstract void org.graphstream.stream.Source.removeAttributeSink(org.graphstream.stream.AttributeSink)
 PipeBase <- public abstract void org.graphstream.stream.Source.removeElementSink(org.graphstream.stream.ElementSink)
 PipeBase <- public abstract void org.graphstream.stream.Source.removeSink(org.graphstream.stream.Sink)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendAttributeChangedEvent(java.lang.String,long,java.lang.String,org.graphstream.stream.SourceBase$ElementType,java.lang.String,org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent,java.lang.Object,java.lang.Object)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendAttributeChangedEvent(java.lang.String,java.lang.String,org.graphstream.stream.SourceBase$ElementType,java.lang.String,org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent,java.lang.Object,java.lang.Object)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendEdgeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,boolean)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendEdgeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeChanged(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeRemoved(java.lang.String,java.lang.String,java.lang.String)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendEdgeRemoved(java.lang.String,long,java.lang.String)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendEdgeRemoved(java.lang.String,java.lang.String)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendGraphAttributeAdded(java.lang.String,long,java.lang.String,java.lang.Object)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendGraphAttributeAdded(java.lang.String,java.lang.String,java.lang.Object)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendGraphAttributeChanged(java.lang.String,long,java.lang.String,java.lang.Object,java.lang.Object)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendGraphAttributeChanged(java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendGraphAttributeRemoved(java.lang.String,long,java.lang.String)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendGraphAttributeRemoved(java.lang.String,java.lang.String)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendGraphCleared(java.lang.String)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendGraphCleared(java.lang.String,long)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendNodeAdded(java.lang.String,long,java.lang.String)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendNodeAdded(java.lang.String,java.lang.String)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendNodeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendNodeAttributeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendNodeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendNodeAttributeChanged(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendNodeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendNodeAttributeRemoved(java.lang.String,java.lang.String,java.lang.String)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendNodeRemoved(java.lang.String,long,java.lang.String)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendNodeRemoved(java.lang.String,java.lang.String)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendStepBegins(java.lang.String,double)
 PipeBase <- public void org.graphstream.stream.SourceBase.sendStepBegins(java.lang.String,long,double)
 PipeBase <- public void org.graphstream.stream.PipeBase.stepBegins(java.lang.String,long,double)
 Modifiers for PipeAdapter: 24
 PipeAdapter <- public void org.graphstream.stream.PipeAdapter.addAttributeSink(org.graphstream.stream.AttributeSink)
 PipeAdapter <- public void org.graphstream.stream.PipeAdapter.addElementSink(org.graphstream.stream.ElementSink)
 PipeAdapter <- public void org.graphstream.stream.PipeAdapter.addSink(org.graphstream.stream.Sink)
 PipeAdapter <- public void org.graphstream.stream.PipeAdapter.clearAttributeSinks()
 PipeAdapter <- public void org.graphstream.stream.PipeAdapter.clearElementSinks()
 PipeAdapter <- public void org.graphstream.stream.PipeAdapter.clearSinks()
 PipeAdapter <- public void org.graphstream.stream.PipeAdapter.edgeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,boolean)
 PipeAdapter <- public void org.graphstream.stream.PipeAdapter.edgeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 PipeAdapter <- public void org.graphstream.stream.PipeAdapter.edgeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 PipeAdapter <- public void org.graphstream.stream.PipeAdapter.edgeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 PipeAdapter <- public void org.graphstream.stream.PipeAdapter.edgeRemoved(java.lang.String,long,java.lang.String)
 PipeAdapter <- public void org.graphstream.stream.PipeAdapter.graphAttributeAdded(java.lang.String,long,java.lang.String,java.lang.Object)
 PipeAdapter <- public void org.graphstream.stream.PipeAdapter.graphAttributeChanged(java.lang.String,long,java.lang.String,java.lang.Object,java.lang.Object)
 PipeAdapter <- public void org.graphstream.stream.PipeAdapter.graphAttributeRemoved(java.lang.String,long,java.lang.String)
 PipeAdapter <- public void org.graphstream.stream.PipeAdapter.graphCleared(java.lang.String,long)
 PipeAdapter <- public void org.graphstream.stream.PipeAdapter.nodeAdded(java.lang.String,long,java.lang.String)
 PipeAdapter <- public void org.graphstream.stream.PipeAdapter.nodeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 PipeAdapter <- public void org.graphstream.stream.PipeAdapter.nodeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 PipeAdapter <- public void org.graphstream.stream.PipeAdapter.nodeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 PipeAdapter <- public void org.graphstream.stream.PipeAdapter.nodeRemoved(java.lang.String,long,java.lang.String)
 PipeAdapter <- public void org.graphstream.stream.PipeAdapter.removeAttributeSink(org.graphstream.stream.AttributeSink)
 PipeAdapter <- public void org.graphstream.stream.PipeAdapter.removeElementSink(org.graphstream.stream.ElementSink)
 PipeAdapter <- public void org.graphstream.stream.PipeAdapter.removeSink(org.graphstream.stream.Sink)
 PipeAdapter <- public void org.graphstream.stream.PipeAdapter.stepBegins(java.lang.String,long,double)
 Modifiers for AttributePipe: 66
 AttributePipe <- public abstract void org.graphstream.stream.Source.addAttributeSink(org.graphstream.stream.AttributeSink)
 AttributePipe <- public abstract void org.graphstream.stream.Source.addElementSink(org.graphstream.stream.ElementSink)
 AttributePipe <- public abstract void org.graphstream.stream.Source.addSink(org.graphstream.stream.Sink)
 AttributePipe <- public java.lang.Iterable<org.graphstream.stream.AttributeSink> org.graphstream.stream.SourceBase.attributeSinks()
 AttributePipe <- public abstract void org.graphstream.stream.Source.clearAttributeSinks()
 AttributePipe <- public abstract void org.graphstream.stream.Source.clearElementSinks()
 AttributePipe <- public abstract void org.graphstream.stream.Source.clearSinks()
 AttributePipe <- public void org.graphstream.stream.PipeBase.edgeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,boolean)
 AttributePipe <- public void org.graphstream.stream.AttributePipe.edgeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 AttributePipe <- public void org.graphstream.stream.AttributePipe.edgeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 AttributePipe <- public void org.graphstream.stream.AttributePipe.edgeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 AttributePipe <- public void org.graphstream.stream.PipeBase.edgeRemoved(java.lang.String,long,java.lang.String)
 AttributePipe <- public java.lang.Iterable<org.graphstream.stream.ElementSink> org.graphstream.stream.SourceBase.elementSinks()
 AttributePipe <- public org.graphstream.stream.AttributePredicate org.graphstream.stream.AttributePipe.getEdgeAttributeFilter()
 AttributePipe <- public org.graphstream.stream.AttributePredicate org.graphstream.stream.AttributePipe.getGlobalAttributeFilter()
 AttributePipe <- public org.graphstream.stream.AttributePredicate org.graphstream.stream.AttributePipe.getGraphAttributeFilter()
 AttributePipe <- public org.graphstream.stream.AttributePredicate org.graphstream.stream.AttributePipe.getNodeAttributeFilter()
 AttributePipe <- public void org.graphstream.stream.AttributePipe.graphAttributeAdded(java.lang.String,long,java.lang.String,java.lang.Object)
 AttributePipe <- public void org.graphstream.stream.AttributePipe.graphAttributeChanged(java.lang.String,long,java.lang.String,java.lang.Object,java.lang.Object)
 AttributePipe <- public void org.graphstream.stream.AttributePipe.graphAttributeRemoved(java.lang.String,long,java.lang.String)
 AttributePipe <- public void org.graphstream.stream.PipeBase.graphCleared(java.lang.String,long)
 AttributePipe <- public void org.graphstream.stream.PipeBase.nodeAdded(java.lang.String,long,java.lang.String)
 AttributePipe <- public void org.graphstream.stream.AttributePipe.nodeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 AttributePipe <- public void org.graphstream.stream.AttributePipe.nodeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 AttributePipe <- public void org.graphstream.stream.AttributePipe.nodeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 AttributePipe <- public void org.graphstream.stream.PipeBase.nodeRemoved(java.lang.String,long,java.lang.String)
 AttributePipe <- public abstract void org.graphstream.stream.Source.removeAttributeSink(org.graphstream.stream.AttributeSink)
 AttributePipe <- public abstract void org.graphstream.stream.Source.removeElementSink(org.graphstream.stream.ElementSink)
 AttributePipe <- public abstract void org.graphstream.stream.Source.removeSink(org.graphstream.stream.Sink)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendAttributeChangedEvent(java.lang.String,long,java.lang.String,org.graphstream.stream.SourceBase$ElementType,java.lang.String,org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent,java.lang.Object,java.lang.Object)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendAttributeChangedEvent(java.lang.String,java.lang.String,org.graphstream.stream.SourceBase$ElementType,java.lang.String,org.graphstream.graph.implementations.AbstractElement$AttributeChangeEvent,java.lang.Object,java.lang.Object)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendEdgeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,boolean)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendEdgeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeChanged(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendEdgeAttributeRemoved(java.lang.String,java.lang.String,java.lang.String)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendEdgeRemoved(java.lang.String,long,java.lang.String)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendEdgeRemoved(java.lang.String,java.lang.String)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendGraphAttributeAdded(java.lang.String,long,java.lang.String,java.lang.Object)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendGraphAttributeAdded(java.lang.String,java.lang.String,java.lang.Object)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendGraphAttributeChanged(java.lang.String,long,java.lang.String,java.lang.Object,java.lang.Object)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendGraphAttributeChanged(java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendGraphAttributeRemoved(java.lang.String,long,java.lang.String)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendGraphAttributeRemoved(java.lang.String,java.lang.String)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendGraphCleared(java.lang.String)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendGraphCleared(java.lang.String,long)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendNodeAdded(java.lang.String,long,java.lang.String)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendNodeAdded(java.lang.String,java.lang.String)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendNodeAttributeAdded(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendNodeAttributeAdded(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendNodeAttributeChanged(java.lang.String,long,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendNodeAttributeChanged(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendNodeAttributeRemoved(java.lang.String,long,java.lang.String,java.lang.String)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendNodeAttributeRemoved(java.lang.String,java.lang.String,java.lang.String)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendNodeRemoved(java.lang.String,long,java.lang.String)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendNodeRemoved(java.lang.String,java.lang.String)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendStepBegins(java.lang.String,double)
 AttributePipe <- public void org.graphstream.stream.SourceBase.sendStepBegins(java.lang.String,long,double)
 AttributePipe <- public void org.graphstream.stream.AttributePipe.setEdgeAttributeFilter(org.graphstream.stream.AttributePredicate)
 AttributePipe <- public void org.graphstream.stream.AttributePipe.setGlobalAttributeFilter(org.graphstream.stream.AttributePredicate)
 AttributePipe <- public void org.graphstream.stream.AttributePipe.setGraphAttributeFilter(org.graphstream.stream.AttributePredicate)
 AttributePipe <- public void org.graphstream.stream.AttributePipe.setNodeAttributeFilter(org.graphstream.stream.AttributePredicate)
 AttributePipe <- public void org.graphstream.stream.PipeBase.stepBegins(java.lang.String,long,double)
 Modifiers for SourceBase.ElementType: 2
 SourceBase.ElementType <- public static org.graphstream.stream.SourceBase$ElementType org.graphstream.stream.SourceBase$ElementType.valueOf(java.lang.String)
 SourceBase.ElementType <- public static org.graphstream.stream.SourceBase$ElementType[] org.graphstream.stream.SourceBase$ElementType.values()
Test calls
 public org.graphstream.graph.implementations.MultiNode_Stub()
 public void org.graphstream.graph.implementations.MultiNode_Stub.addAttribute(java.lang.String,java.lang.Object...)
 public void org.graphstream.graph.implementations.MultiNode_Stub.addAttributes(java.util.Map)
 public void org.graphstream.graph.implementations.MultiNode_Stub.changeAttribute(java.lang.String,java.lang.Object...)
 public void org.graphstream.graph.implementations.MultiNode_Stub.clearAttributes()
 public int org.graphstream.graph.implementations.MultiNode_Stub.collectionSize(java.util.Collection)
 public java.lang.Object[] org.graphstream.graph.implementations.MultiNode_Stub.getArray(java.lang.String)
 public java.lang.Object org.graphstream.graph.implementations.MultiNode_Stub.getAttribute(java.lang.String,java.lang.Class)
 public int org.graphstream.graph.implementations.MultiNode_Stub.getAttributeCount()
 public java.util.Collection org.graphstream.graph.implementations.MultiNode_Stub.getAttributeKeySet()
 public int org.graphstream.graph.implementations.MultiNode_Stub.getDegree()
 public java.lang.Iterable org.graphstream.graph.implementations.MultiNode_Stub.getEachAttributeKey()
 public java.lang.Iterable org.graphstream.graph.implementations.MultiNode_Stub.getEachEdge()
 public java.lang.Iterable org.graphstream.graph.implementations.MultiNode_Stub.getEachEnteringEdge()
 public java.lang.Iterable org.graphstream.graph.implementations.MultiNode_Stub.getEachLeavingEdge()
 public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdge(int)
 public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeBetween(int)
 public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeBetween(java.lang.String)
 public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeBetween(org.graphstream.graph.Node)
 public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeFrom(int)
 public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeFrom(java.lang.String)
 public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeFrom(org.graphstream.graph.Node)
 public java.util.Collection org.graphstream.graph.implementations.MultiNode_Stub.getEdgeSet()
 public java.util.Collection org.graphstream.graph.implementations.MultiNode_Stub.getEdgeSetBetween(int)
 public java.util.Collection org.graphstream.graph.implementations.MultiNode_Stub.getEdgeSetBetween(java.lang.String)
 public java.util.Collection org.graphstream.graph.implementations.MultiNode_Stub.getEdgeSetBetween(org.graphstream.graph.Node)
 public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeToward(int)
 public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeToward(java.lang.String)
 public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEdgeToward(org.graphstream.graph.Node)
 public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getEnteringEdge(int)
 public java.util.Collection org.graphstream.graph.implementations.MultiNode_Stub.getEnteringEdgeSet()
 public java.lang.Object org.graphstream.graph.implementations.MultiNode_Stub.getFirstAttributeOf(java.lang.Class,java.lang.String...)
 public java.lang.Object org.graphstream.graph.implementations.MultiNode_Stub.getFirstAttributeOf(java.lang.String...)
 public org.graphstream.graph.Graph org.graphstream.graph.implementations.MultiNode_Stub.getGraph()
 public java.util.HashMap org.graphstream.graph.implementations.MultiNode_Stub.getHash(java.lang.String)
 public java.lang.String org.graphstream.graph.implementations.MultiNode_Stub.getId()
 public int org.graphstream.graph.implementations.MultiNode_Stub.getInDegree()
 public int org.graphstream.graph.implementations.MultiNode_Stub.getIndex()
 public java.lang.CharSequence org.graphstream.graph.implementations.MultiNode_Stub.getLabel(java.lang.String)
 public org.graphstream.graph.Edge org.graphstream.graph.implementations.MultiNode_Stub.getLeavingEdge(int)
 public java.util.Collection org.graphstream.graph.implementations.MultiNode_Stub.getLeavingEdgeSet()
 public double org.graphstream.graph.implementations.MultiNode_Stub.getNumber(java.lang.String)
 public int org.graphstream.graph.implementations.MultiNode_Stub.getOutDegree()
 public java.util.ArrayList org.graphstream.graph.implementations.MultiNode_Stub.getVector(java.lang.String)
 public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasArray(java.lang.String)
 public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasAttribute(java.lang.String)
 public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasAttribute(java.lang.String,java.lang.Class)
 public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasEdgeBetween(int)
 public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasEdgeBetween(java.lang.String)
 public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasEdgeBetween(org.graphstream.graph.Node)
 public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasEdgeFrom(int)
 public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasEdgeFrom(java.lang.String)
 public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasEdgeFrom(org.graphstream.graph.Node)
 public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasEdgeToward(int)
 public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasEdgeToward(java.lang.String)
 public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasEdgeToward(org.graphstream.graph.Node)
 public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasHash(java.lang.String)
 public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasLabel(java.lang.String)
 public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasNumber(java.lang.String)
 public boolean org.graphstream.graph.implementations.MultiNode_Stub.hasVector(java.lang.String)
 public boolean org.graphstream.graph.implementations.MultiNode_Stub.isEnteringEdge(org.graphstream.graph.Edge)
 public boolean org.graphstream.graph.implementations.MultiNode_Stub.isIncidentEdge(org.graphstream.graph.Edge)
 public boolean org.graphstream.graph.implementations.MultiNode_Stub.isLeavingEdge(org.graphstream.graph.Edge)
 public void org.graphstream.graph.implementations.MultiNode_Stub.method_under_test()
 public void org.graphstream.graph.implementations.MultiNode_Stub.removeAttribute(java.lang.String)
 public void org.graphstream.graph.implementations.MultiNode_Stub.setAttribute(java.lang.String,java.lang.Object...)
 public void org.graphstream.graph.implementations.MultiNode_Stub.set_results(java.lang.Object)
